
LCD_SCREEN_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d68  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a90  08009f38  08009f38  00019f38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9c8  0800a9c8  00020218  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9c8  0800a9c8  0001a9c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9d0  0800a9d0  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9d0  0800a9d0  0001a9d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9d4  0800a9d4  0001a9d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800a9d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000068c  20000218  0800abf0  00020218  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008a4  0800abf0  000208a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2ff  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000264f  00000000  00000000  0002f547  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cf8  00000000  00000000  00031b98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ba8  00000000  00000000  00032890  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022c15  00000000  00000000  00033438  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bd90  00000000  00000000  0005604d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cf452  00000000  00000000  00061ddd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013122f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040e8  00000000  00000000  001312ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000218 	.word	0x20000218
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009f20 	.word	0x08009f20

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000021c 	.word	0x2000021c
 800020c:	08009f20 	.word	0x08009f20

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b972 	b.w	8000fc4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	4688      	mov	r8, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14b      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4615      	mov	r5, r2
 8000d0a:	d967      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0720 	rsb	r7, r2, #32
 8000d16:	fa01 f302 	lsl.w	r3, r1, r2
 8000d1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d1e:	4095      	lsls	r5, r2
 8000d20:	ea47 0803 	orr.w	r8, r7, r3
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d30:	fa1f fc85 	uxth.w	ip, r5
 8000d34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18eb      	adds	r3, r5, r3
 8000d46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d4a:	f080 811b 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8118 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d54:	3f02      	subs	r7, #2
 8000d56:	442b      	add	r3, r5
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6c:	45a4      	cmp	ip, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	192c      	adds	r4, r5, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d80:	3802      	subs	r0, #2
 8000d82:	442c      	add	r4, r5
 8000d84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d88:	eba4 040c 	sub.w	r4, r4, ip
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	b11e      	cbz	r6, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c6 4300 	strd	r4, r3, [r6]
 8000d98:	4639      	mov	r1, r7
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0xbe>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80eb 	beq.w	8000f7e <__udivmoddi4+0x286>
 8000da8:	2700      	movs	r7, #0
 8000daa:	e9c6 0100 	strd	r0, r1, [r6]
 8000dae:	4638      	mov	r0, r7
 8000db0:	4639      	mov	r1, r7
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f783 	clz	r7, r3
 8000dba:	2f00      	cmp	r7, #0
 8000dbc:	d147      	bne.n	8000e4e <__udivmoddi4+0x156>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0xd0>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80fa 	bhi.w	8000fbc <__udivmoddi4+0x2c4>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0303 	sbc.w	r3, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	4698      	mov	r8, r3
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d0e0      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000dd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dda:	e7dd      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000ddc:	b902      	cbnz	r2, 8000de0 <__udivmoddi4+0xe8>
 8000dde:	deff      	udf	#255	; 0xff
 8000de0:	fab2 f282 	clz	r2, r2
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f040 808f 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000dea:	1b49      	subs	r1, r1, r5
 8000dec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df0:	fa1f f885 	uxth.w	r8, r5
 8000df4:	2701      	movs	r7, #1
 8000df6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dfa:	0c23      	lsrs	r3, r4, #16
 8000dfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb08 f10c 	mul.w	r1, r8, ip
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0c:	18eb      	adds	r3, r5, r3
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	f200 80cd 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1a59      	subs	r1, r3, r1
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x14c>
 8000e34:	192c      	adds	r4, r5, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x14a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80b6 	bhi.w	8000fae <__udivmoddi4+0x2b6>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e79f      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e52:	40bb      	lsls	r3, r7
 8000e54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e6c:	4325      	orrs	r5, r4
 8000e6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e72:	0c2c      	lsrs	r4, r5, #16
 8000e74:	fb08 3319 	mls	r3, r8, r9, r3
 8000e78:	fa1f fa8e 	uxth.w	sl, lr
 8000e7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e80:	fb09 f40a 	mul.w	r4, r9, sl
 8000e84:	429c      	cmp	r4, r3
 8000e86:	fa02 f207 	lsl.w	r2, r2, r7
 8000e8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1e 0303 	adds.w	r3, lr, r3
 8000e94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e98:	f080 8087 	bcs.w	8000faa <__udivmoddi4+0x2b2>
 8000e9c:	429c      	cmp	r4, r3
 8000e9e:	f240 8084 	bls.w	8000faa <__udivmoddi4+0x2b2>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4473      	add	r3, lr
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	b2ad      	uxth	r5, r5
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000eb4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000eb8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ebc:	45a2      	cmp	sl, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ec4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ec8:	d26b      	bcs.n	8000fa2 <__udivmoddi4+0x2aa>
 8000eca:	45a2      	cmp	sl, r4
 8000ecc:	d969      	bls.n	8000fa2 <__udivmoddi4+0x2aa>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4474      	add	r4, lr
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eda:	eba4 040a 	sub.w	r4, r4, sl
 8000ede:	454c      	cmp	r4, r9
 8000ee0:	46c2      	mov	sl, r8
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	d354      	bcc.n	8000f90 <__udivmoddi4+0x298>
 8000ee6:	d051      	beq.n	8000f8c <__udivmoddi4+0x294>
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d069      	beq.n	8000fc0 <__udivmoddi4+0x2c8>
 8000eec:	ebb1 050a 	subs.w	r5, r1, sl
 8000ef0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ef4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ef8:	40fd      	lsrs	r5, r7
 8000efa:	40fc      	lsrs	r4, r7
 8000efc:	ea4c 0505 	orr.w	r5, ip, r5
 8000f00:	e9c6 5400 	strd	r5, r4, [r6]
 8000f04:	2700      	movs	r7, #0
 8000f06:	e747      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f08:	f1c2 0320 	rsb	r3, r2, #32
 8000f0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f10:	4095      	lsls	r5, r2
 8000f12:	fa01 f002 	lsl.w	r0, r1, r2
 8000f16:	fa21 f303 	lsr.w	r3, r1, r3
 8000f1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f1e:	4338      	orrs	r0, r7
 8000f20:	0c01      	lsrs	r1, r0, #16
 8000f22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f26:	fa1f f885 	uxth.w	r8, r5
 8000f2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb07 f308 	mul.w	r3, r7, r8
 8000f36:	428b      	cmp	r3, r1
 8000f38:	fa04 f402 	lsl.w	r4, r4, r2
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x256>
 8000f3e:	1869      	adds	r1, r5, r1
 8000f40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f44:	d22f      	bcs.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f46:	428b      	cmp	r3, r1
 8000f48:	d92d      	bls.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f4a:	3f02      	subs	r7, #2
 8000f4c:	4429      	add	r1, r5
 8000f4e:	1acb      	subs	r3, r1, r3
 8000f50:	b281      	uxth	r1, r0
 8000f52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f5e:	fb00 f308 	mul.w	r3, r0, r8
 8000f62:	428b      	cmp	r3, r1
 8000f64:	d907      	bls.n	8000f76 <__udivmoddi4+0x27e>
 8000f66:	1869      	adds	r1, r5, r1
 8000f68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f6c:	d217      	bcs.n	8000f9e <__udivmoddi4+0x2a6>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d915      	bls.n	8000f9e <__udivmoddi4+0x2a6>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4429      	add	r1, r5
 8000f76:	1ac9      	subs	r1, r1, r3
 8000f78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f7c:	e73b      	b.n	8000df6 <__udivmoddi4+0xfe>
 8000f7e:	4637      	mov	r7, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e709      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f84:	4607      	mov	r7, r0
 8000f86:	e6e7      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f88:	4618      	mov	r0, r3
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f8c:	4541      	cmp	r1, r8
 8000f8e:	d2ab      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f94:	eb69 020e 	sbc.w	r2, r9, lr
 8000f98:	3801      	subs	r0, #1
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	e7a4      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f9e:	4660      	mov	r0, ip
 8000fa0:	e7e9      	b.n	8000f76 <__udivmoddi4+0x27e>
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	e795      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa6:	4667      	mov	r7, ip
 8000fa8:	e7d1      	b.n	8000f4e <__udivmoddi4+0x256>
 8000faa:	4681      	mov	r9, r0
 8000fac:	e77c      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fae:	3802      	subs	r0, #2
 8000fb0:	442c      	add	r4, r5
 8000fb2:	e747      	b.n	8000e44 <__udivmoddi4+0x14c>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	442b      	add	r3, r5
 8000fba:	e72f      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fbc:	4638      	mov	r0, r7
 8000fbe:	e708      	b.n	8000dd2 <__udivmoddi4+0xda>
 8000fc0:	4637      	mov	r7, r6
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0xa0>

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <BMI088_Init>:


#include "BMI088.h"
#include <stdlib.h>

void BMI088_Init(void) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(BMI088_CSB1_A_PORT, BMI088_CSB1_A_PIN, GPIO_PIN_RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fd2:	4810      	ldr	r0, [pc, #64]	; (8001014 <BMI088_Init+0x4c>)
 8000fd4:	f003 f900 	bl	80041d8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000fd8:	200a      	movs	r0, #10
 8000fda:	f001 fea3 	bl	8002d24 <HAL_Delay>
	HAL_GPIO_WritePin(BMI088_CSB1_A_PORT, BMI088_CSB1_A_PIN, GPIO_PIN_SET);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fe4:	480b      	ldr	r0, [pc, #44]	; (8001014 <BMI088_Init+0x4c>)
 8000fe6:	f003 f8f7 	bl	80041d8 <HAL_GPIO_WritePin>
	BMI088_setAccScaleRange(RANGE_6G);
 8000fea:	2001      	movs	r0, #1
 8000fec:	f000 f88a 	bl	8001104 <BMI088_setAccScaleRange>
	BMI088_setAccOutputDataRate(ODR_100);
 8000ff0:	2008      	movs	r0, #8
 8000ff2:	f000 f8bb 	bl	800116c <BMI088_setAccOutputDataRate>
	BMI088_setAccPoweMode(ACC_ACTIVE);
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	f000 f83c 	bl	8001074 <BMI088_setAccPoweMode>


	BMI088_setGyroScaleRange(RANGE_2000);
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f000 f8d5 	bl	80011ac <BMI088_setGyroScaleRange>
	BMI088_setGyroOutputDataRate(ODR_2000_BW_532);
 8001002:	2000      	movs	r0, #0
 8001004:	f000 f910 	bl	8001228 <BMI088_setGyroOutputDataRate>
	BMI088_setGyroPoweMode(GYRO_NORMAL);
 8001008:	2000      	movs	r0, #0
 800100a:	f000 f857 	bl	80010bc <BMI088_setGyroPoweMode>
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40020800 	.word	0x40020800

08001018 <BMI088_isConnection>:

int BMI088_isConnection(void) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
	uint8_t  test, test2;
	test = BMI088_getAccID();
 800101e:	f000 f817 	bl	8001050 <BMI088_getAccID>
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
	test2 = BMI088_getGyroID();
 8001026:	f000 f81c 	bl	8001062 <BMI088_getGyroID>
 800102a:	4603      	mov	r3, r0
 800102c:	71bb      	strb	r3, [r7, #6]
	return ((BMI088_getAccID() == 0x1E) && (BMI088_getGyroID() == 0x0F));
 800102e:	f000 f80f 	bl	8001050 <BMI088_getAccID>
 8001032:	4603      	mov	r3, r0
 8001034:	2b1e      	cmp	r3, #30
 8001036:	d106      	bne.n	8001046 <BMI088_isConnection+0x2e>
 8001038:	f000 f813 	bl	8001062 <BMI088_getGyroID>
 800103c:	4603      	mov	r3, r0
 800103e:	2b0f      	cmp	r3, #15
 8001040:	d101      	bne.n	8001046 <BMI088_isConnection+0x2e>
 8001042:	2301      	movs	r3, #1
 8001044:	e000      	b.n	8001048 <BMI088_isConnection+0x30>
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <BMI088_getAccID>:

void BMI088_resetGyro(void) {
	BMI088_write8(GYRO, BMI088_GYRO_SOFT_RESET, 0xB6);
}

uint8_t BMI088_getAccID(void) {
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
    return BMI088_read8(ACC, BMI088_GYRO_CHIP_ID);
 8001054:	2100      	movs	r1, #0
 8001056:	2000      	movs	r0, #0
 8001058:	f000 fa40 	bl	80014dc <BMI088_read8>
 800105c:	4603      	mov	r3, r0
}
 800105e:	4618      	mov	r0, r3
 8001060:	bd80      	pop	{r7, pc}

08001062 <BMI088_getGyroID>:

uint8_t BMI088_getGyroID(void) {
 8001062:	b580      	push	{r7, lr}
 8001064:	af00      	add	r7, sp, #0
    return BMI088_read8(GYRO, BMI088_GYRO_CHIP_ID);
 8001066:	2100      	movs	r1, #0
 8001068:	2001      	movs	r0, #1
 800106a:	f000 fa37 	bl	80014dc <BMI088_read8>
 800106e:	4603      	mov	r3, r0
}
 8001070:	4618      	mov	r0, r3
 8001072:	bd80      	pop	{r7, pc}

08001074 <BMI088_setAccPoweMode>:

void BMI088_setAccPoweMode(acc_power_type_t mode) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
    if (mode == ACC_ACTIVE) {
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d10a      	bne.n	800109a <BMI088_setAccPoweMode+0x26>
    	BMI088_write8(ACC, BMI088_ACC_PWR_CTRl, 0x04);
 8001084:	2204      	movs	r2, #4
 8001086:	217d      	movs	r1, #125	; 0x7d
 8001088:	2000      	movs	r0, #0
 800108a:	f000 f9d9 	bl	8001440 <BMI088_write8>
    	BMI088_write8(ACC, BMI088_ACC_PWR_CONF, 0x00);
 800108e:	2200      	movs	r2, #0
 8001090:	217c      	movs	r1, #124	; 0x7c
 8001092:	2000      	movs	r0, #0
 8001094:	f000 f9d4 	bl	8001440 <BMI088_write8>
    } else if (mode == ACC_SUSPEND) {
    	BMI088_write8(ACC, BMI088_ACC_PWR_CONF, 0x03);
    	BMI088_write8(ACC, BMI088_ACC_PWR_CTRl, 0x00);
    }
}
 8001098:	e00c      	b.n	80010b4 <BMI088_setAccPoweMode+0x40>
    } else if (mode == ACC_SUSPEND) {
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	2b03      	cmp	r3, #3
 800109e:	d109      	bne.n	80010b4 <BMI088_setAccPoweMode+0x40>
    	BMI088_write8(ACC, BMI088_ACC_PWR_CONF, 0x03);
 80010a0:	2203      	movs	r2, #3
 80010a2:	217c      	movs	r1, #124	; 0x7c
 80010a4:	2000      	movs	r0, #0
 80010a6:	f000 f9cb 	bl	8001440 <BMI088_write8>
    	BMI088_write8(ACC, BMI088_ACC_PWR_CTRl, 0x00);
 80010aa:	2200      	movs	r2, #0
 80010ac:	217d      	movs	r1, #125	; 0x7d
 80010ae:	2000      	movs	r0, #0
 80010b0:	f000 f9c6 	bl	8001440 <BMI088_write8>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <BMI088_setGyroPoweMode>:

void BMI088_setGyroPoweMode(gyro_power_type_t mode) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
    if (mode == GYRO_NORMAL) {
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d105      	bne.n	80010d8 <BMI088_setGyroPoweMode+0x1c>
    	BMI088_write8(GYRO, BMI088_GYRO_LPM_1, (uint8_t)GYRO_NORMAL);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2111      	movs	r1, #17
 80010d0:	2001      	movs	r0, #1
 80010d2:	f000 f9b5 	bl	8001440 <BMI088_write8>
    } else if (mode == GYRO_SUSPEND) {
    	BMI088_write8(GYRO, BMI088_GYRO_LPM_1, (uint8_t)GYRO_SUSPEND);
    } else if (mode == GYRO_DEEP_SUSPEND) {
    	BMI088_write8(GYRO, BMI088_GYRO_LPM_1, (uint8_t)GYRO_DEEP_SUSPEND);
    }
}
 80010d6:	e010      	b.n	80010fa <BMI088_setGyroPoweMode+0x3e>
    } else if (mode == GYRO_SUSPEND) {
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	2b80      	cmp	r3, #128	; 0x80
 80010dc:	d105      	bne.n	80010ea <BMI088_setGyroPoweMode+0x2e>
    	BMI088_write8(GYRO, BMI088_GYRO_LPM_1, (uint8_t)GYRO_SUSPEND);
 80010de:	2280      	movs	r2, #128	; 0x80
 80010e0:	2111      	movs	r1, #17
 80010e2:	2001      	movs	r0, #1
 80010e4:	f000 f9ac 	bl	8001440 <BMI088_write8>
}
 80010e8:	e007      	b.n	80010fa <BMI088_setGyroPoweMode+0x3e>
    } else if (mode == GYRO_DEEP_SUSPEND) {
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	2b20      	cmp	r3, #32
 80010ee:	d104      	bne.n	80010fa <BMI088_setGyroPoweMode+0x3e>
    	BMI088_write8(GYRO, BMI088_GYRO_LPM_1, (uint8_t)GYRO_DEEP_SUSPEND);
 80010f0:	2220      	movs	r2, #32
 80010f2:	2111      	movs	r1, #17
 80010f4:	2001      	movs	r0, #1
 80010f6:	f000 f9a3 	bl	8001440 <BMI088_write8>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <BMI088_setAccScaleRange>:

void BMI088_setAccScaleRange(acc_scale_type_t range) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
    if (range == RANGE_3G) {
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d103      	bne.n	800111c <BMI088_setAccScaleRange+0x18>
        accRange = 3000;
 8001114:	4b10      	ldr	r3, [pc, #64]	; (8001158 <BMI088_setAccScaleRange+0x54>)
 8001116:	4a11      	ldr	r2, [pc, #68]	; (800115c <BMI088_setAccScaleRange+0x58>)
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	e013      	b.n	8001144 <BMI088_setAccScaleRange+0x40>
    } else if (range == RANGE_6G) {
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d103      	bne.n	800112a <BMI088_setAccScaleRange+0x26>
        accRange = 6000;
 8001122:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <BMI088_setAccScaleRange+0x54>)
 8001124:	4a0e      	ldr	r2, [pc, #56]	; (8001160 <BMI088_setAccScaleRange+0x5c>)
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	e00c      	b.n	8001144 <BMI088_setAccScaleRange+0x40>
    } else if (range == RANGE_12G) {
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	2b02      	cmp	r3, #2
 800112e:	d103      	bne.n	8001138 <BMI088_setAccScaleRange+0x34>
        accRange = 12000;
 8001130:	4b09      	ldr	r3, [pc, #36]	; (8001158 <BMI088_setAccScaleRange+0x54>)
 8001132:	4a0c      	ldr	r2, [pc, #48]	; (8001164 <BMI088_setAccScaleRange+0x60>)
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	e005      	b.n	8001144 <BMI088_setAccScaleRange+0x40>
    } else if (range == RANGE_24G) {
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	2b03      	cmp	r3, #3
 800113c:	d102      	bne.n	8001144 <BMI088_setAccScaleRange+0x40>
        accRange = 24000;
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <BMI088_setAccScaleRange+0x54>)
 8001140:	4a09      	ldr	r2, [pc, #36]	; (8001168 <BMI088_setAccScaleRange+0x64>)
 8001142:	601a      	str	r2, [r3, #0]
    }

    BMI088_write8(ACC, BMI088_ACC_RANGE, (uint8_t)range);
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	461a      	mov	r2, r3
 8001148:	2141      	movs	r1, #65	; 0x41
 800114a:	2000      	movs	r0, #0
 800114c:	f000 f978 	bl	8001440 <BMI088_write8>
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	2000065c 	.word	0x2000065c
 800115c:	453b8000 	.word	0x453b8000
 8001160:	45bb8000 	.word	0x45bb8000
 8001164:	463b8000 	.word	0x463b8000
 8001168:	46bb8000 	.word	0x46bb8000

0800116c <BMI088_setAccOutputDataRate>:

void BMI088_setAccOutputDataRate(acc_odr_type_t odr) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
    uint8_t data = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	73fb      	strb	r3, [r7, #15]

    data = BMI088_read8(ACC, BMI088_ACC_CONF);
 800117a:	2140      	movs	r1, #64	; 0x40
 800117c:	2000      	movs	r0, #0
 800117e:	f000 f9ad 	bl	80014dc <BMI088_read8>
 8001182:	4603      	mov	r3, r0
 8001184:	73fb      	strb	r3, [r7, #15]
    data = data & 0xf0;
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	f023 030f 	bic.w	r3, r3, #15
 800118c:	73fb      	strb	r3, [r7, #15]
    data = data | (uint8_t)odr;
 800118e:	7bfa      	ldrb	r2, [r7, #15]
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	4313      	orrs	r3, r2
 8001194:	73fb      	strb	r3, [r7, #15]

    BMI088_write8(ACC, BMI088_ACC_CONF, data);
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	461a      	mov	r2, r3
 800119a:	2140      	movs	r1, #64	; 0x40
 800119c:	2000      	movs	r0, #0
 800119e:	f000 f94f 	bl	8001440 <BMI088_write8>
}
 80011a2:	bf00      	nop
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <BMI088_setGyroScaleRange>:

void BMI088_setGyroScaleRange(gyro_scale_type_t range) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
    if (range == RANGE_2000) {
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d103      	bne.n	80011c4 <BMI088_setGyroScaleRange+0x18>
        gyroRange = 2000;
 80011bc:	4b14      	ldr	r3, [pc, #80]	; (8001210 <BMI088_setGyroScaleRange+0x64>)
 80011be:	4a15      	ldr	r2, [pc, #84]	; (8001214 <BMI088_setGyroScaleRange+0x68>)
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	e01a      	b.n	80011fa <BMI088_setGyroScaleRange+0x4e>
    } else if (range == RANGE_1000) {
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d103      	bne.n	80011d2 <BMI088_setGyroScaleRange+0x26>
        gyroRange = 1000;
 80011ca:	4b11      	ldr	r3, [pc, #68]	; (8001210 <BMI088_setGyroScaleRange+0x64>)
 80011cc:	4a12      	ldr	r2, [pc, #72]	; (8001218 <BMI088_setGyroScaleRange+0x6c>)
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	e013      	b.n	80011fa <BMI088_setGyroScaleRange+0x4e>
    } else if (range == RANGE_500) {
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d103      	bne.n	80011e0 <BMI088_setGyroScaleRange+0x34>
        gyroRange = 500;
 80011d8:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <BMI088_setGyroScaleRange+0x64>)
 80011da:	4a10      	ldr	r2, [pc, #64]	; (800121c <BMI088_setGyroScaleRange+0x70>)
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	e00c      	b.n	80011fa <BMI088_setGyroScaleRange+0x4e>
    } else if (range == RANGE_250) {
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	2b03      	cmp	r3, #3
 80011e4:	d103      	bne.n	80011ee <BMI088_setGyroScaleRange+0x42>
        gyroRange = 250;
 80011e6:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <BMI088_setGyroScaleRange+0x64>)
 80011e8:	4a0d      	ldr	r2, [pc, #52]	; (8001220 <BMI088_setGyroScaleRange+0x74>)
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	e005      	b.n	80011fa <BMI088_setGyroScaleRange+0x4e>
    } else if (range == RANGE_125) {
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	2b04      	cmp	r3, #4
 80011f2:	d102      	bne.n	80011fa <BMI088_setGyroScaleRange+0x4e>
        gyroRange = 125;
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <BMI088_setGyroScaleRange+0x64>)
 80011f6:	4a0b      	ldr	r2, [pc, #44]	; (8001224 <BMI088_setGyroScaleRange+0x78>)
 80011f8:	601a      	str	r2, [r3, #0]
    }

    BMI088_write8(GYRO, BMI088_GYRO_RANGE, (uint8_t)range);
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	461a      	mov	r2, r3
 80011fe:	210f      	movs	r1, #15
 8001200:	2001      	movs	r0, #1
 8001202:	f000 f91d 	bl	8001440 <BMI088_write8>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000660 	.word	0x20000660
 8001214:	44fa0000 	.word	0x44fa0000
 8001218:	447a0000 	.word	0x447a0000
 800121c:	43fa0000 	.word	0x43fa0000
 8001220:	437a0000 	.word	0x437a0000
 8001224:	42fa0000 	.word	0x42fa0000

08001228 <BMI088_setGyroOutputDataRate>:

void BMI088_setGyroOutputDataRate(gyro_odr_type_t odr) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
	BMI088_write8(GYRO, BMI088_GYRO_BAND_WIDTH, (uint8_t)odr);
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	461a      	mov	r2, r3
 8001236:	2110      	movs	r1, #16
 8001238:	2001      	movs	r0, #1
 800123a:	f000 f901 	bl	8001440 <BMI088_write8>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <BMI088_getAcceleration>:

void BMI088_getAcceleration(float* x, float* y, float* z) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	; 0x28
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
    uint8_t buf[6] = {0};
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	809a      	strh	r2, [r3, #4]
    uint16_t ax = 0, ay = 0, az = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001262:	2300      	movs	r3, #0
 8001264:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001266:	2300      	movs	r3, #0
 8001268:	847b      	strh	r3, [r7, #34]	; 0x22
    float value = 0;
 800126a:	f04f 0300 	mov.w	r3, #0
 800126e:	61fb      	str	r3, [r7, #28]

    BMI088_read(ACC, BMI088_ACC_X_LSB, buf, 6);
 8001270:	f107 0214 	add.w	r2, r7, #20
 8001274:	2306      	movs	r3, #6
 8001276:	2112      	movs	r1, #18
 8001278:	2000      	movs	r0, #0
 800127a:	f000 f98b 	bl	8001594 <BMI088_read>

    ax = buf[0] | (buf[1] << 8);
 800127e:	7d3b      	ldrb	r3, [r7, #20]
 8001280:	b21a      	sxth	r2, r3
 8001282:	7d7b      	ldrb	r3, [r7, #21]
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	b21b      	sxth	r3, r3
 8001288:	4313      	orrs	r3, r2
 800128a:	b21b      	sxth	r3, r3
 800128c:	84fb      	strh	r3, [r7, #38]	; 0x26
    ay = buf[2] | (buf[3] << 8);
 800128e:	7dbb      	ldrb	r3, [r7, #22]
 8001290:	b21a      	sxth	r2, r3
 8001292:	7dfb      	ldrb	r3, [r7, #23]
 8001294:	021b      	lsls	r3, r3, #8
 8001296:	b21b      	sxth	r3, r3
 8001298:	4313      	orrs	r3, r2
 800129a:	b21b      	sxth	r3, r3
 800129c:	84bb      	strh	r3, [r7, #36]	; 0x24
    az = buf[4] | (buf[5] << 8);
 800129e:	7e3b      	ldrb	r3, [r7, #24]
 80012a0:	b21a      	sxth	r2, r3
 80012a2:	7e7b      	ldrb	r3, [r7, #25]
 80012a4:	021b      	lsls	r3, r3, #8
 80012a6:	b21b      	sxth	r3, r3
 80012a8:	4313      	orrs	r3, r2
 80012aa:	b21b      	sxth	r3, r3
 80012ac:	847b      	strh	r3, [r7, #34]	; 0x22

    value = (int16_t)ax;
 80012ae:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80012b2:	ee07 3a90 	vmov	s15, r3
 80012b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ba:	edc7 7a07 	vstr	s15, [r7, #28]
    *x = accRange * value / 32768;
 80012be:	4b1f      	ldr	r3, [pc, #124]	; (800133c <BMI088_getAcceleration+0xf4>)
 80012c0:	ed93 7a00 	vldr	s14, [r3]
 80012c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80012c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012cc:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001340 <BMI088_getAcceleration+0xf8>
 80012d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	edc3 7a00 	vstr	s15, [r3]

    value = (int16_t)ay;
 80012da:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80012de:	ee07 3a90 	vmov	s15, r3
 80012e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012e6:	edc7 7a07 	vstr	s15, [r7, #28]
    *y = accRange * value / 32768;
 80012ea:	4b14      	ldr	r3, [pc, #80]	; (800133c <BMI088_getAcceleration+0xf4>)
 80012ec:	ed93 7a00 	vldr	s14, [r3]
 80012f0:	edd7 7a07 	vldr	s15, [r7, #28]
 80012f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012f8:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001340 <BMI088_getAcceleration+0xf8>
 80012fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	edc3 7a00 	vstr	s15, [r3]

    value = (int16_t)az;
 8001306:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800130a:	ee07 3a90 	vmov	s15, r3
 800130e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001312:	edc7 7a07 	vstr	s15, [r7, #28]
    *z = accRange * value / 32768;
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <BMI088_getAcceleration+0xf4>)
 8001318:	ed93 7a00 	vldr	s14, [r3]
 800131c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001320:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001324:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001340 <BMI088_getAcceleration+0xf8>
 8001328:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	edc3 7a00 	vstr	s15, [r3]
}
 8001332:	bf00      	nop
 8001334:	3728      	adds	r7, #40	; 0x28
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	2000065c 	.word	0x2000065c
 8001340:	47000000 	.word	0x47000000

08001344 <BMI088_getGyroscope>:
    value = accRange * value / 32768;

    return value;
}

void BMI088_getGyroscope(float* x, float* y, float* z) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	; 0x28
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
    uint8_t buf[6] = {0};
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	809a      	strh	r2, [r3, #4]
    uint16_t gx = 0, gy = 0, gz = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800135e:	2300      	movs	r3, #0
 8001360:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001362:	2300      	movs	r3, #0
 8001364:	847b      	strh	r3, [r7, #34]	; 0x22
    float value = 0;
 8001366:	f04f 0300 	mov.w	r3, #0
 800136a:	61fb      	str	r3, [r7, #28]

    BMI088_read(GYRO, BMI088_GYRO_RATE_X_LSB, buf, 6);
 800136c:	f107 0214 	add.w	r2, r7, #20
 8001370:	2306      	movs	r3, #6
 8001372:	2102      	movs	r1, #2
 8001374:	2001      	movs	r0, #1
 8001376:	f000 f90d 	bl	8001594 <BMI088_read>

    gx = buf[0] | (buf[1] << 8);
 800137a:	7d3b      	ldrb	r3, [r7, #20]
 800137c:	b21a      	sxth	r2, r3
 800137e:	7d7b      	ldrb	r3, [r7, #21]
 8001380:	021b      	lsls	r3, r3, #8
 8001382:	b21b      	sxth	r3, r3
 8001384:	4313      	orrs	r3, r2
 8001386:	b21b      	sxth	r3, r3
 8001388:	84fb      	strh	r3, [r7, #38]	; 0x26
    gy = buf[2] | (buf[3] << 8);
 800138a:	7dbb      	ldrb	r3, [r7, #22]
 800138c:	b21a      	sxth	r2, r3
 800138e:	7dfb      	ldrb	r3, [r7, #23]
 8001390:	021b      	lsls	r3, r3, #8
 8001392:	b21b      	sxth	r3, r3
 8001394:	4313      	orrs	r3, r2
 8001396:	b21b      	sxth	r3, r3
 8001398:	84bb      	strh	r3, [r7, #36]	; 0x24
    gz = buf[4] | (buf[5] << 8);
 800139a:	7e3b      	ldrb	r3, [r7, #24]
 800139c:	b21a      	sxth	r2, r3
 800139e:	7e7b      	ldrb	r3, [r7, #25]
 80013a0:	021b      	lsls	r3, r3, #8
 80013a2:	b21b      	sxth	r3, r3
 80013a4:	4313      	orrs	r3, r2
 80013a6:	b21b      	sxth	r3, r3
 80013a8:	847b      	strh	r3, [r7, #34]	; 0x22

    value = (int16_t)gx;
 80013aa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80013ae:	ee07 3a90 	vmov	s15, r3
 80013b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b6:	edc7 7a07 	vstr	s15, [r7, #28]
    *x = gyroRange * value / 32768;
 80013ba:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <BMI088_getGyroscope+0xf4>)
 80013bc:	ed93 7a00 	vldr	s14, [r3]
 80013c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80013c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013c8:	eddf 6a1c 	vldr	s13, [pc, #112]	; 800143c <BMI088_getGyroscope+0xf8>
 80013cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	edc3 7a00 	vstr	s15, [r3]

    value = (int16_t)gy;
 80013d6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80013da:	ee07 3a90 	vmov	s15, r3
 80013de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013e2:	edc7 7a07 	vstr	s15, [r7, #28]
    *y = gyroRange * value / 32768;
 80013e6:	4b14      	ldr	r3, [pc, #80]	; (8001438 <BMI088_getGyroscope+0xf4>)
 80013e8:	ed93 7a00 	vldr	s14, [r3]
 80013ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80013f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013f4:	eddf 6a11 	vldr	s13, [pc, #68]	; 800143c <BMI088_getGyroscope+0xf8>
 80013f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	edc3 7a00 	vstr	s15, [r3]

    value = (int16_t)gz;
 8001402:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001406:	ee07 3a90 	vmov	s15, r3
 800140a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800140e:	edc7 7a07 	vstr	s15, [r7, #28]
    *z = gyroRange * value / 32768;
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <BMI088_getGyroscope+0xf4>)
 8001414:	ed93 7a00 	vldr	s14, [r3]
 8001418:	edd7 7a07 	vldr	s15, [r7, #28]
 800141c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001420:	eddf 6a06 	vldr	s13, [pc, #24]	; 800143c <BMI088_getGyroscope+0xf8>
 8001424:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	edc3 7a00 	vstr	s15, [r3]
}
 800142e:	bf00      	nop
 8001430:	3728      	adds	r7, #40	; 0x28
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000660 	.word	0x20000660
 800143c:	47000000 	.word	0x47000000

08001440 <BMI088_write8>:
    }

    return (int16_t)(data / 8 + 23);
}

void BMI088_write8(device_type_t dev, uint8_t reg, uint8_t val) {
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	71fb      	strb	r3, [r7, #7]
 800144a:	460b      	mov	r3, r1
 800144c:	71bb      	strb	r3, [r7, #6]
 800144e:	4613      	mov	r3, r2
 8001450:	717b      	strb	r3, [r7, #5]

	reg &= 0x7F;
 8001452:	79bb      	ldrb	r3, [r7, #6]
 8001454:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001458:	b2db      	uxtb	r3, r3
 800145a:	71bb      	strb	r3, [r7, #6]
    if (dev) {
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d018      	beq.n	8001494 <BMI088_write8+0x54>

        	HAL_GPIO_WritePin(BMI088_CSB2_G_PORT, BMI088_CSB2_G_PIN, GPIO_PIN_RESET);
 8001462:	2200      	movs	r2, #0
 8001464:	2104      	movs	r1, #4
 8001466:	481a      	ldr	r0, [pc, #104]	; (80014d0 <BMI088_write8+0x90>)
 8001468:	f002 feb6 	bl	80041d8 <HAL_GPIO_WritePin>

        	HAL_SPI_Transmit(&BMI088_SPI_PORT, (uint8_t *) &reg, 1, 1000);
 800146c:	1db9      	adds	r1, r7, #6
 800146e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001472:	2201      	movs	r2, #1
 8001474:	4817      	ldr	r0, [pc, #92]	; (80014d4 <BMI088_write8+0x94>)
 8001476:	f003 fc0d 	bl	8004c94 <HAL_SPI_Transmit>
        	HAL_SPI_Transmit(&BMI088_SPI_PORT, (uint8_t *) &val, 1, 1000);
 800147a:	1d79      	adds	r1, r7, #5
 800147c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001480:	2201      	movs	r2, #1
 8001482:	4814      	ldr	r0, [pc, #80]	; (80014d4 <BMI088_write8+0x94>)
 8001484:	f003 fc06 	bl	8004c94 <HAL_SPI_Transmit>

        	HAL_GPIO_WritePin(BMI088_CSB2_G_PORT, BMI088_CSB2_G_PIN, GPIO_PIN_SET);
 8001488:	2201      	movs	r2, #1
 800148a:	2104      	movs	r1, #4
 800148c:	4810      	ldr	r0, [pc, #64]	; (80014d0 <BMI088_write8+0x90>)
 800148e:	f002 fea3 	bl	80041d8 <HAL_GPIO_WritePin>
//    Wire.beginTransmission(addr);
//    Wire.write(reg);
//    Wire.write(val);
//    Wire.endTransmission();

}
 8001492:	e019      	b.n	80014c8 <BMI088_write8+0x88>
        	HAL_GPIO_WritePin(BMI088_CSB1_A_PORT, BMI088_CSB1_A_PIN, GPIO_PIN_RESET);
 8001494:	2200      	movs	r2, #0
 8001496:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800149a:	480f      	ldr	r0, [pc, #60]	; (80014d8 <BMI088_write8+0x98>)
 800149c:	f002 fe9c 	bl	80041d8 <HAL_GPIO_WritePin>
        	HAL_SPI_Transmit(&BMI088_SPI_PORT, (uint8_t *) &reg, 1, 1000);
 80014a0:	1db9      	adds	r1, r7, #6
 80014a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a6:	2201      	movs	r2, #1
 80014a8:	480a      	ldr	r0, [pc, #40]	; (80014d4 <BMI088_write8+0x94>)
 80014aa:	f003 fbf3 	bl	8004c94 <HAL_SPI_Transmit>
        	HAL_SPI_Transmit(&BMI088_SPI_PORT, (uint8_t *) &val, 1, 1000);
 80014ae:	1d79      	adds	r1, r7, #5
 80014b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b4:	2201      	movs	r2, #1
 80014b6:	4807      	ldr	r0, [pc, #28]	; (80014d4 <BMI088_write8+0x94>)
 80014b8:	f003 fbec 	bl	8004c94 <HAL_SPI_Transmit>
        	HAL_GPIO_WritePin(BMI088_CSB1_A_PORT, BMI088_CSB1_A_PIN, GPIO_PIN_SET);
 80014bc:	2201      	movs	r2, #1
 80014be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014c2:	4805      	ldr	r0, [pc, #20]	; (80014d8 <BMI088_write8+0x98>)
 80014c4:	f002 fe88 	bl	80041d8 <HAL_GPIO_WritePin>
}
 80014c8:	bf00      	nop
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40020c00 	.word	0x40020c00
 80014d4:	20000744 	.word	0x20000744
 80014d8:	40020800 	.word	0x40020800

080014dc <BMI088_read8>:

uint8_t BMI088_read8(device_type_t dev, uint8_t reg) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	460a      	mov	r2, r1
 80014e6:	71fb      	strb	r3, [r7, #7]
 80014e8:	4613      	mov	r3, r2
 80014ea:	71bb      	strb	r3, [r7, #6]
    uint8_t data = 0, dummy = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	73fb      	strb	r3, [r7, #15]
 80014f0:	2300      	movs	r3, #0
 80014f2:	73bb      	strb	r3, [r7, #14]

    reg |= 0x80;
 80014f4:	79bb      	ldrb	r3, [r7, #6]
 80014f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	71bb      	strb	r3, [r7, #6]

    if (dev) {
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d019      	beq.n	8001538 <BMI088_read8+0x5c>
    	HAL_GPIO_WritePin(BMI088_CSB2_G_PORT, BMI088_CSB2_G_PIN, GPIO_PIN_RESET);
 8001504:	2200      	movs	r2, #0
 8001506:	2104      	movs	r1, #4
 8001508:	481f      	ldr	r0, [pc, #124]	; (8001588 <BMI088_read8+0xac>)
 800150a:	f002 fe65 	bl	80041d8 <HAL_GPIO_WritePin>

    	HAL_SPI_Transmit(&BMI088_SPI_PORT, (uint8_t *) &reg, 1, 1000);
 800150e:	1db9      	adds	r1, r7, #6
 8001510:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001514:	2201      	movs	r2, #1
 8001516:	481d      	ldr	r0, [pc, #116]	; (800158c <BMI088_read8+0xb0>)
 8001518:	f003 fbbc 	bl	8004c94 <HAL_SPI_Transmit>
    	HAL_SPI_Receive(&BMI088_SPI_PORT, (uint8_t *) &data, 1, 1000);
 800151c:	f107 010f 	add.w	r1, r7, #15
 8001520:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001524:	2201      	movs	r2, #1
 8001526:	4819      	ldr	r0, [pc, #100]	; (800158c <BMI088_read8+0xb0>)
 8001528:	f003 fce8 	bl	8004efc <HAL_SPI_Receive>
    	HAL_GPIO_WritePin(BMI088_CSB2_G_PORT, BMI088_CSB2_G_PIN, GPIO_PIN_SET);
 800152c:	2201      	movs	r2, #1
 800152e:	2104      	movs	r1, #4
 8001530:	4815      	ldr	r0, [pc, #84]	; (8001588 <BMI088_read8+0xac>)
 8001532:	f002 fe51 	bl	80041d8 <HAL_GPIO_WritePin>
 8001536:	e022      	b.n	800157e <BMI088_read8+0xa2>
        //addr = devAddrGyro;
    } else {
    	HAL_GPIO_WritePin(BMI088_CSB1_A_PORT, BMI088_CSB1_A_PIN, GPIO_PIN_RESET);
 8001538:	2200      	movs	r2, #0
 800153a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800153e:	4814      	ldr	r0, [pc, #80]	; (8001590 <BMI088_read8+0xb4>)
 8001540:	f002 fe4a 	bl	80041d8 <HAL_GPIO_WritePin>

    	HAL_SPI_Transmit(&BMI088_SPI_PORT, (uint8_t *) &reg, 1, 1000);
 8001544:	1db9      	adds	r1, r7, #6
 8001546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800154a:	2201      	movs	r2, #1
 800154c:	480f      	ldr	r0, [pc, #60]	; (800158c <BMI088_read8+0xb0>)
 800154e:	f003 fba1 	bl	8004c94 <HAL_SPI_Transmit>
    	HAL_SPI_Receive(&BMI088_SPI_PORT, (uint8_t *) &dummy, 1, 1000);
 8001552:	f107 010e 	add.w	r1, r7, #14
 8001556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800155a:	2201      	movs	r2, #1
 800155c:	480b      	ldr	r0, [pc, #44]	; (800158c <BMI088_read8+0xb0>)
 800155e:	f003 fccd 	bl	8004efc <HAL_SPI_Receive>
    	HAL_SPI_Receive(&BMI088_SPI_PORT, (uint8_t *) &data, 1, 1000);
 8001562:	f107 010f 	add.w	r1, r7, #15
 8001566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800156a:	2201      	movs	r2, #1
 800156c:	4807      	ldr	r0, [pc, #28]	; (800158c <BMI088_read8+0xb0>)
 800156e:	f003 fcc5 	bl	8004efc <HAL_SPI_Receive>
    	HAL_GPIO_WritePin(BMI088_CSB1_A_PORT, BMI088_CSB1_A_PIN, GPIO_PIN_SET);
 8001572:	2201      	movs	r2, #1
 8001574:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001578:	4805      	ldr	r0, [pc, #20]	; (8001590 <BMI088_read8+0xb4>)
 800157a:	f002 fe2d 	bl	80041d8 <HAL_GPIO_WritePin>
//    Wire.requestFrom(addr, 1);
//    while (Wire.available()) {
//        data = Wire.read();
//    }

    return data;
 800157e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40020c00 	.word	0x40020c00
 800158c:	20000744 	.word	0x20000744
 8001590:	40020800 	.word	0x40020800

08001594 <BMI088_read>:
//    }

    return (lsb | (msb << 8) | (hsb << 16));
}

void BMI088_read(device_type_t dev, uint8_t reg, uint8_t* buf, uint16_t len) {
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	603a      	str	r2, [r7, #0]
 800159c:	461a      	mov	r2, r3
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
 80015a2:	460b      	mov	r3, r1
 80015a4:	71bb      	strb	r3, [r7, #6]
 80015a6:	4613      	mov	r3, r2
 80015a8:	80bb      	strh	r3, [r7, #4]
    uint8_t dummy = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	73fb      	strb	r3, [r7, #15]

    reg |= 0x80;
 80015ae:	79bb      	ldrb	r3, [r7, #6]
 80015b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	71bb      	strb	r3, [r7, #6]

    if (dev) {
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d018      	beq.n	80015f0 <BMI088_read+0x5c>
       	HAL_GPIO_WritePin(BMI088_CSB2_G_PORT, BMI088_CSB2_G_PIN, GPIO_PIN_RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	2104      	movs	r1, #4
 80015c2:	481e      	ldr	r0, [pc, #120]	; (800163c <BMI088_read+0xa8>)
 80015c4:	f002 fe08 	bl	80041d8 <HAL_GPIO_WritePin>

       	HAL_SPI_Transmit(&BMI088_SPI_PORT, (uint8_t *) &reg, 1, 1000);
 80015c8:	1db9      	adds	r1, r7, #6
 80015ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ce:	2201      	movs	r2, #1
 80015d0:	481b      	ldr	r0, [pc, #108]	; (8001640 <BMI088_read+0xac>)
 80015d2:	f003 fb5f 	bl	8004c94 <HAL_SPI_Transmit>
       	HAL_SPI_Receive(&BMI088_SPI_PORT, buf, len, 1000);
 80015d6:	88ba      	ldrh	r2, [r7, #4]
 80015d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015dc:	6839      	ldr	r1, [r7, #0]
 80015de:	4818      	ldr	r0, [pc, #96]	; (8001640 <BMI088_read+0xac>)
 80015e0:	f003 fc8c 	bl	8004efc <HAL_SPI_Receive>
       	HAL_GPIO_WritePin(BMI088_CSB2_G_PORT, BMI088_CSB2_G_PIN, GPIO_PIN_SET);
 80015e4:	2201      	movs	r2, #1
 80015e6:	2104      	movs	r1, #4
 80015e8:	4814      	ldr	r0, [pc, #80]	; (800163c <BMI088_read+0xa8>)
 80015ea:	f002 fdf5 	bl	80041d8 <HAL_GPIO_WritePin>
//    while (Wire.available()) {
//        for (uint16_t i = 0; i < len; i ++) {
//            buf[i] = Wire.read();
//        }
//    }
}
 80015ee:	e021      	b.n	8001634 <BMI088_read+0xa0>
       	HAL_GPIO_WritePin(BMI088_CSB1_A_PORT, BMI088_CSB1_A_PIN, GPIO_PIN_RESET);
 80015f0:	2200      	movs	r2, #0
 80015f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015f6:	4813      	ldr	r0, [pc, #76]	; (8001644 <BMI088_read+0xb0>)
 80015f8:	f002 fdee 	bl	80041d8 <HAL_GPIO_WritePin>
       	HAL_SPI_Transmit(&BMI088_SPI_PORT, (uint8_t *) &reg, 1, 1000);
 80015fc:	1db9      	adds	r1, r7, #6
 80015fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001602:	2201      	movs	r2, #1
 8001604:	480e      	ldr	r0, [pc, #56]	; (8001640 <BMI088_read+0xac>)
 8001606:	f003 fb45 	bl	8004c94 <HAL_SPI_Transmit>
       	HAL_SPI_Receive(&BMI088_SPI_PORT, (uint8_t *) &dummy, 1, 1000);
 800160a:	f107 010f 	add.w	r1, r7, #15
 800160e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001612:	2201      	movs	r2, #1
 8001614:	480a      	ldr	r0, [pc, #40]	; (8001640 <BMI088_read+0xac>)
 8001616:	f003 fc71 	bl	8004efc <HAL_SPI_Receive>
       	HAL_SPI_Receive(&BMI088_SPI_PORT, buf, len, 1000);
 800161a:	88ba      	ldrh	r2, [r7, #4]
 800161c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001620:	6839      	ldr	r1, [r7, #0]
 8001622:	4807      	ldr	r0, [pc, #28]	; (8001640 <BMI088_read+0xac>)
 8001624:	f003 fc6a 	bl	8004efc <HAL_SPI_Receive>
       	HAL_GPIO_WritePin(BMI088_CSB1_A_PORT, BMI088_CSB1_A_PIN, GPIO_PIN_SET);
 8001628:	2201      	movs	r2, #1
 800162a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800162e:	4805      	ldr	r0, [pc, #20]	; (8001644 <BMI088_read+0xb0>)
 8001630:	f002 fdd2 	bl	80041d8 <HAL_GPIO_WritePin>
}
 8001634:	bf00      	nop
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40020c00 	.word	0x40020c00
 8001640:	20000744 	.word	0x20000744
 8001644:	40020800 	.word	0x40020800

08001648 <hal_iss_init>:

uint32_t iss_eventcounter_val[4];
uint32_t iss_lasttime_val[4];
uint32_t iss_delay_val[4];

void hal_iss_init(void) {
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0

	iss_eventcounter_val[0] = 0;
 800164c:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <hal_iss_init+0x58>)
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
	iss_eventcounter_val[1] = 0;
 8001652:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <hal_iss_init+0x58>)
 8001654:	2200      	movs	r2, #0
 8001656:	605a      	str	r2, [r3, #4]
	iss_eventcounter_val[2] = 0;
 8001658:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <hal_iss_init+0x58>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
	iss_eventcounter_val[3] = 0;
 800165e:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <hal_iss_init+0x58>)
 8001660:	2200      	movs	r2, #0
 8001662:	60da      	str	r2, [r3, #12]
	iss_lasttime_val[0] = 0;
 8001664:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <hal_iss_init+0x5c>)
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
	iss_lasttime_val[1] = 0;
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <hal_iss_init+0x5c>)
 800166c:	2200      	movs	r2, #0
 800166e:	605a      	str	r2, [r3, #4]
	iss_lasttime_val[2] = 0;
 8001670:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <hal_iss_init+0x5c>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
	iss_lasttime_val[3] = 0;
 8001676:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <hal_iss_init+0x5c>)
 8001678:	2200      	movs	r2, #0
 800167a:	60da      	str	r2, [r3, #12]
	iss_delay_val[0] = 10;
 800167c:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <hal_iss_init+0x60>)
 800167e:	220a      	movs	r2, #10
 8001680:	601a      	str	r2, [r3, #0]
	iss_delay_val[1] = 10;
 8001682:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <hal_iss_init+0x60>)
 8001684:	220a      	movs	r2, #10
 8001686:	605a      	str	r2, [r3, #4]
	iss_delay_val[2] = 10;
 8001688:	4b07      	ldr	r3, [pc, #28]	; (80016a8 <hal_iss_init+0x60>)
 800168a:	220a      	movs	r2, #10
 800168c:	609a      	str	r2, [r3, #8]
	iss_delay_val[3] = 10;
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <hal_iss_init+0x60>)
 8001690:	220a      	movs	r2, #10
 8001692:	60da      	str	r2, [r3, #12]

}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	20000668 	.word	0x20000668
 80016a4:	20000688 	.word	0x20000688
 80016a8:	20000678 	.word	0x20000678

080016ac <hal_iss_eventcounter_read>:
		iss_eventcounter_val[signal_source_index] += 1;
		}
	iss_lasttime_val[signal_source_index] = HAL_GetTick();
}

uint32_t hal_iss_eventcounter_read(unsigned char signal_source_index) {
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	71fb      	strb	r3, [r7, #7]

	return iss_eventcounter_val[signal_source_index];
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	4a04      	ldr	r2, [pc, #16]	; (80016cc <hal_iss_eventcounter_read+0x20>)
 80016ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	20000668 	.word	0x20000668

080016d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016d4:	b0aa      	sub	sp, #168	; 0xa8
 80016d6:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
  int lasteventcounter[4] = {0, 0, 0, 0};
 80016d8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
  uint8_t buf[50];
  uint8_t gbuf[50];
  uint16_t len, glen;
  float ax = 0, ay = 0, az = 0, gx = 0, gy  = 0, gz = 0;
 80016e6:	f04f 0300 	mov.w	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	f04f 0300 	mov.w	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	f04f 0300 	mov.w	r3, #0
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	607b      	str	r3, [r7, #4]
 8001704:	f04f 0300 	mov.w	r3, #0
 8001708:	603b      	str	r3, [r7, #0]
  uint8_t dummybyte = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001710:	f001 fa96 	bl	8002c40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001714:	f000 f918 	bl	8001948 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001718:	f000 fac4 	bl	8001ca4 <MX_GPIO_Init>
  MX_DMA_Init();
 800171c:	f000 faa2 	bl	8001c64 <MX_DMA_Init>
  MX_SPI1_Init();
 8001720:	f000 f9d2 	bl	8001ac8 <MX_SPI1_Init>
  MX_ADC2_Init();
 8001724:	f000 f970 	bl	8001a08 <MX_ADC2_Init>
  MX_SPI2_Init();
 8001728:	f000 fa06 	bl	8001b38 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800172c:	f000 fa70 	bl	8001c10 <MX_USART1_UART_Init>
  MX_SPI3_Init();
 8001730:	f000 fa38 	bl	8001ba4 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  hal_iss_init();
 8001734:	f7ff ff88 	bl	8001648 <hal_iss_init>
  ssd1306_Init();
 8001738:	f000 fc54 	bl	8001fe4 <ssd1306_Init>
  display_template();
 800173c:	f000 ff94 	bl	8002668 <display_template>

  HAL_ADC_Start_DMA(&hadc2, value, 2);
 8001740:	2202      	movs	r2, #2
 8001742:	4977      	ldr	r1, [pc, #476]	; (8001920 <main+0x250>)
 8001744:	4877      	ldr	r0, [pc, #476]	; (8001924 <main+0x254>)
 8001746:	f001 fb53 	bl	8002df0 <HAL_ADC_Start_DMA>

  nRF905_Init();
 800174a:	f000 fb6f 	bl	8001e2c <nRF905_Init>
  nRF905_WriteConfigFreq(AUSTRALIA);
 800174e:	2006      	movs	r0, #6
 8001750:	f000 fbae 	bl	8001eb0 <nRF905_WriteConfigFreq>

//  nRF905_ReadConfig(read_config_buf);
//  HAL_UART_Transmit(&huart1, read_config_buf, CONF_LEN, 1000);


  len = sprintf(buf, "Connected\r\n");
 8001754:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001758:	4a73      	ldr	r2, [pc, #460]	; (8001928 <main+0x258>)
 800175a:	ca07      	ldmia	r2, {r0, r1, r2}
 800175c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001760:	230b      	movs	r3, #11
 8001762:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94

  //Make a dummy read to first set accelerotemter into spi after reset
  dummybyte = BMI088_getAccID();
 8001766:	f7ff fc73 	bl	8001050 <BMI088_getAccID>
 800176a:	4603      	mov	r3, r0
 800176c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  if (BMI088_isConnection()) {
 8001770:	f7ff fc52 	bl	8001018 <BMI088_isConnection>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d00f      	beq.n	800179a <main+0xca>

	  BMI088_Init();
 800177a:	f7ff fc25 	bl	8000fc8 <BMI088_Init>
	  HAL_UART_Transmit(&huart1, buf, len, 1000);
 800177e:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 8001782:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800178a:	4868      	ldr	r0, [pc, #416]	; (800192c <main+0x25c>)
 800178c:	f003 ffbf 	bl	800570e <HAL_UART_Transmit>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001790:	2201      	movs	r2, #1
 8001792:	2120      	movs	r1, #32
 8001794:	4866      	ldr	r0, [pc, #408]	; (8001930 <main+0x260>)
 8001796:	f002 fd1f 	bl	80041d8 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  ssd1306_Fill(Black);
 800179a:	2000      	movs	r0, #0
 800179c:	f000 fc8c 	bl	80020b8 <ssd1306_Fill>

	  ssd1306_SetCursor(25, 0);
 80017a0:	2100      	movs	r1, #0
 80017a2:	2019      	movs	r0, #25
 80017a4:	f000 fdec 	bl	8002380 <ssd1306_SetCursor>
	  ssd1306_WriteString("Controller", Font_7x10, White);
 80017a8:	4a62      	ldr	r2, [pc, #392]	; (8001934 <main+0x264>)
 80017aa:	2301      	movs	r3, #1
 80017ac:	ca06      	ldmia	r2, {r1, r2}
 80017ae:	4862      	ldr	r0, [pc, #392]	; (8001938 <main+0x268>)
 80017b0:	f000 fdc0 	bl	8002334 <ssd1306_WriteString>

	  if (hal_iss_eventcounter_read(HAL_ISS_SOURCE_1) > lasteventcounter[HAL_ISS_SOURCE_1]) {
 80017b4:	2000      	movs	r0, #0
 80017b6:	f7ff ff79 	bl	80016ac <hal_iss_eventcounter_read>
 80017ba:	4602      	mov	r2, r0
 80017bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d909      	bls.n	80017d8 <main+0x108>

		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 80017c4:	2140      	movs	r1, #64	; 0x40
 80017c6:	485a      	ldr	r0, [pc, #360]	; (8001930 <main+0x260>)
 80017c8:	f002 fd1f 	bl	800420a <HAL_GPIO_TogglePin>
		  lasteventcounter[HAL_ISS_SOURCE_1] = hal_iss_eventcounter_read(HAL_ISS_SOURCE_1);
 80017cc:	2000      	movs	r0, #0
 80017ce:	f7ff ff6d 	bl	80016ac <hal_iss_eventcounter_read>
 80017d2:	4603      	mov	r3, r0
 80017d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
//	  HAL_Delay(1000);
//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
//	  HAL_Delay(1000);

	  //update_left_pot(value[0]);
	  ssd1306_DrawRectangle(2, (61 - (value[0] / 68)), 10, 60, White);
 80017d8:	4b51      	ldr	r3, [pc, #324]	; (8001920 <main+0x250>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a57      	ldr	r2, [pc, #348]	; (800193c <main+0x26c>)
 80017de:	fba2 2303 	umull	r2, r3, r2, r3
 80017e2:	099b      	lsrs	r3, r3, #6
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	f1c3 033d 	rsb	r3, r3, #61	; 0x3d
 80017ea:	b2d9      	uxtb	r1, r3
 80017ec:	2301      	movs	r3, #1
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	233c      	movs	r3, #60	; 0x3c
 80017f2:	220a      	movs	r2, #10
 80017f4:	2002      	movs	r0, #2
 80017f6:	f000 fece 	bl	8002596 <ssd1306_DrawRectangle>
	  ssd1306_DrawRectangle(110, (61 - (value[1] / 68)), 120, 60, White);
 80017fa:	4b49      	ldr	r3, [pc, #292]	; (8001920 <main+0x250>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	4a4f      	ldr	r2, [pc, #316]	; (800193c <main+0x26c>)
 8001800:	fba2 2303 	umull	r2, r3, r2, r3
 8001804:	099b      	lsrs	r3, r3, #6
 8001806:	b2db      	uxtb	r3, r3
 8001808:	f1c3 033d 	rsb	r3, r3, #61	; 0x3d
 800180c:	b2d9      	uxtb	r1, r3
 800180e:	2301      	movs	r3, #1
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	233c      	movs	r3, #60	; 0x3c
 8001814:	2278      	movs	r2, #120	; 0x78
 8001816:	206e      	movs	r0, #110	; 0x6e
 8001818:	f000 febd 	bl	8002596 <ssd1306_DrawRectangle>

	  ssd1306_DrawCircle(40, 30, 15, White);
 800181c:	2301      	movs	r3, #1
 800181e:	220f      	movs	r2, #15
 8001820:	211e      	movs	r1, #30
 8001822:	2028      	movs	r0, #40	; 0x28
 8001824:	f000 fe30 	bl	8002488 <ssd1306_DrawCircle>
	  ssd1306_DrawCircle(80, 30, 15, White);
 8001828:	2301      	movs	r3, #1
 800182a:	220f      	movs	r2, #15
 800182c:	211e      	movs	r1, #30
 800182e:	2050      	movs	r0, #80	; 0x50
 8001830:	f000 fe2a 	bl	8002488 <ssd1306_DrawCircle>

	  ssd1306_DrawCircle(20, 55, 5, White);
 8001834:	2301      	movs	r3, #1
 8001836:	2205      	movs	r2, #5
 8001838:	2137      	movs	r1, #55	; 0x37
 800183a:	2014      	movs	r0, #20
 800183c:	f000 fe24 	bl	8002488 <ssd1306_DrawCircle>
	  ssd1306_DrawCircle(100, 55, 5, White);
 8001840:	2301      	movs	r3, #1
 8001842:	2205      	movs	r2, #5
 8001844:	2137      	movs	r1, #55	; 0x37
 8001846:	2064      	movs	r0, #100	; 0x64
 8001848:	f000 fe1e 	bl	8002488 <ssd1306_DrawCircle>

	  ssd1306_UpdateScreen();
 800184c:	f000 fc56 	bl	80020fc <ssd1306_UpdateScreen>

	  //BMI088_getAcceleration(&x, &y, &z);
	  BMI088_getAcceleration(&ax, &ay, &az);
 8001850:	f107 020c 	add.w	r2, r7, #12
 8001854:	f107 0110 	add.w	r1, r7, #16
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fcf3 	bl	8001248 <BMI088_getAcceleration>
	  len = sprintf(buf, "acc %f, %f, %f\r\n", ax, ay, az);
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	4618      	mov	r0, r3
 8001866:	f7fe fe8f 	bl	8000588 <__aeabi_f2d>
 800186a:	4680      	mov	r8, r0
 800186c:	4689      	mov	r9, r1
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	4618      	mov	r0, r3
 8001872:	f7fe fe89 	bl	8000588 <__aeabi_f2d>
 8001876:	4604      	mov	r4, r0
 8001878:	460d      	mov	r5, r1
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fe83 	bl	8000588 <__aeabi_f2d>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800188a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800188e:	e9cd 4500 	strd	r4, r5, [sp]
 8001892:	4642      	mov	r2, r8
 8001894:	464b      	mov	r3, r9
 8001896:	492a      	ldr	r1, [pc, #168]	; (8001940 <main+0x270>)
 8001898:	f005 fc72 	bl	8007180 <siprintf>
 800189c:	4603      	mov	r3, r0
 800189e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
	  HAL_UART_Transmit(&huart1, buf, len, 1000);
 80018a2:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 80018a6:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80018aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ae:	481f      	ldr	r0, [pc, #124]	; (800192c <main+0x25c>)
 80018b0:	f003 ff2d 	bl	800570e <HAL_UART_Transmit>

	  BMI088_getGyroscope(&gx, &gy, &gz);
 80018b4:	463a      	mov	r2, r7
 80018b6:	1d39      	adds	r1, r7, #4
 80018b8:	f107 0308 	add.w	r3, r7, #8
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fd41 	bl	8001344 <BMI088_getGyroscope>
	  glen = sprintf(gbuf, "gyro %f, %f, %f\r\n", gx, gy, gz);
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe fe5f 	bl	8000588 <__aeabi_f2d>
 80018ca:	4680      	mov	r8, r0
 80018cc:	4689      	mov	r9, r1
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fe59 	bl	8000588 <__aeabi_f2d>
 80018d6:	4604      	mov	r4, r0
 80018d8:	460d      	mov	r5, r1
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe fe53 	bl	8000588 <__aeabi_f2d>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	f107 0018 	add.w	r0, r7, #24
 80018ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80018ee:	e9cd 4500 	strd	r4, r5, [sp]
 80018f2:	4642      	mov	r2, r8
 80018f4:	464b      	mov	r3, r9
 80018f6:	4913      	ldr	r1, [pc, #76]	; (8001944 <main+0x274>)
 80018f8:	f005 fc42 	bl	8007180 <siprintf>
 80018fc:	4603      	mov	r3, r0
 80018fe:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
	  HAL_UART_Transmit(&huart1, gbuf, glen, 1000);
 8001902:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8001906:	f107 0118 	add.w	r1, r7, #24
 800190a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800190e:	4807      	ldr	r0, [pc, #28]	; (800192c <main+0x25c>)
 8001910:	f003 fefd 	bl	800570e <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8001914:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001918:	f001 fa04 	bl	8002d24 <HAL_Delay>
	  ssd1306_Fill(Black);
 800191c:	e73d      	b.n	800179a <main+0xca>
 800191e:	bf00      	nop
 8001920:	20000894 	.word	0x20000894
 8001924:	200006fc 	.word	0x200006fc
 8001928:	08009f38 	.word	0x08009f38
 800192c:	2000079c 	.word	0x2000079c
 8001930:	40020400 	.word	0x40020400
 8001934:	20000034 	.word	0x20000034
 8001938:	08009f44 	.word	0x08009f44
 800193c:	f0f0f0f1 	.word	0xf0f0f0f1
 8001940:	08009f50 	.word	0x08009f50
 8001944:	08009f64 	.word	0x08009f64

08001948 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b094      	sub	sp, #80	; 0x50
 800194c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800194e:	f107 031c 	add.w	r3, r7, #28
 8001952:	2234      	movs	r2, #52	; 0x34
 8001954:	2100      	movs	r1, #0
 8001956:	4618      	mov	r0, r3
 8001958:	f004 fdc6 	bl	80064e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800195c:	f107 0308 	add.w	r3, r7, #8
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800196c:	2300      	movs	r3, #0
 800196e:	607b      	str	r3, [r7, #4]
 8001970:	4b23      	ldr	r3, [pc, #140]	; (8001a00 <SystemClock_Config+0xb8>)
 8001972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001974:	4a22      	ldr	r2, [pc, #136]	; (8001a00 <SystemClock_Config+0xb8>)
 8001976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800197a:	6413      	str	r3, [r2, #64]	; 0x40
 800197c:	4b20      	ldr	r3, [pc, #128]	; (8001a00 <SystemClock_Config+0xb8>)
 800197e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001984:	607b      	str	r3, [r7, #4]
 8001986:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001988:	2300      	movs	r3, #0
 800198a:	603b      	str	r3, [r7, #0]
 800198c:	4b1d      	ldr	r3, [pc, #116]	; (8001a04 <SystemClock_Config+0xbc>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001994:	4a1b      	ldr	r2, [pc, #108]	; (8001a04 <SystemClock_Config+0xbc>)
 8001996:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800199a:	6013      	str	r3, [r2, #0]
 800199c:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <SystemClock_Config+0xbc>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019a4:	603b      	str	r3, [r7, #0]
 80019a6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019a8:	2302      	movs	r3, #2
 80019aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019ac:	2301      	movs	r3, #1
 80019ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019b0:	2310      	movs	r3, #16
 80019b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019b8:	f107 031c 	add.w	r3, r7, #28
 80019bc:	4618      	mov	r0, r3
 80019be:	f002 feab 	bl	8004718 <HAL_RCC_OscConfig>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80019c8:	f000 fa28 	bl	8001e1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019cc:	230f      	movs	r3, #15
 80019ce:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019d4:	2300      	movs	r3, #0
 80019d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019dc:	2300      	movs	r3, #0
 80019de:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019e0:	f107 0308 	add.w	r3, r7, #8
 80019e4:	2100      	movs	r1, #0
 80019e6:	4618      	mov	r0, r3
 80019e8:	f002 fc2a 	bl	8004240 <HAL_RCC_ClockConfig>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80019f2:	f000 fa13 	bl	8001e1c <Error_Handler>
  }
}
 80019f6:	bf00      	nop
 80019f8:	3750      	adds	r7, #80	; 0x50
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40023800 	.word	0x40023800
 8001a04:	40007000 	.word	0x40007000

08001a08 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a0e:	463b      	mov	r3, r7
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001a1a:	4b28      	ldr	r3, [pc, #160]	; (8001abc <MX_ADC2_Init+0xb4>)
 8001a1c:	4a28      	ldr	r2, [pc, #160]	; (8001ac0 <MX_ADC2_Init+0xb8>)
 8001a1e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a20:	4b26      	ldr	r3, [pc, #152]	; (8001abc <MX_ADC2_Init+0xb4>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001a26:	4b25      	ldr	r3, [pc, #148]	; (8001abc <MX_ADC2_Init+0xb4>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8001a2c:	4b23      	ldr	r3, [pc, #140]	; (8001abc <MX_ADC2_Init+0xb4>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001a32:	4b22      	ldr	r3, [pc, #136]	; (8001abc <MX_ADC2_Init+0xb4>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001a38:	4b20      	ldr	r3, [pc, #128]	; (8001abc <MX_ADC2_Init+0xb4>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a40:	4b1e      	ldr	r3, [pc, #120]	; (8001abc <MX_ADC2_Init+0xb4>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a46:	4b1d      	ldr	r3, [pc, #116]	; (8001abc <MX_ADC2_Init+0xb4>)
 8001a48:	4a1e      	ldr	r2, [pc, #120]	; (8001ac4 <MX_ADC2_Init+0xbc>)
 8001a4a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a4c:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <MX_ADC2_Init+0xb4>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8001a52:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <MX_ADC2_Init+0xb4>)
 8001a54:	2202      	movs	r2, #2
 8001a56:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001a58:	4b18      	ldr	r3, [pc, #96]	; (8001abc <MX_ADC2_Init+0xb4>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a60:	4b16      	ldr	r3, [pc, #88]	; (8001abc <MX_ADC2_Init+0xb4>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001a66:	4815      	ldr	r0, [pc, #84]	; (8001abc <MX_ADC2_Init+0xb4>)
 8001a68:	f001 f97e 	bl	8002d68 <HAL_ADC_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8001a72:	f000 f9d3 	bl	8001e1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001a7e:	2307      	movs	r3, #7
 8001a80:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001a82:	463b      	mov	r3, r7
 8001a84:	4619      	mov	r1, r3
 8001a86:	480d      	ldr	r0, [pc, #52]	; (8001abc <MX_ADC2_Init+0xb4>)
 8001a88:	f001 fac2 	bl	8003010 <HAL_ADC_ConfigChannel>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001a92:	f000 f9c3 	bl	8001e1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001a96:	2301      	movs	r3, #1
 8001a98:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001a9e:	463b      	mov	r3, r7
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4806      	ldr	r0, [pc, #24]	; (8001abc <MX_ADC2_Init+0xb4>)
 8001aa4:	f001 fab4 	bl	8003010 <HAL_ADC_ConfigChannel>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8001aae:	f000 f9b5 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	200006fc 	.word	0x200006fc
 8001ac0:	40012100 	.word	0x40012100
 8001ac4:	0f000001 	.word	0x0f000001

08001ac8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001acc:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <MX_SPI1_Init+0x68>)
 8001ace:	4a19      	ldr	r2, [pc, #100]	; (8001b34 <MX_SPI1_Init+0x6c>)
 8001ad0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ad2:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <MX_SPI1_Init+0x68>)
 8001ad4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ad8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001ada:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <MX_SPI1_Init+0x68>)
 8001adc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ae0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ae2:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <MX_SPI1_Init+0x68>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ae8:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <MX_SPI1_Init+0x68>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001aee:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <MX_SPI1_Init+0x68>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001af4:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <MX_SPI1_Init+0x68>)
 8001af6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001afa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001afc:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <MX_SPI1_Init+0x68>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b02:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <MX_SPI1_Init+0x68>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b08:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <MX_SPI1_Init+0x68>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b0e:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <MX_SPI1_Init+0x68>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b14:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <MX_SPI1_Init+0x68>)
 8001b16:	220a      	movs	r2, #10
 8001b18:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b1a:	4805      	ldr	r0, [pc, #20]	; (8001b30 <MX_SPI1_Init+0x68>)
 8001b1c:	f003 f856 	bl	8004bcc <HAL_SPI_Init>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001b26:	f000 f979 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	200007dc 	.word	0x200007dc
 8001b34:	40013000 	.word	0x40013000

08001b38 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001b3c:	4b17      	ldr	r3, [pc, #92]	; (8001b9c <MX_SPI2_Init+0x64>)
 8001b3e:	4a18      	ldr	r2, [pc, #96]	; (8001ba0 <MX_SPI2_Init+0x68>)
 8001b40:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b42:	4b16      	ldr	r3, [pc, #88]	; (8001b9c <MX_SPI2_Init+0x64>)
 8001b44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b48:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b4a:	4b14      	ldr	r3, [pc, #80]	; (8001b9c <MX_SPI2_Init+0x64>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b50:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <MX_SPI2_Init+0x64>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b56:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <MX_SPI2_Init+0x64>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b5c:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <MX_SPI2_Init+0x64>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b62:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <MX_SPI2_Init+0x64>)
 8001b64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b68:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b6a:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <MX_SPI2_Init+0x64>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b70:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <MX_SPI2_Init+0x64>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <MX_SPI2_Init+0x64>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b7c:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <MX_SPI2_Init+0x64>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001b82:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <MX_SPI2_Init+0x64>)
 8001b84:	220a      	movs	r2, #10
 8001b86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b88:	4804      	ldr	r0, [pc, #16]	; (8001b9c <MX_SPI2_Init+0x64>)
 8001b8a:	f003 f81f 	bl	8004bcc <HAL_SPI_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001b94:	f000 f942 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001b98:	bf00      	nop
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	200006a4 	.word	0x200006a4
 8001ba0:	40003800 	.word	0x40003800

08001ba4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001ba8:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <MX_SPI3_Init+0x64>)
 8001baa:	4a18      	ldr	r2, [pc, #96]	; (8001c0c <MX_SPI3_Init+0x68>)
 8001bac:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001bae:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <MX_SPI3_Init+0x64>)
 8001bb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bb4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001bb6:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <MX_SPI3_Init+0x64>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <MX_SPI3_Init+0x64>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bc2:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <MX_SPI3_Init+0x64>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bc8:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <MX_SPI3_Init+0x64>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001bce:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <MX_SPI3_Init+0x64>)
 8001bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bd4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bd6:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <MX_SPI3_Init+0x64>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bdc:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <MX_SPI3_Init+0x64>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001be2:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <MX_SPI3_Init+0x64>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001be8:	4b07      	ldr	r3, [pc, #28]	; (8001c08 <MX_SPI3_Init+0x64>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <MX_SPI3_Init+0x64>)
 8001bf0:	220a      	movs	r2, #10
 8001bf2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001bf4:	4804      	ldr	r0, [pc, #16]	; (8001c08 <MX_SPI3_Init+0x64>)
 8001bf6:	f002 ffe9 	bl	8004bcc <HAL_SPI_Init>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001c00:	f000 f90c 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001c04:	bf00      	nop
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20000744 	.word	0x20000744
 8001c0c:	40003c00 	.word	0x40003c00

08001c10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c14:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c16:	4a12      	ldr	r2, [pc, #72]	; (8001c60 <MX_USART1_UART_Init+0x50>)
 8001c18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c1a:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c22:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c28:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c2e:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c34:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c36:	220c      	movs	r2, #12
 8001c38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c3a:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c40:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c46:	4805      	ldr	r0, [pc, #20]	; (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c48:	f003 fd14 	bl	8005674 <HAL_UART_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c52:	f000 f8e3 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	2000079c 	.word	0x2000079c
 8001c60:	40011000 	.word	0x40011000

08001c64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	607b      	str	r3, [r7, #4]
 8001c6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <MX_DMA_Init+0x3c>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	4a0b      	ldr	r2, [pc, #44]	; (8001ca0 <MX_DMA_Init+0x3c>)
 8001c74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c78:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7a:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <MX_DMA_Init+0x3c>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c82:	607b      	str	r3, [r7, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001c86:	2200      	movs	r2, #0
 8001c88:	2100      	movs	r1, #0
 8001c8a:	203a      	movs	r0, #58	; 0x3a
 8001c8c:	f001 fd4b 	bl	8003726 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001c90:	203a      	movs	r0, #58	; 0x3a
 8001c92:	f001 fd64 	bl	800375e <HAL_NVIC_EnableIRQ>

}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40023800 	.word	0x40023800

08001ca4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08a      	sub	sp, #40	; 0x28
 8001ca8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	609a      	str	r2, [r3, #8]
 8001cb6:	60da      	str	r2, [r3, #12]
 8001cb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	613b      	str	r3, [r7, #16]
 8001cbe:	4b52      	ldr	r3, [pc, #328]	; (8001e08 <MX_GPIO_Init+0x164>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	4a51      	ldr	r2, [pc, #324]	; (8001e08 <MX_GPIO_Init+0x164>)
 8001cc4:	f043 0304 	orr.w	r3, r3, #4
 8001cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cca:	4b4f      	ldr	r3, [pc, #316]	; (8001e08 <MX_GPIO_Init+0x164>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	f003 0304 	and.w	r3, r3, #4
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	4b4b      	ldr	r3, [pc, #300]	; (8001e08 <MX_GPIO_Init+0x164>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	4a4a      	ldr	r2, [pc, #296]	; (8001e08 <MX_GPIO_Init+0x164>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce6:	4b48      	ldr	r3, [pc, #288]	; (8001e08 <MX_GPIO_Init+0x164>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	4b44      	ldr	r3, [pc, #272]	; (8001e08 <MX_GPIO_Init+0x164>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	4a43      	ldr	r2, [pc, #268]	; (8001e08 <MX_GPIO_Init+0x164>)
 8001cfc:	f043 0302 	orr.w	r3, r3, #2
 8001d00:	6313      	str	r3, [r2, #48]	; 0x30
 8001d02:	4b41      	ldr	r3, [pc, #260]	; (8001e08 <MX_GPIO_Init+0x164>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	607b      	str	r3, [r7, #4]
 8001d12:	4b3d      	ldr	r3, [pc, #244]	; (8001e08 <MX_GPIO_Init+0x164>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4a3c      	ldr	r2, [pc, #240]	; (8001e08 <MX_GPIO_Init+0x164>)
 8001d18:	f043 0308 	orr.w	r3, r3, #8
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4b3a      	ldr	r3, [pc, #232]	; (8001e08 <MX_GPIO_Init+0x164>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0308 	and.w	r3, r3, #8
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_12, GPIO_PIN_RESET);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8001d30:	4836      	ldr	r0, [pc, #216]	; (8001e0c <MX_GPIO_Init+0x168>)
 8001d32:	f002 fa51 	bl	80041d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001d36:	2200      	movs	r2, #0
 8001d38:	f24e 0164 	movw	r1, #57444	; 0xe064
 8001d3c:	4834      	ldr	r0, [pc, #208]	; (8001e10 <MX_GPIO_Init+0x16c>)
 8001d3e:	f002 fa4b 	bl	80041d8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8001d42:	2201      	movs	r2, #1
 8001d44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d48:	4832      	ldr	r0, [pc, #200]	; (8001e14 <MX_GPIO_Init+0x170>)
 8001d4a:	f002 fa45 	bl	80041d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8001d4e:	2201      	movs	r2, #1
 8001d50:	2104      	movs	r1, #4
 8001d52:	4831      	ldr	r0, [pc, #196]	; (8001e18 <MX_GPIO_Init+0x174>)
 8001d54:	f002 fa40 	bl	80041d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d58:	2308      	movs	r3, #8
 8001d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d64:	f107 0314 	add.w	r3, r7, #20
 8001d68:	4619      	mov	r1, r3
 8001d6a:	482a      	ldr	r0, [pc, #168]	; (8001e14 <MX_GPIO_Init+0x170>)
 8001d6c:	f002 f8a2 	bl	8003eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_12;
 8001d70:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8001d74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d76:	2301      	movs	r3, #1
 8001d78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d82:	f107 0314 	add.w	r3, r7, #20
 8001d86:	4619      	mov	r1, r3
 8001d88:	4820      	ldr	r0, [pc, #128]	; (8001e0c <MX_GPIO_Init+0x168>)
 8001d8a:	f002 f893 	bl	8003eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d92:	2300      	movs	r3, #0
 8001d94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d9a:	f107 0314 	add.w	r3, r7, #20
 8001d9e:	4619      	mov	r1, r3
 8001da0:	481b      	ldr	r0, [pc, #108]	; (8001e10 <MX_GPIO_Init+0x16c>)
 8001da2:	f002 f887 	bl	8003eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB14 PB15
                           PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001da6:	f24e 0364 	movw	r3, #57444	; 0xe064
 8001daa:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dac:	2301      	movs	r3, #1
 8001dae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db4:	2300      	movs	r3, #0
 8001db6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4814      	ldr	r0, [pc, #80]	; (8001e10 <MX_GPIO_Init+0x16c>)
 8001dc0:	f002 f878 	bl	8003eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001dc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd6:	f107 0314 	add.w	r3, r7, #20
 8001dda:	4619      	mov	r1, r3
 8001ddc:	480d      	ldr	r0, [pc, #52]	; (8001e14 <MX_GPIO_Init+0x170>)
 8001dde:	f002 f869 	bl	8003eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001de2:	2304      	movs	r3, #4
 8001de4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de6:	2301      	movs	r3, #1
 8001de8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dee:	2300      	movs	r3, #0
 8001df0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001df2:	f107 0314 	add.w	r3, r7, #20
 8001df6:	4619      	mov	r1, r3
 8001df8:	4807      	ldr	r0, [pc, #28]	; (8001e18 <MX_GPIO_Init+0x174>)
 8001dfa:	f002 f85b 	bl	8003eb4 <HAL_GPIO_Init>

}
 8001dfe:	bf00      	nop
 8001e00:	3728      	adds	r7, #40	; 0x28
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40020000 	.word	0x40020000
 8001e10:	40020400 	.word	0x40020400
 8001e14:	40020800 	.word	0x40020800
 8001e18:	40020c00 	.word	0x40020c00

08001e1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
	...

08001e2c <nRF905_Init>:
    0x17f,
    0x17f,
    0x100,
};

void nRF905_Init() {
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(NRF905_CSN_PORT, NRF905_CSN_PIN, GPIO_PIN_SET);
 8001e30:	2201      	movs	r2, #1
 8001e32:	2104      	movs	r1, #4
 8001e34:	480b      	ldr	r0, [pc, #44]	; (8001e64 <nRF905_Init+0x38>)
 8001e36:	f002 f9cf 	bl	80041d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NRF905_PWR_PORT, NRF905_PWR_PIN, GPIO_PIN_SET);
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e40:	4808      	ldr	r0, [pc, #32]	; (8001e64 <nRF905_Init+0x38>)
 8001e42:	f002 f9c9 	bl	80041d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NRF905_TRX_CE_PORT, NRF905_TRX_CE_PIN, GPIO_PIN_SET);
 8001e46:	2201      	movs	r2, #1
 8001e48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e4c:	4805      	ldr	r0, [pc, #20]	; (8001e64 <nRF905_Init+0x38>)
 8001e4e:	f002 f9c3 	bl	80041d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NRF905_TXEN_PORT, NRF905_TXEN_PIN, GPIO_PIN_SET);
 8001e52:	2201      	movs	r2, #1
 8001e54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e58:	4802      	ldr	r0, [pc, #8]	; (8001e64 <nRF905_Init+0x38>)
 8001e5a:	f002 f9bd 	bl	80041d8 <HAL_GPIO_WritePin>

}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40020400 	.word	0x40020400

08001e68 <nRF905_WriteConfig>:

void nRF905_WriteConfig(unsigned char *conf_buf) {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(NRF905_CSN_PORT, NRF905_CSN_PIN, GPIO_PIN_RESET);
 8001e70:	2200      	movs	r2, #0
 8001e72:	2104      	movs	r1, #4
 8001e74:	480c      	ldr	r0, [pc, #48]	; (8001ea8 <nRF905_WriteConfig+0x40>)
 8001e76:	f002 f9af 	bl	80041d8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&NRF905_SPI_PORT, (uint8_t *) WC, 1, 1000);
 8001e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e7e:	2201      	movs	r2, #1
 8001e80:	2100      	movs	r1, #0
 8001e82:	480a      	ldr	r0, [pc, #40]	; (8001eac <nRF905_WriteConfig+0x44>)
 8001e84:	f002 ff06 	bl	8004c94 <HAL_SPI_Transmit>
//	for (int i = 0; i < 10; i++) {
//
//		HAL_SPI_Transmit(&NRF905_SPI_PORT, (uint8_t *) conf_buf[i], 1, 1000);
//	}
	HAL_SPI_Transmit(&NRF905_SPI_PORT, conf_buf, 10, 1000);
 8001e88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e8c:	220a      	movs	r2, #10
 8001e8e:	6879      	ldr	r1, [r7, #4]
 8001e90:	4806      	ldr	r0, [pc, #24]	; (8001eac <nRF905_WriteConfig+0x44>)
 8001e92:	f002 feff 	bl	8004c94 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(NRF905_CSN_PORT, NRF905_CSN_PIN, GPIO_PIN_SET);
 8001e96:	2201      	movs	r2, #1
 8001e98:	2104      	movs	r1, #4
 8001e9a:	4803      	ldr	r0, [pc, #12]	; (8001ea8 <nRF905_WriteConfig+0x40>)
 8001e9c:	f002 f99c 	bl	80041d8 <HAL_GPIO_WritePin>

}
 8001ea0:	bf00      	nop
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40020400 	.word	0x40020400
 8001eac:	200006a4 	.word	0x200006a4

08001eb0 <nRF905_WriteConfigFreq>:

void nRF905_WriteConfigFreq(nrf905_freq_type freq_band) {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	71fb      	strb	r3, [r7, #7]

	if (freq_band < 10) {
 8001eba:	79fb      	ldrb	r3, [r7, #7]
 8001ebc:	2b09      	cmp	r3, #9
 8001ebe:	d81d      	bhi.n	8001efc <nRF905_WriteConfigFreq+0x4c>

		config_info_buf[0] = (unsigned char)freq_tab[freq_band];
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	4a12      	ldr	r2, [pc, #72]	; (8001f0c <nRF905_WriteConfigFreq+0x5c>)
 8001ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <nRF905_WriteConfigFreq+0x60>)
 8001ecc:	701a      	strb	r2, [r3, #0]
		if (freq_tab[freq_band] & 0x100) {
 8001ece:	79fb      	ldrb	r3, [r7, #7]
 8001ed0:	4a0e      	ldr	r2, [pc, #56]	; (8001f0c <nRF905_WriteConfigFreq+0x5c>)
 8001ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d007      	beq.n	8001eee <nRF905_WriteConfigFreq+0x3e>

			config_info_buf[1] |= 0x01;
 8001ede:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <nRF905_WriteConfigFreq+0x60>)
 8001ee0:	785b      	ldrb	r3, [r3, #1]
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <nRF905_WriteConfigFreq+0x60>)
 8001eea:	705a      	strb	r2, [r3, #1]
 8001eec:	e006      	b.n	8001efc <nRF905_WriteConfigFreq+0x4c>
		} else {

			config_info_buf[1] &= ~0x01;
 8001eee:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <nRF905_WriteConfigFreq+0x60>)
 8001ef0:	785b      	ldrb	r3, [r3, #1]
 8001ef2:	f023 0301 	bic.w	r3, r3, #1
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <nRF905_WriteConfigFreq+0x60>)
 8001efa:	705a      	strb	r2, [r3, #1]
		}
	}

	nRF905_WriteConfig(config_info_buf);
 8001efc:	4804      	ldr	r0, [pc, #16]	; (8001f10 <nRF905_WriteConfigFreq+0x60>)
 8001efe:	f7ff ffb3 	bl	8001e68 <nRF905_WriteConfig>
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	2000000c 	.word	0x2000000c
 8001f10:	20000000 	.word	0x20000000

08001f14 <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 8001f18:	2201      	movs	r2, #1
 8001f1a:	2140      	movs	r1, #64	; 0x40
 8001f1c:	480a      	ldr	r0, [pc, #40]	; (8001f48 <ssd1306_Reset+0x34>)
 8001f1e:	f002 f95b 	bl	80041d8 <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 8001f22:	2200      	movs	r2, #0
 8001f24:	2140      	movs	r1, #64	; 0x40
 8001f26:	4809      	ldr	r0, [pc, #36]	; (8001f4c <ssd1306_Reset+0x38>)
 8001f28:	f002 f956 	bl	80041d8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001f2c:	200a      	movs	r0, #10
 8001f2e:	f000 fef9 	bl	8002d24 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 8001f32:	2201      	movs	r2, #1
 8001f34:	2140      	movs	r1, #64	; 0x40
 8001f36:	4805      	ldr	r0, [pc, #20]	; (8001f4c <ssd1306_Reset+0x38>)
 8001f38:	f002 f94e 	bl	80041d8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001f3c:	200a      	movs	r0, #10
 8001f3e:	f000 fef1 	bl	8002d24 <HAL_Delay>
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40020000 	.word	0x40020000
 8001f4c:	40020400 	.word	0x40020400

08001f50 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	2140      	movs	r1, #64	; 0x40
 8001f5e:	480c      	ldr	r0, [pc, #48]	; (8001f90 <ssd1306_WriteCommand+0x40>)
 8001f60:	f002 f93a 	bl	80041d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 8001f64:	2200      	movs	r2, #0
 8001f66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f6a:	4809      	ldr	r0, [pc, #36]	; (8001f90 <ssd1306_WriteCommand+0x40>)
 8001f6c:	f002 f934 	bl	80041d8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 8001f70:	1df9      	adds	r1, r7, #7
 8001f72:	f04f 33ff 	mov.w	r3, #4294967295
 8001f76:	2201      	movs	r2, #1
 8001f78:	4806      	ldr	r0, [pc, #24]	; (8001f94 <ssd1306_WriteCommand+0x44>)
 8001f7a:	f002 fe8b 	bl	8004c94 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8001f7e:	2201      	movs	r2, #1
 8001f80:	2140      	movs	r1, #64	; 0x40
 8001f82:	4803      	ldr	r0, [pc, #12]	; (8001f90 <ssd1306_WriteCommand+0x40>)
 8001f84:	f002 f928 	bl	80041d8 <HAL_GPIO_WritePin>
}
 8001f88:	bf00      	nop
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40020000 	.word	0x40020000
 8001f94:	200007dc 	.word	0x200007dc

08001f98 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2140      	movs	r1, #64	; 0x40
 8001fa6:	480d      	ldr	r0, [pc, #52]	; (8001fdc <ssd1306_WriteData+0x44>)
 8001fa8:	f002 f916 	bl	80041d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 8001fac:	2201      	movs	r2, #1
 8001fae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fb2:	480a      	ldr	r0, [pc, #40]	; (8001fdc <ssd1306_WriteData+0x44>)
 8001fb4:	f002 f910 	bl	80041d8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc0:	6879      	ldr	r1, [r7, #4]
 8001fc2:	4807      	ldr	r0, [pc, #28]	; (8001fe0 <ssd1306_WriteData+0x48>)
 8001fc4:	f002 fe66 	bl	8004c94 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8001fc8:	2201      	movs	r2, #1
 8001fca:	2140      	movs	r1, #64	; 0x40
 8001fcc:	4803      	ldr	r0, [pc, #12]	; (8001fdc <ssd1306_WriteData+0x44>)
 8001fce:	f002 f903 	bl	80041d8 <HAL_GPIO_WritePin>
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40020000 	.word	0x40020000
 8001fe0:	200007dc 	.word	0x200007dc

08001fe4 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001fe8:	f7ff ff94 	bl	8001f14 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001fec:	2064      	movs	r0, #100	; 0x64
 8001fee:	f000 fe99 	bl	8002d24 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	f000 fb1a 	bl	800262c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001ff8:	2020      	movs	r0, #32
 8001ffa:	f7ff ffa9 	bl	8001f50 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001ffe:	2000      	movs	r0, #0
 8002000:	f7ff ffa6 	bl	8001f50 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002004:	20b0      	movs	r0, #176	; 0xb0
 8002006:	f7ff ffa3 	bl	8001f50 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800200a:	20c8      	movs	r0, #200	; 0xc8
 800200c:	f7ff ffa0 	bl	8001f50 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002010:	2000      	movs	r0, #0
 8002012:	f7ff ff9d 	bl	8001f50 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002016:	2010      	movs	r0, #16
 8002018:	f7ff ff9a 	bl	8001f50 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800201c:	2040      	movs	r0, #64	; 0x40
 800201e:	f7ff ff97 	bl	8001f50 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002022:	20ff      	movs	r0, #255	; 0xff
 8002024:	f000 faee 	bl	8002604 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002028:	20a1      	movs	r0, #161	; 0xa1
 800202a:	f7ff ff91 	bl	8001f50 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800202e:	20a6      	movs	r0, #166	; 0xa6
 8002030:	f7ff ff8e 	bl	8001f50 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002034:	20a8      	movs	r0, #168	; 0xa8
 8002036:	f7ff ff8b 	bl	8001f50 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800203a:	203f      	movs	r0, #63	; 0x3f
 800203c:	f7ff ff88 	bl	8001f50 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002040:	20a4      	movs	r0, #164	; 0xa4
 8002042:	f7ff ff85 	bl	8001f50 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002046:	20d3      	movs	r0, #211	; 0xd3
 8002048:	f7ff ff82 	bl	8001f50 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800204c:	2000      	movs	r0, #0
 800204e:	f7ff ff7f 	bl	8001f50 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002052:	20d5      	movs	r0, #213	; 0xd5
 8002054:	f7ff ff7c 	bl	8001f50 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002058:	20f0      	movs	r0, #240	; 0xf0
 800205a:	f7ff ff79 	bl	8001f50 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800205e:	20d9      	movs	r0, #217	; 0xd9
 8002060:	f7ff ff76 	bl	8001f50 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002064:	2022      	movs	r0, #34	; 0x22
 8002066:	f7ff ff73 	bl	8001f50 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800206a:	20da      	movs	r0, #218	; 0xda
 800206c:	f7ff ff70 	bl	8001f50 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002070:	2012      	movs	r0, #18
 8002072:	f7ff ff6d 	bl	8001f50 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002076:	20db      	movs	r0, #219	; 0xdb
 8002078:	f7ff ff6a 	bl	8001f50 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800207c:	2020      	movs	r0, #32
 800207e:	f7ff ff67 	bl	8001f50 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002082:	208d      	movs	r0, #141	; 0x8d
 8002084:	f7ff ff64 	bl	8001f50 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002088:	2014      	movs	r0, #20
 800208a:	f7ff ff61 	bl	8001f50 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800208e:	2001      	movs	r0, #1
 8002090:	f000 facc 	bl	800262c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002094:	2000      	movs	r0, #0
 8002096:	f000 f80f 	bl	80020b8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800209a:	f000 f82f 	bl	80020fc <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800209e:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <ssd1306_Init+0xd0>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80020a4:	4b03      	ldr	r3, [pc, #12]	; (80020b4 <ssd1306_Init+0xd0>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80020aa:	4b02      	ldr	r3, [pc, #8]	; (80020b4 <ssd1306_Init+0xd0>)
 80020ac:	2201      	movs	r2, #1
 80020ae:	715a      	strb	r2, [r3, #5]
}
 80020b0:	bf00      	nop
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20000644 	.word	0x20000644

080020b8 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	e00d      	b.n	80020e4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <ssd1306_Fill+0x1a>
 80020ce:	2100      	movs	r1, #0
 80020d0:	e000      	b.n	80020d4 <ssd1306_Fill+0x1c>
 80020d2:	21ff      	movs	r1, #255	; 0xff
 80020d4:	4a08      	ldr	r2, [pc, #32]	; (80020f8 <ssd1306_Fill+0x40>)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	4413      	add	r3, r2
 80020da:	460a      	mov	r2, r1
 80020dc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	3301      	adds	r3, #1
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 80020ea:	d3ed      	bcc.n	80020c8 <ssd1306_Fill+0x10>
    }
}
 80020ec:	bf00      	nop
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	20000234 	.word	0x20000234

080020fc <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002102:	2300      	movs	r3, #0
 8002104:	71fb      	strb	r3, [r7, #7]
 8002106:	e01a      	b.n	800213e <ssd1306_UpdateScreen+0x42>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	3b50      	subs	r3, #80	; 0x50
 800210c:	b2db      	uxtb	r3, r3
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff ff1e 	bl	8001f50 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8002114:	2000      	movs	r0, #0
 8002116:	f7ff ff1b 	bl	8001f50 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 800211a:	2010      	movs	r0, #16
 800211c:	f7ff ff18 	bl	8001f50 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002120:	79fa      	ldrb	r2, [r7, #7]
 8002122:	4613      	mov	r3, r2
 8002124:	019b      	lsls	r3, r3, #6
 8002126:	4413      	add	r3, r2
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	461a      	mov	r2, r3
 800212c:	4b07      	ldr	r3, [pc, #28]	; (800214c <ssd1306_UpdateScreen+0x50>)
 800212e:	4413      	add	r3, r2
 8002130:	2182      	movs	r1, #130	; 0x82
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff ff30 	bl	8001f98 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	3301      	adds	r3, #1
 800213c:	71fb      	strb	r3, [r7, #7]
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	2b07      	cmp	r3, #7
 8002142:	d9e1      	bls.n	8002108 <ssd1306_UpdateScreen+0xc>
    }
}
 8002144:	bf00      	nop
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20000234 	.word	0x20000234

08002150 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002150:	b490      	push	{r4, r7}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	71fb      	strb	r3, [r7, #7]
 800215a:	460b      	mov	r3, r1
 800215c:	71bb      	strb	r3, [r7, #6]
 800215e:	4613      	mov	r3, r2
 8002160:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	2b81      	cmp	r3, #129	; 0x81
 8002166:	d854      	bhi.n	8002212 <ssd1306_DrawPixel+0xc2>
 8002168:	79bb      	ldrb	r3, [r7, #6]
 800216a:	2b3f      	cmp	r3, #63	; 0x3f
 800216c:	d851      	bhi.n	8002212 <ssd1306_DrawPixel+0xc2>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 800216e:	4b2b      	ldr	r3, [pc, #172]	; (800221c <ssd1306_DrawPixel+0xcc>)
 8002170:	791b      	ldrb	r3, [r3, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d006      	beq.n	8002184 <ssd1306_DrawPixel+0x34>
        color = (SSD1306_COLOR)!color;
 8002176:	797b      	ldrb	r3, [r7, #5]
 8002178:	2b00      	cmp	r3, #0
 800217a:	bf0c      	ite	eq
 800217c:	2301      	moveq	r3, #1
 800217e:	2300      	movne	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 8002184:	797b      	ldrb	r3, [r7, #5]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d120      	bne.n	80021cc <ssd1306_DrawPixel+0x7c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800218a:	79fa      	ldrb	r2, [r7, #7]
 800218c:	79bb      	ldrb	r3, [r7, #6]
 800218e:	08db      	lsrs	r3, r3, #3
 8002190:	b2d8      	uxtb	r0, r3
 8002192:	4601      	mov	r1, r0
 8002194:	460b      	mov	r3, r1
 8002196:	019b      	lsls	r3, r3, #6
 8002198:	440b      	add	r3, r1
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	4413      	add	r3, r2
 800219e:	4a20      	ldr	r2, [pc, #128]	; (8002220 <ssd1306_DrawPixel+0xd0>)
 80021a0:	5cd3      	ldrb	r3, [r2, r3]
 80021a2:	b25a      	sxtb	r2, r3
 80021a4:	79bb      	ldrb	r3, [r7, #6]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	2101      	movs	r1, #1
 80021ac:	fa01 f303 	lsl.w	r3, r1, r3
 80021b0:	b25b      	sxtb	r3, r3
 80021b2:	4313      	orrs	r3, r2
 80021b4:	b25c      	sxtb	r4, r3
 80021b6:	79fa      	ldrb	r2, [r7, #7]
 80021b8:	4601      	mov	r1, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	019b      	lsls	r3, r3, #6
 80021be:	440b      	add	r3, r1
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	4413      	add	r3, r2
 80021c4:	b2e1      	uxtb	r1, r4
 80021c6:	4a16      	ldr	r2, [pc, #88]	; (8002220 <ssd1306_DrawPixel+0xd0>)
 80021c8:	54d1      	strb	r1, [r2, r3]
 80021ca:	e023      	b.n	8002214 <ssd1306_DrawPixel+0xc4>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80021cc:	79fa      	ldrb	r2, [r7, #7]
 80021ce:	79bb      	ldrb	r3, [r7, #6]
 80021d0:	08db      	lsrs	r3, r3, #3
 80021d2:	b2d8      	uxtb	r0, r3
 80021d4:	4601      	mov	r1, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	019b      	lsls	r3, r3, #6
 80021da:	440b      	add	r3, r1
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	4413      	add	r3, r2
 80021e0:	4a0f      	ldr	r2, [pc, #60]	; (8002220 <ssd1306_DrawPixel+0xd0>)
 80021e2:	5cd3      	ldrb	r3, [r2, r3]
 80021e4:	b25a      	sxtb	r2, r3
 80021e6:	79bb      	ldrb	r3, [r7, #6]
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	2101      	movs	r1, #1
 80021ee:	fa01 f303 	lsl.w	r3, r1, r3
 80021f2:	b25b      	sxtb	r3, r3
 80021f4:	43db      	mvns	r3, r3
 80021f6:	b25b      	sxtb	r3, r3
 80021f8:	4013      	ands	r3, r2
 80021fa:	b25c      	sxtb	r4, r3
 80021fc:	79fa      	ldrb	r2, [r7, #7]
 80021fe:	4601      	mov	r1, r0
 8002200:	460b      	mov	r3, r1
 8002202:	019b      	lsls	r3, r3, #6
 8002204:	440b      	add	r3, r1
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	4413      	add	r3, r2
 800220a:	b2e1      	uxtb	r1, r4
 800220c:	4a04      	ldr	r2, [pc, #16]	; (8002220 <ssd1306_DrawPixel+0xd0>)
 800220e:	54d1      	strb	r1, [r2, r3]
 8002210:	e000      	b.n	8002214 <ssd1306_DrawPixel+0xc4>
        return;
 8002212:	bf00      	nop
    }
}
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bc90      	pop	{r4, r7}
 800221a:	4770      	bx	lr
 800221c:	20000644 	.word	0x20000644
 8002220:	20000234 	.word	0x20000234

08002224 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002224:	b590      	push	{r4, r7, lr}
 8002226:	b089      	sub	sp, #36	; 0x24
 8002228:	af00      	add	r7, sp, #0
 800222a:	4604      	mov	r4, r0
 800222c:	1d38      	adds	r0, r7, #4
 800222e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002232:	461a      	mov	r2, r3
 8002234:	4623      	mov	r3, r4
 8002236:	73fb      	strb	r3, [r7, #15]
 8002238:	4613      	mov	r3, r2
 800223a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800223c:	7bfb      	ldrb	r3, [r7, #15]
 800223e:	2b1f      	cmp	r3, #31
 8002240:	d902      	bls.n	8002248 <ssd1306_WriteChar+0x24>
 8002242:	7bfb      	ldrb	r3, [r7, #15]
 8002244:	2b7e      	cmp	r3, #126	; 0x7e
 8002246:	d901      	bls.n	800224c <ssd1306_WriteChar+0x28>
        return 0;
 8002248:	2300      	movs	r3, #0
 800224a:	e06d      	b.n	8002328 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800224c:	4b38      	ldr	r3, [pc, #224]	; (8002330 <ssd1306_WriteChar+0x10c>)
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	461a      	mov	r2, r3
 8002252:	793b      	ldrb	r3, [r7, #4]
 8002254:	4413      	add	r3, r2
 8002256:	2b82      	cmp	r3, #130	; 0x82
 8002258:	dc06      	bgt.n	8002268 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800225a:	4b35      	ldr	r3, [pc, #212]	; (8002330 <ssd1306_WriteChar+0x10c>)
 800225c:	885b      	ldrh	r3, [r3, #2]
 800225e:	461a      	mov	r2, r3
 8002260:	797b      	ldrb	r3, [r7, #5]
 8002262:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002264:	2b40      	cmp	r3, #64	; 0x40
 8002266:	dd01      	ble.n	800226c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002268:	2300      	movs	r3, #0
 800226a:	e05d      	b.n	8002328 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 800226c:	2300      	movs	r3, #0
 800226e:	61fb      	str	r3, [r7, #28]
 8002270:	e04c      	b.n	800230c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	7bfb      	ldrb	r3, [r7, #15]
 8002276:	3b20      	subs	r3, #32
 8002278:	7979      	ldrb	r1, [r7, #5]
 800227a:	fb01 f303 	mul.w	r3, r1, r3
 800227e:	4619      	mov	r1, r3
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	440b      	add	r3, r1
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	4413      	add	r3, r2
 8002288:	881b      	ldrh	r3, [r3, #0]
 800228a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 800228c:	2300      	movs	r3, #0
 800228e:	61bb      	str	r3, [r7, #24]
 8002290:	e034      	b.n	80022fc <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d012      	beq.n	80022c8 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80022a2:	4b23      	ldr	r3, [pc, #140]	; (8002330 <ssd1306_WriteChar+0x10c>)
 80022a4:	881b      	ldrh	r3, [r3, #0]
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	4413      	add	r3, r2
 80022ae:	b2d8      	uxtb	r0, r3
 80022b0:	4b1f      	ldr	r3, [pc, #124]	; (8002330 <ssd1306_WriteChar+0x10c>)
 80022b2:	885b      	ldrh	r3, [r3, #2]
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	4413      	add	r3, r2
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	7bba      	ldrb	r2, [r7, #14]
 80022c0:	4619      	mov	r1, r3
 80022c2:	f7ff ff45 	bl	8002150 <ssd1306_DrawPixel>
 80022c6:	e016      	b.n	80022f6 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80022c8:	4b19      	ldr	r3, [pc, #100]	; (8002330 <ssd1306_WriteChar+0x10c>)
 80022ca:	881b      	ldrh	r3, [r3, #0]
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	4413      	add	r3, r2
 80022d4:	b2d8      	uxtb	r0, r3
 80022d6:	4b16      	ldr	r3, [pc, #88]	; (8002330 <ssd1306_WriteChar+0x10c>)
 80022d8:	885b      	ldrh	r3, [r3, #2]
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	4413      	add	r3, r2
 80022e2:	b2d9      	uxtb	r1, r3
 80022e4:	7bbb      	ldrb	r3, [r7, #14]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	bf0c      	ite	eq
 80022ea:	2301      	moveq	r3, #1
 80022ec:	2300      	movne	r3, #0
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	461a      	mov	r2, r3
 80022f2:	f7ff ff2d 	bl	8002150 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	3301      	adds	r3, #1
 80022fa:	61bb      	str	r3, [r7, #24]
 80022fc:	793b      	ldrb	r3, [r7, #4]
 80022fe:	461a      	mov	r2, r3
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	4293      	cmp	r3, r2
 8002304:	d3c5      	bcc.n	8002292 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3301      	adds	r3, #1
 800230a:	61fb      	str	r3, [r7, #28]
 800230c:	797b      	ldrb	r3, [r7, #5]
 800230e:	461a      	mov	r2, r3
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	4293      	cmp	r3, r2
 8002314:	d3ad      	bcc.n	8002272 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002316:	4b06      	ldr	r3, [pc, #24]	; (8002330 <ssd1306_WriteChar+0x10c>)
 8002318:	881a      	ldrh	r2, [r3, #0]
 800231a:	793b      	ldrb	r3, [r7, #4]
 800231c:	b29b      	uxth	r3, r3
 800231e:	4413      	add	r3, r2
 8002320:	b29a      	uxth	r2, r3
 8002322:	4b03      	ldr	r3, [pc, #12]	; (8002330 <ssd1306_WriteChar+0x10c>)
 8002324:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002326:	7bfb      	ldrb	r3, [r7, #15]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3724      	adds	r7, #36	; 0x24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd90      	pop	{r4, r7, pc}
 8002330:	20000644 	.word	0x20000644

08002334 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	1d38      	adds	r0, r7, #4
 800233e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002342:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8002344:	e012      	b.n	800236c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	7818      	ldrb	r0, [r3, #0]
 800234a:	78fb      	ldrb	r3, [r7, #3]
 800234c:	1d3a      	adds	r2, r7, #4
 800234e:	ca06      	ldmia	r2, {r1, r2}
 8002350:	f7ff ff68 	bl	8002224 <ssd1306_WriteChar>
 8002354:	4603      	mov	r3, r0
 8002356:	461a      	mov	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	429a      	cmp	r2, r3
 800235e:	d002      	beq.n	8002366 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	e008      	b.n	8002378 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	3301      	adds	r3, #1
 800236a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1e8      	bne.n	8002346 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	781b      	ldrb	r3, [r3, #0]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	460a      	mov	r2, r1
 800238a:	71fb      	strb	r3, [r7, #7]
 800238c:	4613      	mov	r3, r2
 800238e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	b29a      	uxth	r2, r3
 8002394:	4b05      	ldr	r3, [pc, #20]	; (80023ac <ssd1306_SetCursor+0x2c>)
 8002396:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002398:	79bb      	ldrb	r3, [r7, #6]
 800239a:	b29a      	uxth	r2, r3
 800239c:	4b03      	ldr	r3, [pc, #12]	; (80023ac <ssd1306_SetCursor+0x2c>)
 800239e:	805a      	strh	r2, [r3, #2]
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	20000644 	.word	0x20000644

080023b0 <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80023b0:	b590      	push	{r4, r7, lr}
 80023b2:	b089      	sub	sp, #36	; 0x24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4604      	mov	r4, r0
 80023b8:	4608      	mov	r0, r1
 80023ba:	4611      	mov	r1, r2
 80023bc:	461a      	mov	r2, r3
 80023be:	4623      	mov	r3, r4
 80023c0:	71fb      	strb	r3, [r7, #7]
 80023c2:	4603      	mov	r3, r0
 80023c4:	71bb      	strb	r3, [r7, #6]
 80023c6:	460b      	mov	r3, r1
 80023c8:	717b      	strb	r3, [r7, #5]
 80023ca:	4613      	mov	r3, r2
 80023cc:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 80023ce:	797a      	ldrb	r2, [r7, #5]
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	bfb8      	it	lt
 80023d8:	425b      	neglt	r3, r3
 80023da:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 80023dc:	793a      	ldrb	r2, [r7, #4]
 80023de:	79bb      	ldrb	r3, [r7, #6]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	bfb8      	it	lt
 80023e6:	425b      	neglt	r3, r3
 80023e8:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 80023ea:	79fa      	ldrb	r2, [r7, #7]
 80023ec:	797b      	ldrb	r3, [r7, #5]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d201      	bcs.n	80023f6 <ssd1306_Line+0x46>
 80023f2:	2301      	movs	r3, #1
 80023f4:	e001      	b.n	80023fa <ssd1306_Line+0x4a>
 80023f6:	f04f 33ff 	mov.w	r3, #4294967295
 80023fa:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 80023fc:	79ba      	ldrb	r2, [r7, #6]
 80023fe:	793b      	ldrb	r3, [r7, #4]
 8002400:	429a      	cmp	r2, r3
 8002402:	d201      	bcs.n	8002408 <ssd1306_Line+0x58>
 8002404:	2301      	movs	r3, #1
 8002406:	e001      	b.n	800240c <ssd1306_Line+0x5c>
 8002408:	f04f 33ff 	mov.w	r3, #4294967295
 800240c:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 8002416:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800241a:	7939      	ldrb	r1, [r7, #4]
 800241c:	797b      	ldrb	r3, [r7, #5]
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff fe96 	bl	8002150 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 8002424:	e024      	b.n	8002470 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 8002426:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800242a:	79b9      	ldrb	r1, [r7, #6]
 800242c:	79fb      	ldrb	r3, [r7, #7]
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff fe8e 	bl	8002150 <ssd1306_DrawPixel>
    error2 = error * 2;
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	425b      	negs	r3, r3
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	429a      	cmp	r2, r3
 8002442:	dd08      	ble.n	8002456 <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 8002444:	69fa      	ldr	r2, [r7, #28]
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	b2da      	uxtb	r2, r3
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	4413      	add	r3, r2
 8002454:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	429a      	cmp	r2, r3
 800245c:	da08      	bge.n	8002470 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 800245e:	69fa      	ldr	r2, [r7, #28]
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	4413      	add	r3, r2
 8002464:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	b2da      	uxtb	r2, r3
 800246a:	79bb      	ldrb	r3, [r7, #6]
 800246c:	4413      	add	r3, r2
 800246e:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 8002470:	79fa      	ldrb	r2, [r7, #7]
 8002472:	797b      	ldrb	r3, [r7, #5]
 8002474:	429a      	cmp	r2, r3
 8002476:	d1d6      	bne.n	8002426 <ssd1306_Line+0x76>
 8002478:	79ba      	ldrb	r2, [r7, #6]
 800247a:	793b      	ldrb	r3, [r7, #4]
 800247c:	429a      	cmp	r2, r3
 800247e:	d1d2      	bne.n	8002426 <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 8002480:	bf00      	nop
}
 8002482:	3724      	adds	r7, #36	; 0x24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd90      	pop	{r4, r7, pc}

08002488 <ssd1306_DrawCircle>:
    }
    
    return;
}
//Draw circle by Bresenhem's algorithm
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8002488:	b590      	push	{r4, r7, lr}
 800248a:	b087      	sub	sp, #28
 800248c:	af00      	add	r7, sp, #0
 800248e:	4604      	mov	r4, r0
 8002490:	4608      	mov	r0, r1
 8002492:	4611      	mov	r1, r2
 8002494:	461a      	mov	r2, r3
 8002496:	4623      	mov	r3, r4
 8002498:	71fb      	strb	r3, [r7, #7]
 800249a:	4603      	mov	r3, r0
 800249c:	71bb      	strb	r3, [r7, #6]
 800249e:	460b      	mov	r3, r1
 80024a0:	717b      	strb	r3, [r7, #5]
 80024a2:	4613      	mov	r3, r2
 80024a4:	713b      	strb	r3, [r7, #4]
  int32_t x = -par_r;
 80024a6:	797b      	ldrb	r3, [r7, #5]
 80024a8:	425b      	negs	r3, r3
 80024aa:	617b      	str	r3, [r7, #20]
  int32_t y = 0;
 80024ac:	2300      	movs	r3, #0
 80024ae:	613b      	str	r3, [r7, #16]
  int32_t err = 2 - 2 * par_r;
 80024b0:	797b      	ldrb	r3, [r7, #5]
 80024b2:	f1c3 0301 	rsb	r3, r3, #1
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	60fb      	str	r3, [r7, #12]
  int32_t e2;

  if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 80024ba:	79fb      	ldrb	r3, [r7, #7]
 80024bc:	2b81      	cmp	r3, #129	; 0x81
 80024be:	d866      	bhi.n	800258e <ssd1306_DrawCircle+0x106>
 80024c0:	79bb      	ldrb	r3, [r7, #6]
 80024c2:	2b3f      	cmp	r3, #63	; 0x3f
 80024c4:	d863      	bhi.n	800258e <ssd1306_DrawCircle+0x106>
    return;
  }

    do {
      ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	79fa      	ldrb	r2, [r7, #7]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	b2d8      	uxtb	r0, r3
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	79bb      	ldrb	r3, [r7, #6]
 80024d6:	4413      	add	r3, r2
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	793a      	ldrb	r2, [r7, #4]
 80024dc:	4619      	mov	r1, r3
 80024de:	f7ff fe37 	bl	8002150 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	79fb      	ldrb	r3, [r7, #7]
 80024e8:	4413      	add	r3, r2
 80024ea:	b2d8      	uxtb	r0, r3
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	79bb      	ldrb	r3, [r7, #6]
 80024f2:	4413      	add	r3, r2
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	793a      	ldrb	r2, [r7, #4]
 80024f8:	4619      	mov	r1, r3
 80024fa:	f7ff fe29 	bl	8002150 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	b2da      	uxtb	r2, r3
 8002502:	79fb      	ldrb	r3, [r7, #7]
 8002504:	4413      	add	r3, r2
 8002506:	b2d8      	uxtb	r0, r3
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	b2db      	uxtb	r3, r3
 800250c:	79ba      	ldrb	r2, [r7, #6]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	b2db      	uxtb	r3, r3
 8002512:	793a      	ldrb	r2, [r7, #4]
 8002514:	4619      	mov	r1, r3
 8002516:	f7ff fe1b 	bl	8002150 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	b2db      	uxtb	r3, r3
 800251e:	79fa      	ldrb	r2, [r7, #7]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	b2d8      	uxtb	r0, r3
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	b2db      	uxtb	r3, r3
 8002528:	79ba      	ldrb	r2, [r7, #6]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	b2db      	uxtb	r3, r3
 800252e:	793a      	ldrb	r2, [r7, #4]
 8002530:	4619      	mov	r1, r3
 8002532:	f7ff fe0d 	bl	8002150 <ssd1306_DrawPixel>
        e2 = err;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	60bb      	str	r3, [r7, #8]
        if (e2 <= y) {
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	429a      	cmp	r2, r3
 8002540:	dc13      	bgt.n	800256a <ssd1306_DrawCircle+0xe2>
            y++;
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	3301      	adds	r3, #1
 8002546:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	3301      	adds	r3, #1
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	4413      	add	r3, r2
 8002552:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	425b      	negs	r3, r3
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	429a      	cmp	r2, r3
 800255c:	d105      	bne.n	800256a <ssd1306_DrawCircle+0xe2>
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	429a      	cmp	r2, r3
 8002564:	dc01      	bgt.n	800256a <ssd1306_DrawCircle+0xe2>
              e2 = 0;
 8002566:	2300      	movs	r3, #0
 8002568:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          /*nothing to do*/
        }
        if(e2 > x) {
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	429a      	cmp	r2, r3
 8002570:	dd08      	ble.n	8002584 <ssd1306_DrawCircle+0xfc>
          x++;
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	3301      	adds	r3, #1
 8002576:	617b      	str	r3, [r7, #20]
          err = err + (x * 2 + 1);
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	3301      	adds	r3, #1
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	4413      	add	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          /*nothing to do*/
        }
    } while(x <= 0);
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	2b00      	cmp	r3, #0
 8002588:	dd9d      	ble.n	80024c6 <ssd1306_DrawCircle+0x3e>

    return;
 800258a:	bf00      	nop
 800258c:	e000      	b.n	8002590 <ssd1306_DrawCircle+0x108>
    return;
 800258e:	bf00      	nop
}
 8002590:	371c      	adds	r7, #28
 8002592:	46bd      	mov	sp, r7
 8002594:	bd90      	pop	{r4, r7, pc}

08002596 <ssd1306_DrawRectangle>:

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002596:	b590      	push	{r4, r7, lr}
 8002598:	b085      	sub	sp, #20
 800259a:	af02      	add	r7, sp, #8
 800259c:	4604      	mov	r4, r0
 800259e:	4608      	mov	r0, r1
 80025a0:	4611      	mov	r1, r2
 80025a2:	461a      	mov	r2, r3
 80025a4:	4623      	mov	r3, r4
 80025a6:	71fb      	strb	r3, [r7, #7]
 80025a8:	4603      	mov	r3, r0
 80025aa:	71bb      	strb	r3, [r7, #6]
 80025ac:	460b      	mov	r3, r1
 80025ae:	717b      	strb	r3, [r7, #5]
 80025b0:	4613      	mov	r3, r2
 80025b2:	713b      	strb	r3, [r7, #4]
  ssd1306_Line(x1,y1,x2,y1,color);
 80025b4:	79bc      	ldrb	r4, [r7, #6]
 80025b6:	797a      	ldrb	r2, [r7, #5]
 80025b8:	79b9      	ldrb	r1, [r7, #6]
 80025ba:	79f8      	ldrb	r0, [r7, #7]
 80025bc:	7e3b      	ldrb	r3, [r7, #24]
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	4623      	mov	r3, r4
 80025c2:	f7ff fef5 	bl	80023b0 <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 80025c6:	793c      	ldrb	r4, [r7, #4]
 80025c8:	797a      	ldrb	r2, [r7, #5]
 80025ca:	79b9      	ldrb	r1, [r7, #6]
 80025cc:	7978      	ldrb	r0, [r7, #5]
 80025ce:	7e3b      	ldrb	r3, [r7, #24]
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	4623      	mov	r3, r4
 80025d4:	f7ff feec 	bl	80023b0 <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 80025d8:	793c      	ldrb	r4, [r7, #4]
 80025da:	79fa      	ldrb	r2, [r7, #7]
 80025dc:	7939      	ldrb	r1, [r7, #4]
 80025de:	7978      	ldrb	r0, [r7, #5]
 80025e0:	7e3b      	ldrb	r3, [r7, #24]
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	4623      	mov	r3, r4
 80025e6:	f7ff fee3 	bl	80023b0 <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 80025ea:	79bc      	ldrb	r4, [r7, #6]
 80025ec:	79fa      	ldrb	r2, [r7, #7]
 80025ee:	7939      	ldrb	r1, [r7, #4]
 80025f0:	79f8      	ldrb	r0, [r7, #7]
 80025f2:	7e3b      	ldrb	r3, [r7, #24]
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	4623      	mov	r3, r4
 80025f8:	f7ff feda 	bl	80023b0 <ssd1306_Line>

  return;
 80025fc:	bf00      	nop
}
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	bd90      	pop	{r4, r7, pc}

08002604 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800260e:	2381      	movs	r3, #129	; 0x81
 8002610:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002612:	7bfb      	ldrb	r3, [r7, #15]
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff fc9b 	bl	8001f50 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff fc97 	bl	8001f50 <ssd1306_WriteCommand>
}
 8002622:	bf00      	nop
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
	...

0800262c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002636:	79fb      	ldrb	r3, [r7, #7]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d005      	beq.n	8002648 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800263c:	23af      	movs	r3, #175	; 0xaf
 800263e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002640:	4b08      	ldr	r3, [pc, #32]	; (8002664 <ssd1306_SetDisplayOn+0x38>)
 8002642:	2201      	movs	r2, #1
 8002644:	719a      	strb	r2, [r3, #6]
 8002646:	e004      	b.n	8002652 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002648:	23ae      	movs	r3, #174	; 0xae
 800264a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800264c:	4b05      	ldr	r3, [pc, #20]	; (8002664 <ssd1306_SetDisplayOn+0x38>)
 800264e:	2200      	movs	r2, #0
 8002650:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8002652:	7bfb      	ldrb	r3, [r7, #15]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff fc7b 	bl	8001f50 <ssd1306_WriteCommand>
}
 800265a:	bf00      	nop
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	20000644 	.word	0x20000644

08002668 <display_template>:
 */

#include "ssd1306_display.h"
#include "ssd1306.h"

void display_template(void) {
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black);
 800266e:	2000      	movs	r0, #0
 8002670:	f7ff fd22 	bl	80020b8 <ssd1306_Fill>

	ssd1306_DrawRectangle(2, 2, 10, 60, White);
 8002674:	2301      	movs	r3, #1
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	233c      	movs	r3, #60	; 0x3c
 800267a:	220a      	movs	r2, #10
 800267c:	2102      	movs	r1, #2
 800267e:	2002      	movs	r0, #2
 8002680:	f7ff ff89 	bl	8002596 <ssd1306_DrawRectangle>
	ssd1306_DrawRectangle(110, 2, 120, 60, White);
 8002684:	2301      	movs	r3, #1
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	233c      	movs	r3, #60	; 0x3c
 800268a:	2278      	movs	r2, #120	; 0x78
 800268c:	2102      	movs	r1, #2
 800268e:	206e      	movs	r0, #110	; 0x6e
 8002690:	f7ff ff81 	bl	8002596 <ssd1306_DrawRectangle>

	ssd1306_SetCursor(25, 0);
 8002694:	2100      	movs	r1, #0
 8002696:	2019      	movs	r0, #25
 8002698:	f7ff fe72 	bl	8002380 <ssd1306_SetCursor>
	ssd1306_WriteString("Controller", Font_7x10, White);
 800269c:	4a11      	ldr	r2, [pc, #68]	; (80026e4 <display_template+0x7c>)
 800269e:	2301      	movs	r3, #1
 80026a0:	ca06      	ldmia	r2, {r1, r2}
 80026a2:	4811      	ldr	r0, [pc, #68]	; (80026e8 <display_template+0x80>)
 80026a4:	f7ff fe46 	bl	8002334 <ssd1306_WriteString>

	ssd1306_DrawCircle(40, 30, 15, White);
 80026a8:	2301      	movs	r3, #1
 80026aa:	220f      	movs	r2, #15
 80026ac:	211e      	movs	r1, #30
 80026ae:	2028      	movs	r0, #40	; 0x28
 80026b0:	f7ff feea 	bl	8002488 <ssd1306_DrawCircle>
	ssd1306_DrawCircle(80, 30, 15, White);
 80026b4:	2301      	movs	r3, #1
 80026b6:	220f      	movs	r2, #15
 80026b8:	211e      	movs	r1, #30
 80026ba:	2050      	movs	r0, #80	; 0x50
 80026bc:	f7ff fee4 	bl	8002488 <ssd1306_DrawCircle>

	ssd1306_DrawCircle(20, 55, 5, White);
 80026c0:	2301      	movs	r3, #1
 80026c2:	2205      	movs	r2, #5
 80026c4:	2137      	movs	r1, #55	; 0x37
 80026c6:	2014      	movs	r0, #20
 80026c8:	f7ff fede 	bl	8002488 <ssd1306_DrawCircle>
	ssd1306_DrawCircle(100, 55, 5, White);
 80026cc:	2301      	movs	r3, #1
 80026ce:	2205      	movs	r2, #5
 80026d0:	2137      	movs	r1, #55	; 0x37
 80026d2:	2064      	movs	r0, #100	; 0x64
 80026d4:	f7ff fed8 	bl	8002488 <ssd1306_DrawCircle>

	ssd1306_UpdateScreen();
 80026d8:	f7ff fd10 	bl	80020fc <ssd1306_UpdateScreen>
}
 80026dc:	bf00      	nop
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20000034 	.word	0x20000034
 80026e8:	08009f78 	.word	0x08009f78

080026ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	607b      	str	r3, [r7, #4]
 80026f6:	4b10      	ldr	r3, [pc, #64]	; (8002738 <HAL_MspInit+0x4c>)
 80026f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fa:	4a0f      	ldr	r2, [pc, #60]	; (8002738 <HAL_MspInit+0x4c>)
 80026fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002700:	6453      	str	r3, [r2, #68]	; 0x44
 8002702:	4b0d      	ldr	r3, [pc, #52]	; (8002738 <HAL_MspInit+0x4c>)
 8002704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800270a:	607b      	str	r3, [r7, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	603b      	str	r3, [r7, #0]
 8002712:	4b09      	ldr	r3, [pc, #36]	; (8002738 <HAL_MspInit+0x4c>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	4a08      	ldr	r2, [pc, #32]	; (8002738 <HAL_MspInit+0x4c>)
 8002718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800271c:	6413      	str	r3, [r2, #64]	; 0x40
 800271e:	4b06      	ldr	r3, [pc, #24]	; (8002738 <HAL_MspInit+0x4c>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002726:	603b      	str	r3, [r7, #0]
 8002728:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	40023800 	.word	0x40023800

0800273c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b08a      	sub	sp, #40	; 0x28
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002744:	f107 0314 	add.w	r3, r7, #20
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	609a      	str	r2, [r3, #8]
 8002750:	60da      	str	r2, [r3, #12]
 8002752:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a2f      	ldr	r2, [pc, #188]	; (8002818 <HAL_ADC_MspInit+0xdc>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d158      	bne.n	8002810 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	4b2e      	ldr	r3, [pc, #184]	; (800281c <HAL_ADC_MspInit+0xe0>)
 8002764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002766:	4a2d      	ldr	r2, [pc, #180]	; (800281c <HAL_ADC_MspInit+0xe0>)
 8002768:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800276c:	6453      	str	r3, [r2, #68]	; 0x44
 800276e:	4b2b      	ldr	r3, [pc, #172]	; (800281c <HAL_ADC_MspInit+0xe0>)
 8002770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002772:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002776:	613b      	str	r3, [r7, #16]
 8002778:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	4b27      	ldr	r3, [pc, #156]	; (800281c <HAL_ADC_MspInit+0xe0>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	4a26      	ldr	r2, [pc, #152]	; (800281c <HAL_ADC_MspInit+0xe0>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	6313      	str	r3, [r2, #48]	; 0x30
 800278a:	4b24      	ldr	r3, [pc, #144]	; (800281c <HAL_ADC_MspInit+0xe0>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA0-WKUP     ------> ADC2_IN0
    PA1     ------> ADC2_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002796:	2303      	movs	r3, #3
 8002798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800279a:	2303      	movs	r3, #3
 800279c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a2:	f107 0314 	add.w	r3, r7, #20
 80027a6:	4619      	mov	r1, r3
 80027a8:	481d      	ldr	r0, [pc, #116]	; (8002820 <HAL_ADC_MspInit+0xe4>)
 80027aa:	f001 fb83 	bl	8003eb4 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 80027ae:	4b1d      	ldr	r3, [pc, #116]	; (8002824 <HAL_ADC_MspInit+0xe8>)
 80027b0:	4a1d      	ldr	r2, [pc, #116]	; (8002828 <HAL_ADC_MspInit+0xec>)
 80027b2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80027b4:	4b1b      	ldr	r3, [pc, #108]	; (8002824 <HAL_ADC_MspInit+0xe8>)
 80027b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027ba:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027bc:	4b19      	ldr	r3, [pc, #100]	; (8002824 <HAL_ADC_MspInit+0xe8>)
 80027be:	2200      	movs	r2, #0
 80027c0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80027c2:	4b18      	ldr	r3, [pc, #96]	; (8002824 <HAL_ADC_MspInit+0xe8>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80027c8:	4b16      	ldr	r3, [pc, #88]	; (8002824 <HAL_ADC_MspInit+0xe8>)
 80027ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027ce:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80027d0:	4b14      	ldr	r3, [pc, #80]	; (8002824 <HAL_ADC_MspInit+0xe8>)
 80027d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027d6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80027d8:	4b12      	ldr	r3, [pc, #72]	; (8002824 <HAL_ADC_MspInit+0xe8>)
 80027da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027de:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80027e0:	4b10      	ldr	r3, [pc, #64]	; (8002824 <HAL_ADC_MspInit+0xe8>)
 80027e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027e6:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80027e8:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <HAL_ADC_MspInit+0xe8>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027ee:	4b0d      	ldr	r3, [pc, #52]	; (8002824 <HAL_ADC_MspInit+0xe8>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80027f4:	480b      	ldr	r0, [pc, #44]	; (8002824 <HAL_ADC_MspInit+0xe8>)
 80027f6:	f000 ffcd 	bl	8003794 <HAL_DMA_Init>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002800:	f7ff fb0c 	bl	8001e1c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a07      	ldr	r2, [pc, #28]	; (8002824 <HAL_ADC_MspInit+0xe8>)
 8002808:	639a      	str	r2, [r3, #56]	; 0x38
 800280a:	4a06      	ldr	r2, [pc, #24]	; (8002824 <HAL_ADC_MspInit+0xe8>)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002810:	bf00      	nop
 8002812:	3728      	adds	r7, #40	; 0x28
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40012100 	.word	0x40012100
 800281c:	40023800 	.word	0x40023800
 8002820:	40020000 	.word	0x40020000
 8002824:	20000834 	.word	0x20000834
 8002828:	40026440 	.word	0x40026440

0800282c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b090      	sub	sp, #64	; 0x40
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002834:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	605a      	str	r2, [r3, #4]
 800283e:	609a      	str	r2, [r3, #8]
 8002840:	60da      	str	r2, [r3, #12]
 8002842:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a72      	ldr	r2, [pc, #456]	; (8002a14 <HAL_SPI_MspInit+0x1e8>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d12c      	bne.n	80028a8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	62bb      	str	r3, [r7, #40]	; 0x28
 8002852:	4b71      	ldr	r3, [pc, #452]	; (8002a18 <HAL_SPI_MspInit+0x1ec>)
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	4a70      	ldr	r2, [pc, #448]	; (8002a18 <HAL_SPI_MspInit+0x1ec>)
 8002858:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800285c:	6453      	str	r3, [r2, #68]	; 0x44
 800285e:	4b6e      	ldr	r3, [pc, #440]	; (8002a18 <HAL_SPI_MspInit+0x1ec>)
 8002860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002862:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002866:	62bb      	str	r3, [r7, #40]	; 0x28
 8002868:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
 800286e:	4b6a      	ldr	r3, [pc, #424]	; (8002a18 <HAL_SPI_MspInit+0x1ec>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	4a69      	ldr	r2, [pc, #420]	; (8002a18 <HAL_SPI_MspInit+0x1ec>)
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	6313      	str	r3, [r2, #48]	; 0x30
 800287a:	4b67      	ldr	r3, [pc, #412]	; (8002a18 <HAL_SPI_MspInit+0x1ec>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	627b      	str	r3, [r7, #36]	; 0x24
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002886:	23a0      	movs	r3, #160	; 0xa0
 8002888:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288a:	2302      	movs	r3, #2
 800288c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288e:	2300      	movs	r3, #0
 8002890:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002892:	2303      	movs	r3, #3
 8002894:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002896:	2305      	movs	r3, #5
 8002898:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800289a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800289e:	4619      	mov	r1, r3
 80028a0:	485e      	ldr	r0, [pc, #376]	; (8002a1c <HAL_SPI_MspInit+0x1f0>)
 80028a2:	f001 fb07 	bl	8003eb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80028a6:	e0b0      	b.n	8002a0a <HAL_SPI_MspInit+0x1de>
  else if(hspi->Instance==SPI2)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a5c      	ldr	r2, [pc, #368]	; (8002a20 <HAL_SPI_MspInit+0x1f4>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d15b      	bne.n	800296a <HAL_SPI_MspInit+0x13e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80028b2:	2300      	movs	r3, #0
 80028b4:	623b      	str	r3, [r7, #32]
 80028b6:	4b58      	ldr	r3, [pc, #352]	; (8002a18 <HAL_SPI_MspInit+0x1ec>)
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	4a57      	ldr	r2, [pc, #348]	; (8002a18 <HAL_SPI_MspInit+0x1ec>)
 80028bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028c0:	6413      	str	r3, [r2, #64]	; 0x40
 80028c2:	4b55      	ldr	r3, [pc, #340]	; (8002a18 <HAL_SPI_MspInit+0x1ec>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ca:	623b      	str	r3, [r7, #32]
 80028cc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	61fb      	str	r3, [r7, #28]
 80028d2:	4b51      	ldr	r3, [pc, #324]	; (8002a18 <HAL_SPI_MspInit+0x1ec>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	4a50      	ldr	r2, [pc, #320]	; (8002a18 <HAL_SPI_MspInit+0x1ec>)
 80028d8:	f043 0304 	orr.w	r3, r3, #4
 80028dc:	6313      	str	r3, [r2, #48]	; 0x30
 80028de:	4b4e      	ldr	r3, [pc, #312]	; (8002a18 <HAL_SPI_MspInit+0x1ec>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	f003 0304 	and.w	r3, r3, #4
 80028e6:	61fb      	str	r3, [r7, #28]
 80028e8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	61bb      	str	r3, [r7, #24]
 80028ee:	4b4a      	ldr	r3, [pc, #296]	; (8002a18 <HAL_SPI_MspInit+0x1ec>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	4a49      	ldr	r2, [pc, #292]	; (8002a18 <HAL_SPI_MspInit+0x1ec>)
 80028f4:	f043 0302 	orr.w	r3, r3, #2
 80028f8:	6313      	str	r3, [r2, #48]	; 0x30
 80028fa:	4b47      	ldr	r3, [pc, #284]	; (8002a18 <HAL_SPI_MspInit+0x1ec>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	61bb      	str	r3, [r7, #24]
 8002904:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002906:	2302      	movs	r3, #2
 8002908:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290a:	2302      	movs	r3, #2
 800290c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290e:	2300      	movs	r3, #0
 8002910:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002912:	2303      	movs	r3, #3
 8002914:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002916:	2307      	movs	r3, #7
 8002918:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800291a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800291e:	4619      	mov	r1, r3
 8002920:	4840      	ldr	r0, [pc, #256]	; (8002a24 <HAL_SPI_MspInit+0x1f8>)
 8002922:	f001 fac7 	bl	8003eb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002926:	2304      	movs	r3, #4
 8002928:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292a:	2302      	movs	r3, #2
 800292c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292e:	2300      	movs	r3, #0
 8002930:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002932:	2303      	movs	r3, #3
 8002934:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002936:	2305      	movs	r3, #5
 8002938:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800293a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800293e:	4619      	mov	r1, r3
 8002940:	4838      	ldr	r0, [pc, #224]	; (8002a24 <HAL_SPI_MspInit+0x1f8>)
 8002942:	f001 fab7 	bl	8003eb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800294a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294c:	2302      	movs	r3, #2
 800294e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002950:	2300      	movs	r3, #0
 8002952:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002954:	2303      	movs	r3, #3
 8002956:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002958:	2305      	movs	r3, #5
 800295a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800295c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002960:	4619      	mov	r1, r3
 8002962:	4831      	ldr	r0, [pc, #196]	; (8002a28 <HAL_SPI_MspInit+0x1fc>)
 8002964:	f001 faa6 	bl	8003eb4 <HAL_GPIO_Init>
}
 8002968:	e04f      	b.n	8002a0a <HAL_SPI_MspInit+0x1de>
  else if(hspi->Instance==SPI3)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a2f      	ldr	r2, [pc, #188]	; (8002a2c <HAL_SPI_MspInit+0x200>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d14a      	bne.n	8002a0a <HAL_SPI_MspInit+0x1de>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002974:	2300      	movs	r3, #0
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	4b27      	ldr	r3, [pc, #156]	; (8002a18 <HAL_SPI_MspInit+0x1ec>)
 800297a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297c:	4a26      	ldr	r2, [pc, #152]	; (8002a18 <HAL_SPI_MspInit+0x1ec>)
 800297e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002982:	6413      	str	r3, [r2, #64]	; 0x40
 8002984:	4b24      	ldr	r3, [pc, #144]	; (8002a18 <HAL_SPI_MspInit+0x1ec>)
 8002986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002988:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800298c:	617b      	str	r3, [r7, #20]
 800298e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002990:	2300      	movs	r3, #0
 8002992:	613b      	str	r3, [r7, #16]
 8002994:	4b20      	ldr	r3, [pc, #128]	; (8002a18 <HAL_SPI_MspInit+0x1ec>)
 8002996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002998:	4a1f      	ldr	r2, [pc, #124]	; (8002a18 <HAL_SPI_MspInit+0x1ec>)
 800299a:	f043 0302 	orr.w	r3, r3, #2
 800299e:	6313      	str	r3, [r2, #48]	; 0x30
 80029a0:	4b1d      	ldr	r3, [pc, #116]	; (8002a18 <HAL_SPI_MspInit+0x1ec>)
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ac:	2300      	movs	r3, #0
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	4b19      	ldr	r3, [pc, #100]	; (8002a18 <HAL_SPI_MspInit+0x1ec>)
 80029b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b4:	4a18      	ldr	r2, [pc, #96]	; (8002a18 <HAL_SPI_MspInit+0x1ec>)
 80029b6:	f043 0304 	orr.w	r3, r3, #4
 80029ba:	6313      	str	r3, [r2, #48]	; 0x30
 80029bc:	4b16      	ldr	r3, [pc, #88]	; (8002a18 <HAL_SPI_MspInit+0x1ec>)
 80029be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80029c8:	2301      	movs	r3, #1
 80029ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029cc:	2302      	movs	r3, #2
 80029ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d4:	2303      	movs	r3, #3
 80029d6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80029d8:	2307      	movs	r3, #7
 80029da:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029e0:	4619      	mov	r1, r3
 80029e2:	4811      	ldr	r0, [pc, #68]	; (8002a28 <HAL_SPI_MspInit+0x1fc>)
 80029e4:	f001 fa66 	bl	8003eb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80029e8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80029ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ee:	2302      	movs	r3, #2
 80029f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f6:	2303      	movs	r3, #3
 80029f8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80029fa:	2306      	movs	r3, #6
 80029fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a02:	4619      	mov	r1, r3
 8002a04:	4807      	ldr	r0, [pc, #28]	; (8002a24 <HAL_SPI_MspInit+0x1f8>)
 8002a06:	f001 fa55 	bl	8003eb4 <HAL_GPIO_Init>
}
 8002a0a:	bf00      	nop
 8002a0c:	3740      	adds	r7, #64	; 0x40
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40013000 	.word	0x40013000
 8002a18:	40023800 	.word	0x40023800
 8002a1c:	40020000 	.word	0x40020000
 8002a20:	40003800 	.word	0x40003800
 8002a24:	40020800 	.word	0x40020800
 8002a28:	40020400 	.word	0x40020400
 8002a2c:	40003c00 	.word	0x40003c00

08002a30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b08a      	sub	sp, #40	; 0x28
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a38:	f107 0314 	add.w	r3, r7, #20
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	605a      	str	r2, [r3, #4]
 8002a42:	609a      	str	r2, [r3, #8]
 8002a44:	60da      	str	r2, [r3, #12]
 8002a46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a1d      	ldr	r2, [pc, #116]	; (8002ac4 <HAL_UART_MspInit+0x94>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d134      	bne.n	8002abc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	613b      	str	r3, [r7, #16]
 8002a56:	4b1c      	ldr	r3, [pc, #112]	; (8002ac8 <HAL_UART_MspInit+0x98>)
 8002a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5a:	4a1b      	ldr	r2, [pc, #108]	; (8002ac8 <HAL_UART_MspInit+0x98>)
 8002a5c:	f043 0310 	orr.w	r3, r3, #16
 8002a60:	6453      	str	r3, [r2, #68]	; 0x44
 8002a62:	4b19      	ldr	r3, [pc, #100]	; (8002ac8 <HAL_UART_MspInit+0x98>)
 8002a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a66:	f003 0310 	and.w	r3, r3, #16
 8002a6a:	613b      	str	r3, [r7, #16]
 8002a6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	4b15      	ldr	r3, [pc, #84]	; (8002ac8 <HAL_UART_MspInit+0x98>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	4a14      	ldr	r2, [pc, #80]	; (8002ac8 <HAL_UART_MspInit+0x98>)
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a7e:	4b12      	ldr	r3, [pc, #72]	; (8002ac8 <HAL_UART_MspInit+0x98>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a8a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a90:	2302      	movs	r3, #2
 8002a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a9c:	2307      	movs	r3, #7
 8002a9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa0:	f107 0314 	add.w	r3, r7, #20
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4809      	ldr	r0, [pc, #36]	; (8002acc <HAL_UART_MspInit+0x9c>)
 8002aa8:	f001 fa04 	bl	8003eb4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002aac:	2200      	movs	r2, #0
 8002aae:	2100      	movs	r1, #0
 8002ab0:	2025      	movs	r0, #37	; 0x25
 8002ab2:	f000 fe38 	bl	8003726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ab6:	2025      	movs	r0, #37	; 0x25
 8002ab8:	f000 fe51 	bl	800375e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002abc:	bf00      	nop
 8002abe:	3728      	adds	r7, #40	; 0x28
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40011000 	.word	0x40011000
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	40020000 	.word	0x40020000

08002ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002ad4:	bf00      	nop
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ae2:	e7fe      	b.n	8002ae2 <HardFault_Handler+0x4>

08002ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ae8:	e7fe      	b.n	8002ae8 <MemManage_Handler+0x4>

08002aea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aea:	b480      	push	{r7}
 8002aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002aee:	e7fe      	b.n	8002aee <BusFault_Handler+0x4>

08002af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002af4:	e7fe      	b.n	8002af4 <UsageFault_Handler+0x4>

08002af6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002af6:	b480      	push	{r7}
 8002af8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002afa:	bf00      	nop
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b08:	bf00      	nop
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b12:	b480      	push	{r7}
 8002b14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b16:	bf00      	nop
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b24:	f000 f8de 	bl	8002ce4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b28:	bf00      	nop
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002b30:	4802      	ldr	r0, [pc, #8]	; (8002b3c <USART1_IRQHandler+0x10>)
 8002b32:	f002 fe85 	bl	8005840 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002b36:	bf00      	nop
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	2000079c 	.word	0x2000079c

08002b40 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002b44:	4802      	ldr	r0, [pc, #8]	; (8002b50 <DMA2_Stream2_IRQHandler+0x10>)
 8002b46:	f000 ff4d 	bl	80039e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002b4a:	bf00      	nop
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	20000834 	.word	0x20000834

08002b54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b5c:	4a14      	ldr	r2, [pc, #80]	; (8002bb0 <_sbrk+0x5c>)
 8002b5e:	4b15      	ldr	r3, [pc, #84]	; (8002bb4 <_sbrk+0x60>)
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b68:	4b13      	ldr	r3, [pc, #76]	; (8002bb8 <_sbrk+0x64>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d102      	bne.n	8002b76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b70:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <_sbrk+0x64>)
 8002b72:	4a12      	ldr	r2, [pc, #72]	; (8002bbc <_sbrk+0x68>)
 8002b74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b76:	4b10      	ldr	r3, [pc, #64]	; (8002bb8 <_sbrk+0x64>)
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d207      	bcs.n	8002b94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b84:	f003 fc62 	bl	800644c <__errno>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	230c      	movs	r3, #12
 8002b8c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b92:	e009      	b.n	8002ba8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b94:	4b08      	ldr	r3, [pc, #32]	; (8002bb8 <_sbrk+0x64>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b9a:	4b07      	ldr	r3, [pc, #28]	; (8002bb8 <_sbrk+0x64>)
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	4a05      	ldr	r2, [pc, #20]	; (8002bb8 <_sbrk+0x64>)
 8002ba4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	20020000 	.word	0x20020000
 8002bb4:	00000400 	.word	0x00000400
 8002bb8:	2000064c 	.word	0x2000064c
 8002bbc:	200008a8 	.word	0x200008a8

08002bc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bc4:	4b08      	ldr	r3, [pc, #32]	; (8002be8 <SystemInit+0x28>)
 8002bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bca:	4a07      	ldr	r2, [pc, #28]	; (8002be8 <SystemInit+0x28>)
 8002bcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002bd4:	4b04      	ldr	r3, [pc, #16]	; (8002be8 <SystemInit+0x28>)
 8002bd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002bda:	609a      	str	r2, [r3, #8]
#endif
}
 8002bdc:	bf00      	nop
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	e000ed00 	.word	0xe000ed00

08002bec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002bec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c24 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002bf0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002bf2:	e003      	b.n	8002bfc <LoopCopyDataInit>

08002bf4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002bf4:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002bf6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002bf8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002bfa:	3104      	adds	r1, #4

08002bfc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002bfc:	480b      	ldr	r0, [pc, #44]	; (8002c2c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002bfe:	4b0c      	ldr	r3, [pc, #48]	; (8002c30 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002c00:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002c02:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002c04:	d3f6      	bcc.n	8002bf4 <CopyDataInit>
  ldr  r2, =_sbss
 8002c06:	4a0b      	ldr	r2, [pc, #44]	; (8002c34 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002c08:	e002      	b.n	8002c10 <LoopFillZerobss>

08002c0a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002c0a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002c0c:	f842 3b04 	str.w	r3, [r2], #4

08002c10 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002c10:	4b09      	ldr	r3, [pc, #36]	; (8002c38 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002c12:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002c14:	d3f9      	bcc.n	8002c0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c16:	f7ff ffd3 	bl	8002bc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c1a:	f003 fc1d 	bl	8006458 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c1e:	f7fe fd57 	bl	80016d0 <main>
  bx  lr    
 8002c22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c24:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002c28:	0800a9d8 	.word	0x0800a9d8
  ldr  r0, =_sdata
 8002c2c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002c30:	20000218 	.word	0x20000218
  ldr  r2, =_sbss
 8002c34:	20000218 	.word	0x20000218
  ldr  r3, = _ebss
 8002c38:	200008a4 	.word	0x200008a4

08002c3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c3c:	e7fe      	b.n	8002c3c <ADC_IRQHandler>
	...

08002c40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c44:	4b0e      	ldr	r3, [pc, #56]	; (8002c80 <HAL_Init+0x40>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a0d      	ldr	r2, [pc, #52]	; (8002c80 <HAL_Init+0x40>)
 8002c4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c50:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <HAL_Init+0x40>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a0a      	ldr	r2, [pc, #40]	; (8002c80 <HAL_Init+0x40>)
 8002c56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c5c:	4b08      	ldr	r3, [pc, #32]	; (8002c80 <HAL_Init+0x40>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a07      	ldr	r2, [pc, #28]	; (8002c80 <HAL_Init+0x40>)
 8002c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c68:	2003      	movs	r0, #3
 8002c6a:	f000 fd51 	bl	8003710 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c6e:	2000      	movs	r0, #0
 8002c70:	f000 f808 	bl	8002c84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c74:	f7ff fd3a 	bl	80026ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40023c00 	.word	0x40023c00

08002c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c8c:	4b12      	ldr	r3, [pc, #72]	; (8002cd8 <HAL_InitTick+0x54>)
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	4b12      	ldr	r3, [pc, #72]	; (8002cdc <HAL_InitTick+0x58>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	4619      	mov	r1, r3
 8002c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 fd69 	bl	800377a <HAL_SYSTICK_Config>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e00e      	b.n	8002cd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b0f      	cmp	r3, #15
 8002cb6:	d80a      	bhi.n	8002cce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cb8:	2200      	movs	r2, #0
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc0:	f000 fd31 	bl	8003726 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cc4:	4a06      	ldr	r2, [pc, #24]	; (8002ce0 <HAL_InitTick+0x5c>)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	e000      	b.n	8002cd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	2000003c 	.word	0x2000003c
 8002cdc:	20000044 	.word	0x20000044
 8002ce0:	20000040 	.word	0x20000040

08002ce4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ce8:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <HAL_IncTick+0x20>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	461a      	mov	r2, r3
 8002cee:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <HAL_IncTick+0x24>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	4a04      	ldr	r2, [pc, #16]	; (8002d08 <HAL_IncTick+0x24>)
 8002cf6:	6013      	str	r3, [r2, #0]
}
 8002cf8:	bf00      	nop
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	20000044 	.word	0x20000044
 8002d08:	2000089c 	.word	0x2000089c

08002d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d10:	4b03      	ldr	r3, [pc, #12]	; (8002d20 <HAL_GetTick+0x14>)
 8002d12:	681b      	ldr	r3, [r3, #0]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	2000089c 	.word	0x2000089c

08002d24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d2c:	f7ff ffee 	bl	8002d0c <HAL_GetTick>
 8002d30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3c:	d005      	beq.n	8002d4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d3e:	4b09      	ldr	r3, [pc, #36]	; (8002d64 <HAL_Delay+0x40>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	461a      	mov	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	4413      	add	r3, r2
 8002d48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d4a:	bf00      	nop
 8002d4c:	f7ff ffde 	bl	8002d0c <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d8f7      	bhi.n	8002d4c <HAL_Delay+0x28>
  {
  }
}
 8002d5c:	bf00      	nop
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	20000044 	.word	0x20000044

08002d68 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d70:	2300      	movs	r3, #0
 8002d72:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e033      	b.n	8002de6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d109      	bne.n	8002d9a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7ff fcd8 	bl	800273c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	f003 0310 	and.w	r3, r3, #16
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d118      	bne.n	8002dd8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002dae:	f023 0302 	bic.w	r3, r3, #2
 8002db2:	f043 0202 	orr.w	r2, r3, #2
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 fa5a 	bl	8003274 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	f023 0303 	bic.w	r3, r3, #3
 8002dce:	f043 0201 	orr.w	r2, r3, #1
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	641a      	str	r2, [r3, #64]	; 0x40
 8002dd6:	e001      	b.n	8002ddc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
	...

08002df0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d101      	bne.n	8002e0e <HAL_ADC_Start_DMA+0x1e>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	e0cc      	b.n	8002fa8 <HAL_ADC_Start_DMA+0x1b8>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d018      	beq.n	8002e56 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689a      	ldr	r2, [r3, #8]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0201 	orr.w	r2, r2, #1
 8002e32:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e34:	4b5e      	ldr	r3, [pc, #376]	; (8002fb0 <HAL_ADC_Start_DMA+0x1c0>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a5e      	ldr	r2, [pc, #376]	; (8002fb4 <HAL_ADC_Start_DMA+0x1c4>)
 8002e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3e:	0c9a      	lsrs	r2, r3, #18
 8002e40:	4613      	mov	r3, r2
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	4413      	add	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002e48:	e002      	b.n	8002e50 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f9      	bne.n	8002e4a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	f040 80a0 	bne.w	8002fa6 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002e6e:	f023 0301 	bic.w	r3, r3, #1
 8002e72:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d007      	beq.n	8002e98 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e90:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ea4:	d106      	bne.n	8002eb4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eaa:	f023 0206 	bic.w	r2, r3, #6
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	645a      	str	r2, [r3, #68]	; 0x44
 8002eb2:	e002      	b.n	8002eba <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ec2:	4b3d      	ldr	r3, [pc, #244]	; (8002fb8 <HAL_ADC_Start_DMA+0x1c8>)
 8002ec4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eca:	4a3c      	ldr	r2, [pc, #240]	; (8002fbc <HAL_ADC_Start_DMA+0x1cc>)
 8002ecc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed2:	4a3b      	ldr	r2, [pc, #236]	; (8002fc0 <HAL_ADC_Start_DMA+0x1d0>)
 8002ed4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eda:	4a3a      	ldr	r2, [pc, #232]	; (8002fc4 <HAL_ADC_Start_DMA+0x1d4>)
 8002edc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002ee6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002ef6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f06:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	334c      	adds	r3, #76	; 0x4c
 8002f12:	4619      	mov	r1, r3
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f000 fcea 	bl	80038f0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 031f 	and.w	r3, r3, #31
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d12a      	bne.n	8002f7e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a26      	ldr	r2, [pc, #152]	; (8002fc8 <HAL_ADC_Start_DMA+0x1d8>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d015      	beq.n	8002f5e <HAL_ADC_Start_DMA+0x16e>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a25      	ldr	r2, [pc, #148]	; (8002fcc <HAL_ADC_Start_DMA+0x1dc>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d105      	bne.n	8002f48 <HAL_ADC_Start_DMA+0x158>
 8002f3c:	4b1e      	ldr	r3, [pc, #120]	; (8002fb8 <HAL_ADC_Start_DMA+0x1c8>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f003 031f 	and.w	r3, r3, #31
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00a      	beq.n	8002f5e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a20      	ldr	r2, [pc, #128]	; (8002fd0 <HAL_ADC_Start_DMA+0x1e0>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d129      	bne.n	8002fa6 <HAL_ADC_Start_DMA+0x1b6>
 8002f52:	4b19      	ldr	r3, [pc, #100]	; (8002fb8 <HAL_ADC_Start_DMA+0x1c8>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f003 031f 	and.w	r3, r3, #31
 8002f5a:	2b0f      	cmp	r3, #15
 8002f5c:	d823      	bhi.n	8002fa6 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d11c      	bne.n	8002fa6 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f7a:	609a      	str	r2, [r3, #8]
 8002f7c:	e013      	b.n	8002fa6 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a11      	ldr	r2, [pc, #68]	; (8002fc8 <HAL_ADC_Start_DMA+0x1d8>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d10e      	bne.n	8002fa6 <HAL_ADC_Start_DMA+0x1b6>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d107      	bne.n	8002fa6 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002fa4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3718      	adds	r7, #24
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	2000003c 	.word	0x2000003c
 8002fb4:	431bde83 	.word	0x431bde83
 8002fb8:	40012300 	.word	0x40012300
 8002fbc:	0800346d 	.word	0x0800346d
 8002fc0:	08003527 	.word	0x08003527
 8002fc4:	08003543 	.word	0x08003543
 8002fc8:	40012000 	.word	0x40012000
 8002fcc:	40012100 	.word	0x40012100
 8002fd0:	40012200 	.word	0x40012200

08002fd4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800301a:	2300      	movs	r3, #0
 800301c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003024:	2b01      	cmp	r3, #1
 8003026:	d101      	bne.n	800302c <HAL_ADC_ConfigChannel+0x1c>
 8003028:	2302      	movs	r3, #2
 800302a:	e113      	b.n	8003254 <HAL_ADC_ConfigChannel+0x244>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b09      	cmp	r3, #9
 800303a:	d925      	bls.n	8003088 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68d9      	ldr	r1, [r3, #12]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	b29b      	uxth	r3, r3
 8003048:	461a      	mov	r2, r3
 800304a:	4613      	mov	r3, r2
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	4413      	add	r3, r2
 8003050:	3b1e      	subs	r3, #30
 8003052:	2207      	movs	r2, #7
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	43da      	mvns	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	400a      	ands	r2, r1
 8003060:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68d9      	ldr	r1, [r3, #12]
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	b29b      	uxth	r3, r3
 8003072:	4618      	mov	r0, r3
 8003074:	4603      	mov	r3, r0
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	4403      	add	r3, r0
 800307a:	3b1e      	subs	r3, #30
 800307c:	409a      	lsls	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	60da      	str	r2, [r3, #12]
 8003086:	e022      	b.n	80030ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6919      	ldr	r1, [r3, #16]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	b29b      	uxth	r3, r3
 8003094:	461a      	mov	r2, r3
 8003096:	4613      	mov	r3, r2
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	4413      	add	r3, r2
 800309c:	2207      	movs	r2, #7
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	43da      	mvns	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	400a      	ands	r2, r1
 80030aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6919      	ldr	r1, [r3, #16]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	689a      	ldr	r2, [r3, #8]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	4618      	mov	r0, r3
 80030be:	4603      	mov	r3, r0
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	4403      	add	r3, r0
 80030c4:	409a      	lsls	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b06      	cmp	r3, #6
 80030d4:	d824      	bhi.n	8003120 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685a      	ldr	r2, [r3, #4]
 80030e0:	4613      	mov	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4413      	add	r3, r2
 80030e6:	3b05      	subs	r3, #5
 80030e8:	221f      	movs	r2, #31
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	43da      	mvns	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	400a      	ands	r2, r1
 80030f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	b29b      	uxth	r3, r3
 8003104:	4618      	mov	r0, r3
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	4613      	mov	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	3b05      	subs	r3, #5
 8003112:	fa00 f203 	lsl.w	r2, r0, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	635a      	str	r2, [r3, #52]	; 0x34
 800311e:	e04c      	b.n	80031ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2b0c      	cmp	r3, #12
 8003126:	d824      	bhi.n	8003172 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	4613      	mov	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	3b23      	subs	r3, #35	; 0x23
 800313a:	221f      	movs	r2, #31
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	43da      	mvns	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	400a      	ands	r2, r1
 8003148:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	b29b      	uxth	r3, r3
 8003156:	4618      	mov	r0, r3
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	4613      	mov	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	3b23      	subs	r3, #35	; 0x23
 8003164:	fa00 f203 	lsl.w	r2, r0, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	631a      	str	r2, [r3, #48]	; 0x30
 8003170:	e023      	b.n	80031ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	3b41      	subs	r3, #65	; 0x41
 8003184:	221f      	movs	r2, #31
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	43da      	mvns	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	400a      	ands	r2, r1
 8003192:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	b29b      	uxth	r3, r3
 80031a0:	4618      	mov	r0, r3
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	4613      	mov	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	3b41      	subs	r3, #65	; 0x41
 80031ae:	fa00 f203 	lsl.w	r2, r0, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031ba:	4b29      	ldr	r3, [pc, #164]	; (8003260 <HAL_ADC_ConfigChannel+0x250>)
 80031bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a28      	ldr	r2, [pc, #160]	; (8003264 <HAL_ADC_ConfigChannel+0x254>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d10f      	bne.n	80031e8 <HAL_ADC_ConfigChannel+0x1d8>
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2b12      	cmp	r3, #18
 80031ce:	d10b      	bne.n	80031e8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a1d      	ldr	r2, [pc, #116]	; (8003264 <HAL_ADC_ConfigChannel+0x254>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d12b      	bne.n	800324a <HAL_ADC_ConfigChannel+0x23a>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a1c      	ldr	r2, [pc, #112]	; (8003268 <HAL_ADC_ConfigChannel+0x258>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d003      	beq.n	8003204 <HAL_ADC_ConfigChannel+0x1f4>
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2b11      	cmp	r3, #17
 8003202:	d122      	bne.n	800324a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a11      	ldr	r2, [pc, #68]	; (8003268 <HAL_ADC_ConfigChannel+0x258>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d111      	bne.n	800324a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003226:	4b11      	ldr	r3, [pc, #68]	; (800326c <HAL_ADC_ConfigChannel+0x25c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a11      	ldr	r2, [pc, #68]	; (8003270 <HAL_ADC_ConfigChannel+0x260>)
 800322c:	fba2 2303 	umull	r2, r3, r2, r3
 8003230:	0c9a      	lsrs	r2, r3, #18
 8003232:	4613      	mov	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4413      	add	r3, r2
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800323c:	e002      	b.n	8003244 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	3b01      	subs	r3, #1
 8003242:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1f9      	bne.n	800323e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	40012300 	.word	0x40012300
 8003264:	40012000 	.word	0x40012000
 8003268:	10000012 	.word	0x10000012
 800326c:	2000003c 	.word	0x2000003c
 8003270:	431bde83 	.word	0x431bde83

08003274 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800327c:	4b79      	ldr	r3, [pc, #484]	; (8003464 <ADC_Init+0x1f0>)
 800327e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	431a      	orrs	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6859      	ldr	r1, [r3, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	021a      	lsls	r2, r3, #8
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80032cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6859      	ldr	r1, [r3, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689a      	ldr	r2, [r3, #8]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6899      	ldr	r1, [r3, #8]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003306:	4a58      	ldr	r2, [pc, #352]	; (8003468 <ADC_Init+0x1f4>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d022      	beq.n	8003352 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800331a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6899      	ldr	r1, [r3, #8]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800333c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6899      	ldr	r1, [r3, #8]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	609a      	str	r2, [r3, #8]
 8003350:	e00f      	b.n	8003372 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003360:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003370:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 0202 	bic.w	r2, r2, #2
 8003380:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6899      	ldr	r1, [r3, #8]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	7e1b      	ldrb	r3, [r3, #24]
 800338c:	005a      	lsls	r2, r3, #1
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 3020 	ldrb.w	r3, [r3, #32]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d01b      	beq.n	80033d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80033be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6859      	ldr	r1, [r3, #4]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	3b01      	subs	r3, #1
 80033cc:	035a      	lsls	r2, r3, #13
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	e007      	b.n	80033e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80033f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	3b01      	subs	r3, #1
 8003404:	051a      	lsls	r2, r3, #20
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800341c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6899      	ldr	r1, [r3, #8]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800342a:	025a      	lsls	r2, r3, #9
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	430a      	orrs	r2, r1
 8003432:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003442:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6899      	ldr	r1, [r3, #8]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	029a      	lsls	r2, r3, #10
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	609a      	str	r2, [r3, #8]
}
 8003458:	bf00      	nop
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	40012300 	.word	0x40012300
 8003468:	0f000001 	.word	0x0f000001

0800346c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003478:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003482:	2b00      	cmp	r3, #0
 8003484:	d13c      	bne.n	8003500 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d12b      	bne.n	80034f8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d127      	bne.n	80034f8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d006      	beq.n	80034c4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d119      	bne.n	80034f8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0220 	bic.w	r2, r2, #32
 80034d2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d105      	bne.n	80034f8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f0:	f043 0201 	orr.w	r2, r3, #1
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f7ff fd6b 	bl	8002fd4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80034fe:	e00e      	b.n	800351e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003504:	f003 0310 	and.w	r3, r3, #16
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f7ff fd75 	bl	8002ffc <HAL_ADC_ErrorCallback>
}
 8003512:	e004      	b.n	800351e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	4798      	blx	r3
}
 800351e:	bf00      	nop
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b084      	sub	sp, #16
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003532:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f7ff fd57 	bl	8002fe8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800353a:	bf00      	nop
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b084      	sub	sp, #16
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2240      	movs	r2, #64	; 0x40
 8003554:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355a:	f043 0204 	orr.w	r2, r3, #4
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f7ff fd4a 	bl	8002ffc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003568:	bf00      	nop
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003580:	4b0c      	ldr	r3, [pc, #48]	; (80035b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800358c:	4013      	ands	r3, r2
 800358e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003598:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800359c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035a2:	4a04      	ldr	r2, [pc, #16]	; (80035b4 <__NVIC_SetPriorityGrouping+0x44>)
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	60d3      	str	r3, [r2, #12]
}
 80035a8:	bf00      	nop
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	e000ed00 	.word	0xe000ed00

080035b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035bc:	4b04      	ldr	r3, [pc, #16]	; (80035d0 <__NVIC_GetPriorityGrouping+0x18>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	0a1b      	lsrs	r3, r3, #8
 80035c2:	f003 0307 	and.w	r3, r3, #7
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr
 80035d0:	e000ed00 	.word	0xe000ed00

080035d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	4603      	mov	r3, r0
 80035dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	db0b      	blt.n	80035fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035e6:	79fb      	ldrb	r3, [r7, #7]
 80035e8:	f003 021f 	and.w	r2, r3, #31
 80035ec:	4907      	ldr	r1, [pc, #28]	; (800360c <__NVIC_EnableIRQ+0x38>)
 80035ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f2:	095b      	lsrs	r3, r3, #5
 80035f4:	2001      	movs	r0, #1
 80035f6:	fa00 f202 	lsl.w	r2, r0, r2
 80035fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	e000e100 	.word	0xe000e100

08003610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	4603      	mov	r3, r0
 8003618:	6039      	str	r1, [r7, #0]
 800361a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800361c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003620:	2b00      	cmp	r3, #0
 8003622:	db0a      	blt.n	800363a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	b2da      	uxtb	r2, r3
 8003628:	490c      	ldr	r1, [pc, #48]	; (800365c <__NVIC_SetPriority+0x4c>)
 800362a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362e:	0112      	lsls	r2, r2, #4
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	440b      	add	r3, r1
 8003634:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003638:	e00a      	b.n	8003650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	b2da      	uxtb	r2, r3
 800363e:	4908      	ldr	r1, [pc, #32]	; (8003660 <__NVIC_SetPriority+0x50>)
 8003640:	79fb      	ldrb	r3, [r7, #7]
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	3b04      	subs	r3, #4
 8003648:	0112      	lsls	r2, r2, #4
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	440b      	add	r3, r1
 800364e:	761a      	strb	r2, [r3, #24]
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	e000e100 	.word	0xe000e100
 8003660:	e000ed00 	.word	0xe000ed00

08003664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003664:	b480      	push	{r7}
 8003666:	b089      	sub	sp, #36	; 0x24
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f003 0307 	and.w	r3, r3, #7
 8003676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	f1c3 0307 	rsb	r3, r3, #7
 800367e:	2b04      	cmp	r3, #4
 8003680:	bf28      	it	cs
 8003682:	2304      	movcs	r3, #4
 8003684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	3304      	adds	r3, #4
 800368a:	2b06      	cmp	r3, #6
 800368c:	d902      	bls.n	8003694 <NVIC_EncodePriority+0x30>
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	3b03      	subs	r3, #3
 8003692:	e000      	b.n	8003696 <NVIC_EncodePriority+0x32>
 8003694:	2300      	movs	r3, #0
 8003696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003698:	f04f 32ff 	mov.w	r2, #4294967295
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	43da      	mvns	r2, r3
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	401a      	ands	r2, r3
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036ac:	f04f 31ff 	mov.w	r1, #4294967295
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	fa01 f303 	lsl.w	r3, r1, r3
 80036b6:	43d9      	mvns	r1, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036bc:	4313      	orrs	r3, r2
         );
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3724      	adds	r7, #36	; 0x24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
	...

080036cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036dc:	d301      	bcc.n	80036e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036de:	2301      	movs	r3, #1
 80036e0:	e00f      	b.n	8003702 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036e2:	4a0a      	ldr	r2, [pc, #40]	; (800370c <SysTick_Config+0x40>)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036ea:	210f      	movs	r1, #15
 80036ec:	f04f 30ff 	mov.w	r0, #4294967295
 80036f0:	f7ff ff8e 	bl	8003610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036f4:	4b05      	ldr	r3, [pc, #20]	; (800370c <SysTick_Config+0x40>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036fa:	4b04      	ldr	r3, [pc, #16]	; (800370c <SysTick_Config+0x40>)
 80036fc:	2207      	movs	r2, #7
 80036fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	e000e010 	.word	0xe000e010

08003710 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7ff ff29 	bl	8003570 <__NVIC_SetPriorityGrouping>
}
 800371e:	bf00      	nop
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003726:	b580      	push	{r7, lr}
 8003728:	b086      	sub	sp, #24
 800372a:	af00      	add	r7, sp, #0
 800372c:	4603      	mov	r3, r0
 800372e:	60b9      	str	r1, [r7, #8]
 8003730:	607a      	str	r2, [r7, #4]
 8003732:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003734:	2300      	movs	r3, #0
 8003736:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003738:	f7ff ff3e 	bl	80035b8 <__NVIC_GetPriorityGrouping>
 800373c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	68b9      	ldr	r1, [r7, #8]
 8003742:	6978      	ldr	r0, [r7, #20]
 8003744:	f7ff ff8e 	bl	8003664 <NVIC_EncodePriority>
 8003748:	4602      	mov	r2, r0
 800374a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800374e:	4611      	mov	r1, r2
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff ff5d 	bl	8003610 <__NVIC_SetPriority>
}
 8003756:	bf00      	nop
 8003758:	3718      	adds	r7, #24
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b082      	sub	sp, #8
 8003762:	af00      	add	r7, sp, #0
 8003764:	4603      	mov	r3, r0
 8003766:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff ff31 	bl	80035d4 <__NVIC_EnableIRQ>
}
 8003772:	bf00      	nop
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b082      	sub	sp, #8
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7ff ffa2 	bl	80036cc <SysTick_Config>
 8003788:	4603      	mov	r3, r0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
	...

08003794 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80037a0:	f7ff fab4 	bl	8002d0c <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e099      	b.n	80038e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2202      	movs	r2, #2
 80037bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0201 	bic.w	r2, r2, #1
 80037ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037d0:	e00f      	b.n	80037f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037d2:	f7ff fa9b 	bl	8002d0c <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b05      	cmp	r3, #5
 80037de:	d908      	bls.n	80037f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2220      	movs	r2, #32
 80037e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2203      	movs	r2, #3
 80037ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e078      	b.n	80038e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1e8      	bne.n	80037d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	4b38      	ldr	r3, [pc, #224]	; (80038ec <HAL_DMA_Init+0x158>)
 800380c:	4013      	ands	r3, r2
 800380e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800381e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800382a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003836:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	4313      	orrs	r3, r2
 8003842:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	2b04      	cmp	r3, #4
 800384a:	d107      	bne.n	800385c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003854:	4313      	orrs	r3, r2
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	4313      	orrs	r3, r2
 800385a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f023 0307 	bic.w	r3, r3, #7
 8003872:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	4313      	orrs	r3, r2
 800387c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003882:	2b04      	cmp	r3, #4
 8003884:	d117      	bne.n	80038b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	4313      	orrs	r3, r2
 800388e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00e      	beq.n	80038b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 fa91 	bl	8003dc0 <DMA_CheckFifoParam>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d008      	beq.n	80038b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2240      	movs	r2, #64	; 0x40
 80038a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80038b2:	2301      	movs	r3, #1
 80038b4:	e016      	b.n	80038e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 fa48 	bl	8003d54 <DMA_CalcBaseAndBitshift>
 80038c4:	4603      	mov	r3, r0
 80038c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038cc:	223f      	movs	r2, #63	; 0x3f
 80038ce:	409a      	lsls	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	f010803f 	.word	0xf010803f

080038f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
 80038fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038fe:	2300      	movs	r3, #0
 8003900:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003906:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800390e:	2b01      	cmp	r3, #1
 8003910:	d101      	bne.n	8003916 <HAL_DMA_Start_IT+0x26>
 8003912:	2302      	movs	r3, #2
 8003914:	e040      	b.n	8003998 <HAL_DMA_Start_IT+0xa8>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b01      	cmp	r3, #1
 8003928:	d12f      	bne.n	800398a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2202      	movs	r2, #2
 800392e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	68b9      	ldr	r1, [r7, #8]
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 f9da 	bl	8003cf8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003948:	223f      	movs	r2, #63	; 0x3f
 800394a:	409a      	lsls	r2, r3
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f042 0216 	orr.w	r2, r2, #22
 800395e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003964:	2b00      	cmp	r3, #0
 8003966:	d007      	beq.n	8003978 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 0208 	orr.w	r2, r2, #8
 8003976:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 0201 	orr.w	r2, r2, #1
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	e005      	b.n	8003996 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003992:	2302      	movs	r3, #2
 8003994:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003996:	7dfb      	ldrb	r3, [r7, #23]
}
 8003998:	4618      	mov	r0, r3
 800399a:	3718      	adds	r7, #24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d004      	beq.n	80039be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2280      	movs	r2, #128	; 0x80
 80039b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e00c      	b.n	80039d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2205      	movs	r2, #5
 80039c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0201 	bic.w	r2, r2, #1
 80039d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80039ec:	2300      	movs	r3, #0
 80039ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039f0:	4b92      	ldr	r3, [pc, #584]	; (8003c3c <HAL_DMA_IRQHandler+0x258>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a92      	ldr	r2, [pc, #584]	; (8003c40 <HAL_DMA_IRQHandler+0x25c>)
 80039f6:	fba2 2303 	umull	r2, r3, r2, r3
 80039fa:	0a9b      	lsrs	r3, r3, #10
 80039fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a0e:	2208      	movs	r2, #8
 8003a10:	409a      	lsls	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4013      	ands	r3, r2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d01a      	beq.n	8003a50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d013      	beq.n	8003a50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0204 	bic.w	r2, r2, #4
 8003a36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3c:	2208      	movs	r2, #8
 8003a3e:	409a      	lsls	r2, r3
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a48:	f043 0201 	orr.w	r2, r3, #1
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a54:	2201      	movs	r2, #1
 8003a56:	409a      	lsls	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d012      	beq.n	8003a86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00b      	beq.n	8003a86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a72:	2201      	movs	r2, #1
 8003a74:	409a      	lsls	r2, r3
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a7e:	f043 0202 	orr.w	r2, r3, #2
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8a:	2204      	movs	r2, #4
 8003a8c:	409a      	lsls	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	4013      	ands	r3, r2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d012      	beq.n	8003abc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00b      	beq.n	8003abc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa8:	2204      	movs	r2, #4
 8003aaa:	409a      	lsls	r2, r3
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab4:	f043 0204 	orr.w	r2, r3, #4
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac0:	2210      	movs	r2, #16
 8003ac2:	409a      	lsls	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d043      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0308 	and.w	r3, r3, #8
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d03c      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ade:	2210      	movs	r2, #16
 8003ae0:	409a      	lsls	r2, r3
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d018      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d108      	bne.n	8003b14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d024      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	4798      	blx	r3
 8003b12:	e01f      	b.n	8003b54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d01b      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	4798      	blx	r3
 8003b24:	e016      	b.n	8003b54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d107      	bne.n	8003b44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0208 	bic.w	r2, r2, #8
 8003b42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b58:	2220      	movs	r2, #32
 8003b5a:	409a      	lsls	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 808e 	beq.w	8003c82 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0310 	and.w	r3, r3, #16
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 8086 	beq.w	8003c82 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	409a      	lsls	r2, r3
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b05      	cmp	r3, #5
 8003b8c:	d136      	bne.n	8003bfc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 0216 	bic.w	r2, r2, #22
 8003b9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695a      	ldr	r2, [r3, #20]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d103      	bne.n	8003bbe <HAL_DMA_IRQHandler+0x1da>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d007      	beq.n	8003bce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 0208 	bic.w	r2, r2, #8
 8003bcc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd2:	223f      	movs	r2, #63	; 0x3f
 8003bd4:	409a      	lsls	r2, r3
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d07d      	beq.n	8003cee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	4798      	blx	r3
        }
        return;
 8003bfa:	e078      	b.n	8003cee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d01c      	beq.n	8003c44 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d108      	bne.n	8003c2a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d030      	beq.n	8003c82 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	4798      	blx	r3
 8003c28:	e02b      	b.n	8003c82 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d027      	beq.n	8003c82 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	4798      	blx	r3
 8003c3a:	e022      	b.n	8003c82 <HAL_DMA_IRQHandler+0x29e>
 8003c3c:	2000003c 	.word	0x2000003c
 8003c40:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10f      	bne.n	8003c72 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0210 	bic.w	r2, r2, #16
 8003c60:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d032      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d022      	beq.n	8003cdc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2205      	movs	r2, #5
 8003c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 0201 	bic.w	r2, r2, #1
 8003cac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	60bb      	str	r3, [r7, #8]
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d307      	bcc.n	8003cca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1f2      	bne.n	8003cae <HAL_DMA_IRQHandler+0x2ca>
 8003cc8:	e000      	b.n	8003ccc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003cca:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d005      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	4798      	blx	r3
 8003cec:	e000      	b.n	8003cf0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003cee:	bf00      	nop
    }
  }
}
 8003cf0:	3718      	adds	r7, #24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop

08003cf8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
 8003d04:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d14:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	2b40      	cmp	r3, #64	; 0x40
 8003d24:	d108      	bne.n	8003d38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d36:	e007      	b.n	8003d48 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	60da      	str	r2, [r3, #12]
}
 8003d48:	bf00      	nop
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	3b10      	subs	r3, #16
 8003d64:	4a14      	ldr	r2, [pc, #80]	; (8003db8 <DMA_CalcBaseAndBitshift+0x64>)
 8003d66:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6a:	091b      	lsrs	r3, r3, #4
 8003d6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d6e:	4a13      	ldr	r2, [pc, #76]	; (8003dbc <DMA_CalcBaseAndBitshift+0x68>)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	4413      	add	r3, r2
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	461a      	mov	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2b03      	cmp	r3, #3
 8003d80:	d909      	bls.n	8003d96 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d8a:	f023 0303 	bic.w	r3, r3, #3
 8003d8e:	1d1a      	adds	r2, r3, #4
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	659a      	str	r2, [r3, #88]	; 0x58
 8003d94:	e007      	b.n	8003da6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d9e:	f023 0303 	bic.w	r3, r3, #3
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3714      	adds	r7, #20
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	aaaaaaab 	.word	0xaaaaaaab
 8003dbc:	0800a708 	.word	0x0800a708

08003dc0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d11f      	bne.n	8003e1a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	2b03      	cmp	r3, #3
 8003dde:	d855      	bhi.n	8003e8c <DMA_CheckFifoParam+0xcc>
 8003de0:	a201      	add	r2, pc, #4	; (adr r2, 8003de8 <DMA_CheckFifoParam+0x28>)
 8003de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de6:	bf00      	nop
 8003de8:	08003df9 	.word	0x08003df9
 8003dec:	08003e0b 	.word	0x08003e0b
 8003df0:	08003df9 	.word	0x08003df9
 8003df4:	08003e8d 	.word	0x08003e8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d045      	beq.n	8003e90 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e08:	e042      	b.n	8003e90 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e12:	d13f      	bne.n	8003e94 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e18:	e03c      	b.n	8003e94 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e22:	d121      	bne.n	8003e68 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	2b03      	cmp	r3, #3
 8003e28:	d836      	bhi.n	8003e98 <DMA_CheckFifoParam+0xd8>
 8003e2a:	a201      	add	r2, pc, #4	; (adr r2, 8003e30 <DMA_CheckFifoParam+0x70>)
 8003e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e30:	08003e41 	.word	0x08003e41
 8003e34:	08003e47 	.word	0x08003e47
 8003e38:	08003e41 	.word	0x08003e41
 8003e3c:	08003e59 	.word	0x08003e59
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	73fb      	strb	r3, [r7, #15]
      break;
 8003e44:	e02f      	b.n	8003ea6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d024      	beq.n	8003e9c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e56:	e021      	b.n	8003e9c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e60:	d11e      	bne.n	8003ea0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e66:	e01b      	b.n	8003ea0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d902      	bls.n	8003e74 <DMA_CheckFifoParam+0xb4>
 8003e6e:	2b03      	cmp	r3, #3
 8003e70:	d003      	beq.n	8003e7a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e72:	e018      	b.n	8003ea6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	73fb      	strb	r3, [r7, #15]
      break;
 8003e78:	e015      	b.n	8003ea6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00e      	beq.n	8003ea4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	73fb      	strb	r3, [r7, #15]
      break;
 8003e8a:	e00b      	b.n	8003ea4 <DMA_CheckFifoParam+0xe4>
      break;
 8003e8c:	bf00      	nop
 8003e8e:	e00a      	b.n	8003ea6 <DMA_CheckFifoParam+0xe6>
      break;
 8003e90:	bf00      	nop
 8003e92:	e008      	b.n	8003ea6 <DMA_CheckFifoParam+0xe6>
      break;
 8003e94:	bf00      	nop
 8003e96:	e006      	b.n	8003ea6 <DMA_CheckFifoParam+0xe6>
      break;
 8003e98:	bf00      	nop
 8003e9a:	e004      	b.n	8003ea6 <DMA_CheckFifoParam+0xe6>
      break;
 8003e9c:	bf00      	nop
 8003e9e:	e002      	b.n	8003ea6 <DMA_CheckFifoParam+0xe6>
      break;   
 8003ea0:	bf00      	nop
 8003ea2:	e000      	b.n	8003ea6 <DMA_CheckFifoParam+0xe6>
      break;
 8003ea4:	bf00      	nop
    }
  } 
  
  return status; 
 8003ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3714      	adds	r7, #20
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b089      	sub	sp, #36	; 0x24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003eca:	2300      	movs	r3, #0
 8003ecc:	61fb      	str	r3, [r7, #28]
 8003ece:	e165      	b.n	800419c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	f040 8154 	bne.w	8004196 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d00b      	beq.n	8003f0e <HAL_GPIO_Init+0x5a>
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d007      	beq.n	8003f0e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f02:	2b11      	cmp	r3, #17
 8003f04:	d003      	beq.n	8003f0e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2b12      	cmp	r3, #18
 8003f0c:	d130      	bne.n	8003f70 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	2203      	movs	r2, #3
 8003f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1e:	43db      	mvns	r3, r3
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	4013      	ands	r3, r2
 8003f24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	68da      	ldr	r2, [r3, #12]
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f44:	2201      	movs	r2, #1
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4c:	43db      	mvns	r3, r3
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	4013      	ands	r3, r2
 8003f52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	091b      	lsrs	r3, r3, #4
 8003f5a:	f003 0201 	and.w	r2, r3, #1
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	2203      	movs	r2, #3
 8003f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f80:	43db      	mvns	r3, r3
 8003f82:	69ba      	ldr	r2, [r7, #24]
 8003f84:	4013      	ands	r3, r2
 8003f86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	fa02 f303 	lsl.w	r3, r2, r3
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d003      	beq.n	8003fb0 <HAL_GPIO_Init+0xfc>
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	2b12      	cmp	r3, #18
 8003fae:	d123      	bne.n	8003ff8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	08da      	lsrs	r2, r3, #3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3208      	adds	r2, #8
 8003fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	f003 0307 	and.w	r3, r3, #7
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	220f      	movs	r2, #15
 8003fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	691a      	ldr	r2, [r3, #16]
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	f003 0307 	and.w	r3, r3, #7
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	08da      	lsrs	r2, r3, #3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	3208      	adds	r2, #8
 8003ff2:	69b9      	ldr	r1, [r7, #24]
 8003ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	2203      	movs	r2, #3
 8004004:	fa02 f303 	lsl.w	r3, r2, r3
 8004008:	43db      	mvns	r3, r3
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	4013      	ands	r3, r2
 800400e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f003 0203 	and.w	r2, r3, #3
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	4313      	orrs	r3, r2
 8004024:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 80ae 	beq.w	8004196 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800403a:	2300      	movs	r3, #0
 800403c:	60fb      	str	r3, [r7, #12]
 800403e:	4b5c      	ldr	r3, [pc, #368]	; (80041b0 <HAL_GPIO_Init+0x2fc>)
 8004040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004042:	4a5b      	ldr	r2, [pc, #364]	; (80041b0 <HAL_GPIO_Init+0x2fc>)
 8004044:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004048:	6453      	str	r3, [r2, #68]	; 0x44
 800404a:	4b59      	ldr	r3, [pc, #356]	; (80041b0 <HAL_GPIO_Init+0x2fc>)
 800404c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800404e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004056:	4a57      	ldr	r2, [pc, #348]	; (80041b4 <HAL_GPIO_Init+0x300>)
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	089b      	lsrs	r3, r3, #2
 800405c:	3302      	adds	r3, #2
 800405e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004062:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	f003 0303 	and.w	r3, r3, #3
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	220f      	movs	r2, #15
 800406e:	fa02 f303 	lsl.w	r3, r2, r3
 8004072:	43db      	mvns	r3, r3
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	4013      	ands	r3, r2
 8004078:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a4e      	ldr	r2, [pc, #312]	; (80041b8 <HAL_GPIO_Init+0x304>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d025      	beq.n	80040ce <HAL_GPIO_Init+0x21a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a4d      	ldr	r2, [pc, #308]	; (80041bc <HAL_GPIO_Init+0x308>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d01f      	beq.n	80040ca <HAL_GPIO_Init+0x216>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a4c      	ldr	r2, [pc, #304]	; (80041c0 <HAL_GPIO_Init+0x30c>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d019      	beq.n	80040c6 <HAL_GPIO_Init+0x212>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a4b      	ldr	r2, [pc, #300]	; (80041c4 <HAL_GPIO_Init+0x310>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d013      	beq.n	80040c2 <HAL_GPIO_Init+0x20e>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a4a      	ldr	r2, [pc, #296]	; (80041c8 <HAL_GPIO_Init+0x314>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d00d      	beq.n	80040be <HAL_GPIO_Init+0x20a>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a49      	ldr	r2, [pc, #292]	; (80041cc <HAL_GPIO_Init+0x318>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d007      	beq.n	80040ba <HAL_GPIO_Init+0x206>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a48      	ldr	r2, [pc, #288]	; (80041d0 <HAL_GPIO_Init+0x31c>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d101      	bne.n	80040b6 <HAL_GPIO_Init+0x202>
 80040b2:	2306      	movs	r3, #6
 80040b4:	e00c      	b.n	80040d0 <HAL_GPIO_Init+0x21c>
 80040b6:	2307      	movs	r3, #7
 80040b8:	e00a      	b.n	80040d0 <HAL_GPIO_Init+0x21c>
 80040ba:	2305      	movs	r3, #5
 80040bc:	e008      	b.n	80040d0 <HAL_GPIO_Init+0x21c>
 80040be:	2304      	movs	r3, #4
 80040c0:	e006      	b.n	80040d0 <HAL_GPIO_Init+0x21c>
 80040c2:	2303      	movs	r3, #3
 80040c4:	e004      	b.n	80040d0 <HAL_GPIO_Init+0x21c>
 80040c6:	2302      	movs	r3, #2
 80040c8:	e002      	b.n	80040d0 <HAL_GPIO_Init+0x21c>
 80040ca:	2301      	movs	r3, #1
 80040cc:	e000      	b.n	80040d0 <HAL_GPIO_Init+0x21c>
 80040ce:	2300      	movs	r3, #0
 80040d0:	69fa      	ldr	r2, [r7, #28]
 80040d2:	f002 0203 	and.w	r2, r2, #3
 80040d6:	0092      	lsls	r2, r2, #2
 80040d8:	4093      	lsls	r3, r2
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	4313      	orrs	r3, r2
 80040de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040e0:	4934      	ldr	r1, [pc, #208]	; (80041b4 <HAL_GPIO_Init+0x300>)
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	089b      	lsrs	r3, r3, #2
 80040e6:	3302      	adds	r3, #2
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040ee:	4b39      	ldr	r3, [pc, #228]	; (80041d4 <HAL_GPIO_Init+0x320>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	43db      	mvns	r3, r3
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	4013      	ands	r3, r2
 80040fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800410a:	69ba      	ldr	r2, [r7, #24]
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	4313      	orrs	r3, r2
 8004110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004112:	4a30      	ldr	r2, [pc, #192]	; (80041d4 <HAL_GPIO_Init+0x320>)
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004118:	4b2e      	ldr	r3, [pc, #184]	; (80041d4 <HAL_GPIO_Init+0x320>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	43db      	mvns	r3, r3
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	4013      	ands	r3, r2
 8004126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d003      	beq.n	800413c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	4313      	orrs	r3, r2
 800413a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800413c:	4a25      	ldr	r2, [pc, #148]	; (80041d4 <HAL_GPIO_Init+0x320>)
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004142:	4b24      	ldr	r3, [pc, #144]	; (80041d4 <HAL_GPIO_Init+0x320>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	43db      	mvns	r3, r3
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	4013      	ands	r3, r2
 8004150:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d003      	beq.n	8004166 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	4313      	orrs	r3, r2
 8004164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004166:	4a1b      	ldr	r2, [pc, #108]	; (80041d4 <HAL_GPIO_Init+0x320>)
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800416c:	4b19      	ldr	r3, [pc, #100]	; (80041d4 <HAL_GPIO_Init+0x320>)
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	43db      	mvns	r3, r3
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	4013      	ands	r3, r2
 800417a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d003      	beq.n	8004190 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	4313      	orrs	r3, r2
 800418e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004190:	4a10      	ldr	r2, [pc, #64]	; (80041d4 <HAL_GPIO_Init+0x320>)
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	3301      	adds	r3, #1
 800419a:	61fb      	str	r3, [r7, #28]
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	2b0f      	cmp	r3, #15
 80041a0:	f67f ae96 	bls.w	8003ed0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041a4:	bf00      	nop
 80041a6:	3724      	adds	r7, #36	; 0x24
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	40023800 	.word	0x40023800
 80041b4:	40013800 	.word	0x40013800
 80041b8:	40020000 	.word	0x40020000
 80041bc:	40020400 	.word	0x40020400
 80041c0:	40020800 	.word	0x40020800
 80041c4:	40020c00 	.word	0x40020c00
 80041c8:	40021000 	.word	0x40021000
 80041cc:	40021400 	.word	0x40021400
 80041d0:	40021800 	.word	0x40021800
 80041d4:	40013c00 	.word	0x40013c00

080041d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	460b      	mov	r3, r1
 80041e2:	807b      	strh	r3, [r7, #2]
 80041e4:	4613      	mov	r3, r2
 80041e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041e8:	787b      	ldrb	r3, [r7, #1]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041ee:	887a      	ldrh	r2, [r7, #2]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041f4:	e003      	b.n	80041fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041f6:	887b      	ldrh	r3, [r7, #2]
 80041f8:	041a      	lsls	r2, r3, #16
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	619a      	str	r2, [r3, #24]
}
 80041fe:	bf00      	nop
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800420a:	b480      	push	{r7}
 800420c:	b083      	sub	sp, #12
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
 8004212:	460b      	mov	r3, r1
 8004214:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	695a      	ldr	r2, [r3, #20]
 800421a:	887b      	ldrh	r3, [r7, #2]
 800421c:	401a      	ands	r2, r3
 800421e:	887b      	ldrh	r3, [r7, #2]
 8004220:	429a      	cmp	r2, r3
 8004222:	d104      	bne.n	800422e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004224:	887b      	ldrh	r3, [r7, #2]
 8004226:	041a      	lsls	r2, r3, #16
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800422c:	e002      	b.n	8004234 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800422e:	887a      	ldrh	r2, [r7, #2]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	619a      	str	r2, [r3, #24]
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e0cc      	b.n	80043ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004254:	4b68      	ldr	r3, [pc, #416]	; (80043f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 030f 	and.w	r3, r3, #15
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d90c      	bls.n	800427c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004262:	4b65      	ldr	r3, [pc, #404]	; (80043f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	b2d2      	uxtb	r2, r2
 8004268:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800426a:	4b63      	ldr	r3, [pc, #396]	; (80043f8 <HAL_RCC_ClockConfig+0x1b8>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 030f 	and.w	r3, r3, #15
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	429a      	cmp	r2, r3
 8004276:	d001      	beq.n	800427c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e0b8      	b.n	80043ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d020      	beq.n	80042ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0304 	and.w	r3, r3, #4
 8004290:	2b00      	cmp	r3, #0
 8004292:	d005      	beq.n	80042a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004294:	4b59      	ldr	r3, [pc, #356]	; (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	4a58      	ldr	r2, [pc, #352]	; (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 800429a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800429e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0308 	and.w	r3, r3, #8
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d005      	beq.n	80042b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042ac:	4b53      	ldr	r3, [pc, #332]	; (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	4a52      	ldr	r2, [pc, #328]	; (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 80042b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042b8:	4b50      	ldr	r3, [pc, #320]	; (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	494d      	ldr	r1, [pc, #308]	; (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d044      	beq.n	8004360 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d107      	bne.n	80042ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042de:	4b47      	ldr	r3, [pc, #284]	; (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d119      	bne.n	800431e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e07f      	b.n	80043ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d003      	beq.n	80042fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042fa:	2b03      	cmp	r3, #3
 80042fc:	d107      	bne.n	800430e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042fe:	4b3f      	ldr	r3, [pc, #252]	; (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d109      	bne.n	800431e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e06f      	b.n	80043ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800430e:	4b3b      	ldr	r3, [pc, #236]	; (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e067      	b.n	80043ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800431e:	4b37      	ldr	r3, [pc, #220]	; (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f023 0203 	bic.w	r2, r3, #3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	4934      	ldr	r1, [pc, #208]	; (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 800432c:	4313      	orrs	r3, r2
 800432e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004330:	f7fe fcec 	bl	8002d0c <HAL_GetTick>
 8004334:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004336:	e00a      	b.n	800434e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004338:	f7fe fce8 	bl	8002d0c <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	f241 3288 	movw	r2, #5000	; 0x1388
 8004346:	4293      	cmp	r3, r2
 8004348:	d901      	bls.n	800434e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e04f      	b.n	80043ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800434e:	4b2b      	ldr	r3, [pc, #172]	; (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f003 020c 	and.w	r2, r3, #12
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	429a      	cmp	r2, r3
 800435e:	d1eb      	bne.n	8004338 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004360:	4b25      	ldr	r3, [pc, #148]	; (80043f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 030f 	and.w	r3, r3, #15
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	429a      	cmp	r2, r3
 800436c:	d20c      	bcs.n	8004388 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800436e:	4b22      	ldr	r3, [pc, #136]	; (80043f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	b2d2      	uxtb	r2, r2
 8004374:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004376:	4b20      	ldr	r3, [pc, #128]	; (80043f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 030f 	and.w	r3, r3, #15
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	429a      	cmp	r2, r3
 8004382:	d001      	beq.n	8004388 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e032      	b.n	80043ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b00      	cmp	r3, #0
 8004392:	d008      	beq.n	80043a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004394:	4b19      	ldr	r3, [pc, #100]	; (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	4916      	ldr	r1, [pc, #88]	; (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0308 	and.w	r3, r3, #8
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d009      	beq.n	80043c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043b2:	4b12      	ldr	r3, [pc, #72]	; (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	490e      	ldr	r1, [pc, #56]	; (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043c6:	f000 f855 	bl	8004474 <HAL_RCC_GetSysClockFreq>
 80043ca:	4601      	mov	r1, r0
 80043cc:	4b0b      	ldr	r3, [pc, #44]	; (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	091b      	lsrs	r3, r3, #4
 80043d2:	f003 030f 	and.w	r3, r3, #15
 80043d6:	4a0a      	ldr	r2, [pc, #40]	; (8004400 <HAL_RCC_ClockConfig+0x1c0>)
 80043d8:	5cd3      	ldrb	r3, [r2, r3]
 80043da:	fa21 f303 	lsr.w	r3, r1, r3
 80043de:	4a09      	ldr	r2, [pc, #36]	; (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 80043e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043e2:	4b09      	ldr	r3, [pc, #36]	; (8004408 <HAL_RCC_ClockConfig+0x1c8>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fe fc4c 	bl	8002c84 <HAL_InitTick>

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	40023c00 	.word	0x40023c00
 80043fc:	40023800 	.word	0x40023800
 8004400:	0800a6f0 	.word	0x0800a6f0
 8004404:	2000003c 	.word	0x2000003c
 8004408:	20000040 	.word	0x20000040

0800440c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004410:	4b03      	ldr	r3, [pc, #12]	; (8004420 <HAL_RCC_GetHCLKFreq+0x14>)
 8004412:	681b      	ldr	r3, [r3, #0]
}
 8004414:	4618      	mov	r0, r3
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	2000003c 	.word	0x2000003c

08004424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004428:	f7ff fff0 	bl	800440c <HAL_RCC_GetHCLKFreq>
 800442c:	4601      	mov	r1, r0
 800442e:	4b05      	ldr	r3, [pc, #20]	; (8004444 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	0a9b      	lsrs	r3, r3, #10
 8004434:	f003 0307 	and.w	r3, r3, #7
 8004438:	4a03      	ldr	r2, [pc, #12]	; (8004448 <HAL_RCC_GetPCLK1Freq+0x24>)
 800443a:	5cd3      	ldrb	r3, [r2, r3]
 800443c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004440:	4618      	mov	r0, r3
 8004442:	bd80      	pop	{r7, pc}
 8004444:	40023800 	.word	0x40023800
 8004448:	0800a700 	.word	0x0800a700

0800444c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004450:	f7ff ffdc 	bl	800440c <HAL_RCC_GetHCLKFreq>
 8004454:	4601      	mov	r1, r0
 8004456:	4b05      	ldr	r3, [pc, #20]	; (800446c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	0b5b      	lsrs	r3, r3, #13
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	4a03      	ldr	r2, [pc, #12]	; (8004470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004462:	5cd3      	ldrb	r3, [r2, r3]
 8004464:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004468:	4618      	mov	r0, r3
 800446a:	bd80      	pop	{r7, pc}
 800446c:	40023800 	.word	0x40023800
 8004470:	0800a700 	.word	0x0800a700

08004474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004476:	b087      	sub	sp, #28
 8004478:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800447a:	2300      	movs	r3, #0
 800447c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800447e:	2300      	movs	r3, #0
 8004480:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8004482:	2300      	movs	r3, #0
 8004484:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8004486:	2300      	movs	r3, #0
 8004488:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800448a:	2300      	movs	r3, #0
 800448c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800448e:	4b9f      	ldr	r3, [pc, #636]	; (800470c <HAL_RCC_GetSysClockFreq+0x298>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f003 030c 	and.w	r3, r3, #12
 8004496:	2b0c      	cmp	r3, #12
 8004498:	f200 8130 	bhi.w	80046fc <HAL_RCC_GetSysClockFreq+0x288>
 800449c:	a201      	add	r2, pc, #4	; (adr r2, 80044a4 <HAL_RCC_GetSysClockFreq+0x30>)
 800449e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a2:	bf00      	nop
 80044a4:	080044d9 	.word	0x080044d9
 80044a8:	080046fd 	.word	0x080046fd
 80044ac:	080046fd 	.word	0x080046fd
 80044b0:	080046fd 	.word	0x080046fd
 80044b4:	080044df 	.word	0x080044df
 80044b8:	080046fd 	.word	0x080046fd
 80044bc:	080046fd 	.word	0x080046fd
 80044c0:	080046fd 	.word	0x080046fd
 80044c4:	080044e5 	.word	0x080044e5
 80044c8:	080046fd 	.word	0x080046fd
 80044cc:	080046fd 	.word	0x080046fd
 80044d0:	080046fd 	.word	0x080046fd
 80044d4:	080045f3 	.word	0x080045f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044d8:	4b8d      	ldr	r3, [pc, #564]	; (8004710 <HAL_RCC_GetSysClockFreq+0x29c>)
 80044da:	613b      	str	r3, [r7, #16]
       break;
 80044dc:	e111      	b.n	8004702 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044de:	4b8d      	ldr	r3, [pc, #564]	; (8004714 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80044e0:	613b      	str	r3, [r7, #16]
      break;
 80044e2:	e10e      	b.n	8004702 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044e4:	4b89      	ldr	r3, [pc, #548]	; (800470c <HAL_RCC_GetSysClockFreq+0x298>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044ec:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044ee:	4b87      	ldr	r3, [pc, #540]	; (800470c <HAL_RCC_GetSysClockFreq+0x298>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d023      	beq.n	8004542 <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044fa:	4b84      	ldr	r3, [pc, #528]	; (800470c <HAL_RCC_GetSysClockFreq+0x298>)
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	099b      	lsrs	r3, r3, #6
 8004500:	f04f 0400 	mov.w	r4, #0
 8004504:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004508:	f04f 0200 	mov.w	r2, #0
 800450c:	ea03 0501 	and.w	r5, r3, r1
 8004510:	ea04 0602 	and.w	r6, r4, r2
 8004514:	4a7f      	ldr	r2, [pc, #508]	; (8004714 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8004516:	fb02 f106 	mul.w	r1, r2, r6
 800451a:	2200      	movs	r2, #0
 800451c:	fb02 f205 	mul.w	r2, r2, r5
 8004520:	440a      	add	r2, r1
 8004522:	497c      	ldr	r1, [pc, #496]	; (8004714 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8004524:	fba5 0101 	umull	r0, r1, r5, r1
 8004528:	1853      	adds	r3, r2, r1
 800452a:	4619      	mov	r1, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f04f 0400 	mov.w	r4, #0
 8004532:	461a      	mov	r2, r3
 8004534:	4623      	mov	r3, r4
 8004536:	f7fc fbc7 	bl	8000cc8 <__aeabi_uldivmod>
 800453a:	4603      	mov	r3, r0
 800453c:	460c      	mov	r4, r1
 800453e:	617b      	str	r3, [r7, #20]
 8004540:	e049      	b.n	80045d6 <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004542:	4b72      	ldr	r3, [pc, #456]	; (800470c <HAL_RCC_GetSysClockFreq+0x298>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	099b      	lsrs	r3, r3, #6
 8004548:	f04f 0400 	mov.w	r4, #0
 800454c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004550:	f04f 0200 	mov.w	r2, #0
 8004554:	ea03 0501 	and.w	r5, r3, r1
 8004558:	ea04 0602 	and.w	r6, r4, r2
 800455c:	4629      	mov	r1, r5
 800455e:	4632      	mov	r2, r6
 8004560:	f04f 0300 	mov.w	r3, #0
 8004564:	f04f 0400 	mov.w	r4, #0
 8004568:	0154      	lsls	r4, r2, #5
 800456a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800456e:	014b      	lsls	r3, r1, #5
 8004570:	4619      	mov	r1, r3
 8004572:	4622      	mov	r2, r4
 8004574:	1b49      	subs	r1, r1, r5
 8004576:	eb62 0206 	sbc.w	r2, r2, r6
 800457a:	f04f 0300 	mov.w	r3, #0
 800457e:	f04f 0400 	mov.w	r4, #0
 8004582:	0194      	lsls	r4, r2, #6
 8004584:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004588:	018b      	lsls	r3, r1, #6
 800458a:	1a5b      	subs	r3, r3, r1
 800458c:	eb64 0402 	sbc.w	r4, r4, r2
 8004590:	f04f 0100 	mov.w	r1, #0
 8004594:	f04f 0200 	mov.w	r2, #0
 8004598:	00e2      	lsls	r2, r4, #3
 800459a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800459e:	00d9      	lsls	r1, r3, #3
 80045a0:	460b      	mov	r3, r1
 80045a2:	4614      	mov	r4, r2
 80045a4:	195b      	adds	r3, r3, r5
 80045a6:	eb44 0406 	adc.w	r4, r4, r6
 80045aa:	f04f 0100 	mov.w	r1, #0
 80045ae:	f04f 0200 	mov.w	r2, #0
 80045b2:	02a2      	lsls	r2, r4, #10
 80045b4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80045b8:	0299      	lsls	r1, r3, #10
 80045ba:	460b      	mov	r3, r1
 80045bc:	4614      	mov	r4, r2
 80045be:	4618      	mov	r0, r3
 80045c0:	4621      	mov	r1, r4
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f04f 0400 	mov.w	r4, #0
 80045c8:	461a      	mov	r2, r3
 80045ca:	4623      	mov	r3, r4
 80045cc:	f7fc fb7c 	bl	8000cc8 <__aeabi_uldivmod>
 80045d0:	4603      	mov	r3, r0
 80045d2:	460c      	mov	r4, r1
 80045d4:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045d6:	4b4d      	ldr	r3, [pc, #308]	; (800470c <HAL_RCC_GetSysClockFreq+0x298>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	0c1b      	lsrs	r3, r3, #16
 80045dc:	f003 0303 	and.w	r3, r3, #3
 80045e0:	3301      	adds	r3, #1
 80045e2:	005b      	lsls	r3, r3, #1
 80045e4:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ee:	613b      	str	r3, [r7, #16]
      break;
 80045f0:	e087      	b.n	8004702 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045f2:	4b46      	ldr	r3, [pc, #280]	; (800470c <HAL_RCC_GetSysClockFreq+0x298>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045fa:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045fc:	4b43      	ldr	r3, [pc, #268]	; (800470c <HAL_RCC_GetSysClockFreq+0x298>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d023      	beq.n	8004650 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004608:	4b40      	ldr	r3, [pc, #256]	; (800470c <HAL_RCC_GetSysClockFreq+0x298>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	099b      	lsrs	r3, r3, #6
 800460e:	f04f 0400 	mov.w	r4, #0
 8004612:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004616:	f04f 0200 	mov.w	r2, #0
 800461a:	ea03 0501 	and.w	r5, r3, r1
 800461e:	ea04 0602 	and.w	r6, r4, r2
 8004622:	4a3c      	ldr	r2, [pc, #240]	; (8004714 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8004624:	fb02 f106 	mul.w	r1, r2, r6
 8004628:	2200      	movs	r2, #0
 800462a:	fb02 f205 	mul.w	r2, r2, r5
 800462e:	440a      	add	r2, r1
 8004630:	4938      	ldr	r1, [pc, #224]	; (8004714 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8004632:	fba5 0101 	umull	r0, r1, r5, r1
 8004636:	1853      	adds	r3, r2, r1
 8004638:	4619      	mov	r1, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f04f 0400 	mov.w	r4, #0
 8004640:	461a      	mov	r2, r3
 8004642:	4623      	mov	r3, r4
 8004644:	f7fc fb40 	bl	8000cc8 <__aeabi_uldivmod>
 8004648:	4603      	mov	r3, r0
 800464a:	460c      	mov	r4, r1
 800464c:	617b      	str	r3, [r7, #20]
 800464e:	e049      	b.n	80046e4 <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004650:	4b2e      	ldr	r3, [pc, #184]	; (800470c <HAL_RCC_GetSysClockFreq+0x298>)
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	099b      	lsrs	r3, r3, #6
 8004656:	f04f 0400 	mov.w	r4, #0
 800465a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800465e:	f04f 0200 	mov.w	r2, #0
 8004662:	ea03 0501 	and.w	r5, r3, r1
 8004666:	ea04 0602 	and.w	r6, r4, r2
 800466a:	4629      	mov	r1, r5
 800466c:	4632      	mov	r2, r6
 800466e:	f04f 0300 	mov.w	r3, #0
 8004672:	f04f 0400 	mov.w	r4, #0
 8004676:	0154      	lsls	r4, r2, #5
 8004678:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800467c:	014b      	lsls	r3, r1, #5
 800467e:	4619      	mov	r1, r3
 8004680:	4622      	mov	r2, r4
 8004682:	1b49      	subs	r1, r1, r5
 8004684:	eb62 0206 	sbc.w	r2, r2, r6
 8004688:	f04f 0300 	mov.w	r3, #0
 800468c:	f04f 0400 	mov.w	r4, #0
 8004690:	0194      	lsls	r4, r2, #6
 8004692:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004696:	018b      	lsls	r3, r1, #6
 8004698:	1a5b      	subs	r3, r3, r1
 800469a:	eb64 0402 	sbc.w	r4, r4, r2
 800469e:	f04f 0100 	mov.w	r1, #0
 80046a2:	f04f 0200 	mov.w	r2, #0
 80046a6:	00e2      	lsls	r2, r4, #3
 80046a8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80046ac:	00d9      	lsls	r1, r3, #3
 80046ae:	460b      	mov	r3, r1
 80046b0:	4614      	mov	r4, r2
 80046b2:	195b      	adds	r3, r3, r5
 80046b4:	eb44 0406 	adc.w	r4, r4, r6
 80046b8:	f04f 0100 	mov.w	r1, #0
 80046bc:	f04f 0200 	mov.w	r2, #0
 80046c0:	02a2      	lsls	r2, r4, #10
 80046c2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80046c6:	0299      	lsls	r1, r3, #10
 80046c8:	460b      	mov	r3, r1
 80046ca:	4614      	mov	r4, r2
 80046cc:	4618      	mov	r0, r3
 80046ce:	4621      	mov	r1, r4
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f04f 0400 	mov.w	r4, #0
 80046d6:	461a      	mov	r2, r3
 80046d8:	4623      	mov	r3, r4
 80046da:	f7fc faf5 	bl	8000cc8 <__aeabi_uldivmod>
 80046de:	4603      	mov	r3, r0
 80046e0:	460c      	mov	r4, r1
 80046e2:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80046e4:	4b09      	ldr	r3, [pc, #36]	; (800470c <HAL_RCC_GetSysClockFreq+0x298>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	0f1b      	lsrs	r3, r3, #28
 80046ea:	f003 0307 	and.w	r3, r3, #7
 80046ee:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f8:	613b      	str	r3, [r7, #16]
      break;
 80046fa:	e002      	b.n	8004702 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046fc:	4b04      	ldr	r3, [pc, #16]	; (8004710 <HAL_RCC_GetSysClockFreq+0x29c>)
 80046fe:	613b      	str	r3, [r7, #16]
      break;
 8004700:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004702:	693b      	ldr	r3, [r7, #16]
}
 8004704:	4618      	mov	r0, r3
 8004706:	371c      	adds	r7, #28
 8004708:	46bd      	mov	sp, r7
 800470a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800470c:	40023800 	.word	0x40023800
 8004710:	00f42400 	.word	0x00f42400
 8004714:	017d7840 	.word	0x017d7840

08004718 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004720:	2300      	movs	r3, #0
 8004722:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 8083 	beq.w	8004838 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004732:	4b95      	ldr	r3, [pc, #596]	; (8004988 <HAL_RCC_OscConfig+0x270>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f003 030c 	and.w	r3, r3, #12
 800473a:	2b04      	cmp	r3, #4
 800473c:	d019      	beq.n	8004772 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800473e:	4b92      	ldr	r3, [pc, #584]	; (8004988 <HAL_RCC_OscConfig+0x270>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004746:	2b08      	cmp	r3, #8
 8004748:	d106      	bne.n	8004758 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800474a:	4b8f      	ldr	r3, [pc, #572]	; (8004988 <HAL_RCC_OscConfig+0x270>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004752:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004756:	d00c      	beq.n	8004772 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004758:	4b8b      	ldr	r3, [pc, #556]	; (8004988 <HAL_RCC_OscConfig+0x270>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004760:	2b0c      	cmp	r3, #12
 8004762:	d112      	bne.n	800478a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004764:	4b88      	ldr	r3, [pc, #544]	; (8004988 <HAL_RCC_OscConfig+0x270>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800476c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004770:	d10b      	bne.n	800478a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004772:	4b85      	ldr	r3, [pc, #532]	; (8004988 <HAL_RCC_OscConfig+0x270>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d05b      	beq.n	8004836 <HAL_RCC_OscConfig+0x11e>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d157      	bne.n	8004836 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e216      	b.n	8004bb8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004792:	d106      	bne.n	80047a2 <HAL_RCC_OscConfig+0x8a>
 8004794:	4b7c      	ldr	r3, [pc, #496]	; (8004988 <HAL_RCC_OscConfig+0x270>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a7b      	ldr	r2, [pc, #492]	; (8004988 <HAL_RCC_OscConfig+0x270>)
 800479a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800479e:	6013      	str	r3, [r2, #0]
 80047a0:	e01d      	b.n	80047de <HAL_RCC_OscConfig+0xc6>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047aa:	d10c      	bne.n	80047c6 <HAL_RCC_OscConfig+0xae>
 80047ac:	4b76      	ldr	r3, [pc, #472]	; (8004988 <HAL_RCC_OscConfig+0x270>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a75      	ldr	r2, [pc, #468]	; (8004988 <HAL_RCC_OscConfig+0x270>)
 80047b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047b6:	6013      	str	r3, [r2, #0]
 80047b8:	4b73      	ldr	r3, [pc, #460]	; (8004988 <HAL_RCC_OscConfig+0x270>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a72      	ldr	r2, [pc, #456]	; (8004988 <HAL_RCC_OscConfig+0x270>)
 80047be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047c2:	6013      	str	r3, [r2, #0]
 80047c4:	e00b      	b.n	80047de <HAL_RCC_OscConfig+0xc6>
 80047c6:	4b70      	ldr	r3, [pc, #448]	; (8004988 <HAL_RCC_OscConfig+0x270>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a6f      	ldr	r2, [pc, #444]	; (8004988 <HAL_RCC_OscConfig+0x270>)
 80047cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047d0:	6013      	str	r3, [r2, #0]
 80047d2:	4b6d      	ldr	r3, [pc, #436]	; (8004988 <HAL_RCC_OscConfig+0x270>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a6c      	ldr	r2, [pc, #432]	; (8004988 <HAL_RCC_OscConfig+0x270>)
 80047d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047dc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d013      	beq.n	800480e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e6:	f7fe fa91 	bl	8002d0c <HAL_GetTick>
 80047ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ec:	e008      	b.n	8004800 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047ee:	f7fe fa8d 	bl	8002d0c <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b64      	cmp	r3, #100	; 0x64
 80047fa:	d901      	bls.n	8004800 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e1db      	b.n	8004bb8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004800:	4b61      	ldr	r3, [pc, #388]	; (8004988 <HAL_RCC_OscConfig+0x270>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d0f0      	beq.n	80047ee <HAL_RCC_OscConfig+0xd6>
 800480c:	e014      	b.n	8004838 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480e:	f7fe fa7d 	bl	8002d0c <HAL_GetTick>
 8004812:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004814:	e008      	b.n	8004828 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004816:	f7fe fa79 	bl	8002d0c <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b64      	cmp	r3, #100	; 0x64
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e1c7      	b.n	8004bb8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004828:	4b57      	ldr	r3, [pc, #348]	; (8004988 <HAL_RCC_OscConfig+0x270>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1f0      	bne.n	8004816 <HAL_RCC_OscConfig+0xfe>
 8004834:	e000      	b.n	8004838 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004836:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d06f      	beq.n	8004924 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004844:	4b50      	ldr	r3, [pc, #320]	; (8004988 <HAL_RCC_OscConfig+0x270>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f003 030c 	and.w	r3, r3, #12
 800484c:	2b00      	cmp	r3, #0
 800484e:	d017      	beq.n	8004880 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004850:	4b4d      	ldr	r3, [pc, #308]	; (8004988 <HAL_RCC_OscConfig+0x270>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004858:	2b08      	cmp	r3, #8
 800485a:	d105      	bne.n	8004868 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800485c:	4b4a      	ldr	r3, [pc, #296]	; (8004988 <HAL_RCC_OscConfig+0x270>)
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00b      	beq.n	8004880 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004868:	4b47      	ldr	r3, [pc, #284]	; (8004988 <HAL_RCC_OscConfig+0x270>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004870:	2b0c      	cmp	r3, #12
 8004872:	d11c      	bne.n	80048ae <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004874:	4b44      	ldr	r3, [pc, #272]	; (8004988 <HAL_RCC_OscConfig+0x270>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d116      	bne.n	80048ae <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004880:	4b41      	ldr	r3, [pc, #260]	; (8004988 <HAL_RCC_OscConfig+0x270>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d005      	beq.n	8004898 <HAL_RCC_OscConfig+0x180>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d001      	beq.n	8004898 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e18f      	b.n	8004bb8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004898:	4b3b      	ldr	r3, [pc, #236]	; (8004988 <HAL_RCC_OscConfig+0x270>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	00db      	lsls	r3, r3, #3
 80048a6:	4938      	ldr	r1, [pc, #224]	; (8004988 <HAL_RCC_OscConfig+0x270>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ac:	e03a      	b.n	8004924 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d020      	beq.n	80048f8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048b6:	4b35      	ldr	r3, [pc, #212]	; (800498c <HAL_RCC_OscConfig+0x274>)
 80048b8:	2201      	movs	r2, #1
 80048ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048bc:	f7fe fa26 	bl	8002d0c <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048c4:	f7fe fa22 	bl	8002d0c <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e170      	b.n	8004bb8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048d6:	4b2c      	ldr	r3, [pc, #176]	; (8004988 <HAL_RCC_OscConfig+0x270>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d0f0      	beq.n	80048c4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048e2:	4b29      	ldr	r3, [pc, #164]	; (8004988 <HAL_RCC_OscConfig+0x270>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	4925      	ldr	r1, [pc, #148]	; (8004988 <HAL_RCC_OscConfig+0x270>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	600b      	str	r3, [r1, #0]
 80048f6:	e015      	b.n	8004924 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048f8:	4b24      	ldr	r3, [pc, #144]	; (800498c <HAL_RCC_OscConfig+0x274>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048fe:	f7fe fa05 	bl	8002d0c <HAL_GetTick>
 8004902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004904:	e008      	b.n	8004918 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004906:	f7fe fa01 	bl	8002d0c <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	2b02      	cmp	r3, #2
 8004912:	d901      	bls.n	8004918 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e14f      	b.n	8004bb8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004918:	4b1b      	ldr	r3, [pc, #108]	; (8004988 <HAL_RCC_OscConfig+0x270>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1f0      	bne.n	8004906 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0308 	and.w	r3, r3, #8
 800492c:	2b00      	cmp	r3, #0
 800492e:	d037      	beq.n	80049a0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d016      	beq.n	8004966 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004938:	4b15      	ldr	r3, [pc, #84]	; (8004990 <HAL_RCC_OscConfig+0x278>)
 800493a:	2201      	movs	r2, #1
 800493c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800493e:	f7fe f9e5 	bl	8002d0c <HAL_GetTick>
 8004942:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004944:	e008      	b.n	8004958 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004946:	f7fe f9e1 	bl	8002d0c <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d901      	bls.n	8004958 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e12f      	b.n	8004bb8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004958:	4b0b      	ldr	r3, [pc, #44]	; (8004988 <HAL_RCC_OscConfig+0x270>)
 800495a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d0f0      	beq.n	8004946 <HAL_RCC_OscConfig+0x22e>
 8004964:	e01c      	b.n	80049a0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004966:	4b0a      	ldr	r3, [pc, #40]	; (8004990 <HAL_RCC_OscConfig+0x278>)
 8004968:	2200      	movs	r2, #0
 800496a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800496c:	f7fe f9ce 	bl	8002d0c <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004972:	e00f      	b.n	8004994 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004974:	f7fe f9ca 	bl	8002d0c <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d908      	bls.n	8004994 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e118      	b.n	8004bb8 <HAL_RCC_OscConfig+0x4a0>
 8004986:	bf00      	nop
 8004988:	40023800 	.word	0x40023800
 800498c:	42470000 	.word	0x42470000
 8004990:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004994:	4b8a      	ldr	r3, [pc, #552]	; (8004bc0 <HAL_RCC_OscConfig+0x4a8>)
 8004996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1e9      	bne.n	8004974 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0304 	and.w	r3, r3, #4
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f000 8097 	beq.w	8004adc <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049ae:	2300      	movs	r3, #0
 80049b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049b2:	4b83      	ldr	r3, [pc, #524]	; (8004bc0 <HAL_RCC_OscConfig+0x4a8>)
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10f      	bne.n	80049de <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049be:	2300      	movs	r3, #0
 80049c0:	60fb      	str	r3, [r7, #12]
 80049c2:	4b7f      	ldr	r3, [pc, #508]	; (8004bc0 <HAL_RCC_OscConfig+0x4a8>)
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	4a7e      	ldr	r2, [pc, #504]	; (8004bc0 <HAL_RCC_OscConfig+0x4a8>)
 80049c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049cc:	6413      	str	r3, [r2, #64]	; 0x40
 80049ce:	4b7c      	ldr	r3, [pc, #496]	; (8004bc0 <HAL_RCC_OscConfig+0x4a8>)
 80049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80049da:	2301      	movs	r3, #1
 80049dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049de:	4b79      	ldr	r3, [pc, #484]	; (8004bc4 <HAL_RCC_OscConfig+0x4ac>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d118      	bne.n	8004a1c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049ea:	4b76      	ldr	r3, [pc, #472]	; (8004bc4 <HAL_RCC_OscConfig+0x4ac>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a75      	ldr	r2, [pc, #468]	; (8004bc4 <HAL_RCC_OscConfig+0x4ac>)
 80049f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049f6:	f7fe f989 	bl	8002d0c <HAL_GetTick>
 80049fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049fc:	e008      	b.n	8004a10 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049fe:	f7fe f985 	bl	8002d0c <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d901      	bls.n	8004a10 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e0d3      	b.n	8004bb8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a10:	4b6c      	ldr	r3, [pc, #432]	; (8004bc4 <HAL_RCC_OscConfig+0x4ac>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d0f0      	beq.n	80049fe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d106      	bne.n	8004a32 <HAL_RCC_OscConfig+0x31a>
 8004a24:	4b66      	ldr	r3, [pc, #408]	; (8004bc0 <HAL_RCC_OscConfig+0x4a8>)
 8004a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a28:	4a65      	ldr	r2, [pc, #404]	; (8004bc0 <HAL_RCC_OscConfig+0x4a8>)
 8004a2a:	f043 0301 	orr.w	r3, r3, #1
 8004a2e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a30:	e01c      	b.n	8004a6c <HAL_RCC_OscConfig+0x354>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	2b05      	cmp	r3, #5
 8004a38:	d10c      	bne.n	8004a54 <HAL_RCC_OscConfig+0x33c>
 8004a3a:	4b61      	ldr	r3, [pc, #388]	; (8004bc0 <HAL_RCC_OscConfig+0x4a8>)
 8004a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3e:	4a60      	ldr	r2, [pc, #384]	; (8004bc0 <HAL_RCC_OscConfig+0x4a8>)
 8004a40:	f043 0304 	orr.w	r3, r3, #4
 8004a44:	6713      	str	r3, [r2, #112]	; 0x70
 8004a46:	4b5e      	ldr	r3, [pc, #376]	; (8004bc0 <HAL_RCC_OscConfig+0x4a8>)
 8004a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4a:	4a5d      	ldr	r2, [pc, #372]	; (8004bc0 <HAL_RCC_OscConfig+0x4a8>)
 8004a4c:	f043 0301 	orr.w	r3, r3, #1
 8004a50:	6713      	str	r3, [r2, #112]	; 0x70
 8004a52:	e00b      	b.n	8004a6c <HAL_RCC_OscConfig+0x354>
 8004a54:	4b5a      	ldr	r3, [pc, #360]	; (8004bc0 <HAL_RCC_OscConfig+0x4a8>)
 8004a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a58:	4a59      	ldr	r2, [pc, #356]	; (8004bc0 <HAL_RCC_OscConfig+0x4a8>)
 8004a5a:	f023 0301 	bic.w	r3, r3, #1
 8004a5e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a60:	4b57      	ldr	r3, [pc, #348]	; (8004bc0 <HAL_RCC_OscConfig+0x4a8>)
 8004a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a64:	4a56      	ldr	r2, [pc, #344]	; (8004bc0 <HAL_RCC_OscConfig+0x4a8>)
 8004a66:	f023 0304 	bic.w	r3, r3, #4
 8004a6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d015      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a74:	f7fe f94a 	bl	8002d0c <HAL_GetTick>
 8004a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a7a:	e00a      	b.n	8004a92 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a7c:	f7fe f946 	bl	8002d0c <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e092      	b.n	8004bb8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a92:	4b4b      	ldr	r3, [pc, #300]	; (8004bc0 <HAL_RCC_OscConfig+0x4a8>)
 8004a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d0ee      	beq.n	8004a7c <HAL_RCC_OscConfig+0x364>
 8004a9e:	e014      	b.n	8004aca <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa0:	f7fe f934 	bl	8002d0c <HAL_GetTick>
 8004aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aa6:	e00a      	b.n	8004abe <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004aa8:	f7fe f930 	bl	8002d0c <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e07c      	b.n	8004bb8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004abe:	4b40      	ldr	r3, [pc, #256]	; (8004bc0 <HAL_RCC_OscConfig+0x4a8>)
 8004ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1ee      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004aca:	7dfb      	ldrb	r3, [r7, #23]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d105      	bne.n	8004adc <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ad0:	4b3b      	ldr	r3, [pc, #236]	; (8004bc0 <HAL_RCC_OscConfig+0x4a8>)
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad4:	4a3a      	ldr	r2, [pc, #232]	; (8004bc0 <HAL_RCC_OscConfig+0x4a8>)
 8004ad6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ada:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d068      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ae4:	4b36      	ldr	r3, [pc, #216]	; (8004bc0 <HAL_RCC_OscConfig+0x4a8>)
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f003 030c 	and.w	r3, r3, #12
 8004aec:	2b08      	cmp	r3, #8
 8004aee:	d060      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d145      	bne.n	8004b84 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004af8:	4b33      	ldr	r3, [pc, #204]	; (8004bc8 <HAL_RCC_OscConfig+0x4b0>)
 8004afa:	2200      	movs	r2, #0
 8004afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afe:	f7fe f905 	bl	8002d0c <HAL_GetTick>
 8004b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b04:	e008      	b.n	8004b18 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b06:	f7fe f901 	bl	8002d0c <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d901      	bls.n	8004b18 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e04f      	b.n	8004bb8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b18:	4b29      	ldr	r3, [pc, #164]	; (8004bc0 <HAL_RCC_OscConfig+0x4a8>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1f0      	bne.n	8004b06 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	69da      	ldr	r2, [r3, #28]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a1b      	ldr	r3, [r3, #32]
 8004b2c:	431a      	orrs	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b32:	019b      	lsls	r3, r3, #6
 8004b34:	431a      	orrs	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3a:	085b      	lsrs	r3, r3, #1
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	041b      	lsls	r3, r3, #16
 8004b40:	431a      	orrs	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b46:	061b      	lsls	r3, r3, #24
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4e:	071b      	lsls	r3, r3, #28
 8004b50:	491b      	ldr	r1, [pc, #108]	; (8004bc0 <HAL_RCC_OscConfig+0x4a8>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b56:	4b1c      	ldr	r3, [pc, #112]	; (8004bc8 <HAL_RCC_OscConfig+0x4b0>)
 8004b58:	2201      	movs	r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b5c:	f7fe f8d6 	bl	8002d0c <HAL_GetTick>
 8004b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b62:	e008      	b.n	8004b76 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b64:	f7fe f8d2 	bl	8002d0c <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d901      	bls.n	8004b76 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e020      	b.n	8004bb8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b76:	4b12      	ldr	r3, [pc, #72]	; (8004bc0 <HAL_RCC_OscConfig+0x4a8>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d0f0      	beq.n	8004b64 <HAL_RCC_OscConfig+0x44c>
 8004b82:	e018      	b.n	8004bb6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b84:	4b10      	ldr	r3, [pc, #64]	; (8004bc8 <HAL_RCC_OscConfig+0x4b0>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b8a:	f7fe f8bf 	bl	8002d0c <HAL_GetTick>
 8004b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b90:	e008      	b.n	8004ba4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b92:	f7fe f8bb 	bl	8002d0c <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e009      	b.n	8004bb8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ba4:	4b06      	ldr	r3, [pc, #24]	; (8004bc0 <HAL_RCC_OscConfig+0x4a8>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1f0      	bne.n	8004b92 <HAL_RCC_OscConfig+0x47a>
 8004bb0:	e001      	b.n	8004bb6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e000      	b.n	8004bb8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3718      	adds	r7, #24
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	40023800 	.word	0x40023800
 8004bc4:	40007000 	.word	0x40007000
 8004bc8:	42470060 	.word	0x42470060

08004bcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d101      	bne.n	8004bde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e056      	b.n	8004c8c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d106      	bne.n	8004bfe <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f7fd fe17 	bl	800282c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2202      	movs	r2, #2
 8004c02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c14:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	431a      	orrs	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	695b      	ldr	r3, [r3, #20]
 8004c30:	431a      	orrs	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	431a      	orrs	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	ea42 0103 	orr.w	r1, r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	0c1b      	lsrs	r3, r3, #16
 8004c5c:	f003 0104 	and.w	r1, r3, #4
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	69da      	ldr	r2, [r3, #28]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c7a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3708      	adds	r7, #8
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b088      	sub	sp, #32
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	603b      	str	r3, [r7, #0]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d101      	bne.n	8004cb6 <HAL_SPI_Transmit+0x22>
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	e11e      	b.n	8004ef4 <HAL_SPI_Transmit+0x260>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cbe:	f7fe f825 	bl	8002d0c <HAL_GetTick>
 8004cc2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004cc4:	88fb      	ldrh	r3, [r7, #6]
 8004cc6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d002      	beq.n	8004cda <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004cd8:	e103      	b.n	8004ee2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d002      	beq.n	8004ce6 <HAL_SPI_Transmit+0x52>
 8004ce0:	88fb      	ldrh	r3, [r7, #6]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d102      	bne.n	8004cec <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004cea:	e0fa      	b.n	8004ee2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2203      	movs	r2, #3
 8004cf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	88fa      	ldrh	r2, [r7, #6]
 8004d04:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	88fa      	ldrh	r2, [r7, #6]
 8004d0a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d32:	d107      	bne.n	8004d44 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d42:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4e:	2b40      	cmp	r3, #64	; 0x40
 8004d50:	d007      	beq.n	8004d62 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d60:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d6a:	d14b      	bne.n	8004e04 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d002      	beq.n	8004d7a <HAL_SPI_Transmit+0xe6>
 8004d74:	8afb      	ldrh	r3, [r7, #22]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d13e      	bne.n	8004df8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7e:	881a      	ldrh	r2, [r3, #0]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8a:	1c9a      	adds	r2, r3, #2
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	3b01      	subs	r3, #1
 8004d98:	b29a      	uxth	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d9e:	e02b      	b.n	8004df8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d112      	bne.n	8004dd4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db2:	881a      	ldrh	r2, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbe:	1c9a      	adds	r2, r3, #2
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	86da      	strh	r2, [r3, #54]	; 0x36
 8004dd2:	e011      	b.n	8004df8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dd4:	f7fd ff9a 	bl	8002d0c <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d803      	bhi.n	8004dec <HAL_SPI_Transmit+0x158>
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dea:	d102      	bne.n	8004df2 <HAL_SPI_Transmit+0x15e>
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d102      	bne.n	8004df8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004df6:	e074      	b.n	8004ee2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1ce      	bne.n	8004da0 <HAL_SPI_Transmit+0x10c>
 8004e02:	e04c      	b.n	8004e9e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d002      	beq.n	8004e12 <HAL_SPI_Transmit+0x17e>
 8004e0c:	8afb      	ldrh	r3, [r7, #22]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d140      	bne.n	8004e94 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	330c      	adds	r3, #12
 8004e1c:	7812      	ldrb	r2, [r2, #0]
 8004e1e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e24:	1c5a      	adds	r2, r3, #1
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	3b01      	subs	r3, #1
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004e38:	e02c      	b.n	8004e94 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d113      	bne.n	8004e70 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	330c      	adds	r3, #12
 8004e52:	7812      	ldrb	r2, [r2, #0]
 8004e54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5a:	1c5a      	adds	r2, r3, #1
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	3b01      	subs	r3, #1
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e6e:	e011      	b.n	8004e94 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e70:	f7fd ff4c 	bl	8002d0c <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d803      	bhi.n	8004e88 <HAL_SPI_Transmit+0x1f4>
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e86:	d102      	bne.n	8004e8e <HAL_SPI_Transmit+0x1fa>
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d102      	bne.n	8004e94 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e92:	e026      	b.n	8004ee2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1cd      	bne.n	8004e3a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	6839      	ldr	r1, [r7, #0]
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f000 fba4 	bl	80055f0 <SPI_EndRxTxTransaction>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d002      	beq.n	8004eb4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d10a      	bne.n	8004ed2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	613b      	str	r3, [r7, #16]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	613b      	str	r3, [r7, #16]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	613b      	str	r3, [r7, #16]
 8004ed0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d002      	beq.n	8004ee0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	77fb      	strb	r3, [r7, #31]
 8004ede:	e000      	b.n	8004ee2 <HAL_SPI_Transmit+0x24e>
  }

error:
 8004ee0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ef2:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3720      	adds	r7, #32
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b088      	sub	sp, #32
 8004f00:	af02      	add	r7, sp, #8
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	603b      	str	r3, [r7, #0]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f18:	d112      	bne.n	8004f40 <HAL_SPI_Receive+0x44>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10e      	bne.n	8004f40 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2204      	movs	r2, #4
 8004f26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004f2a:	88fa      	ldrh	r2, [r7, #6]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	4613      	mov	r3, r2
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	68b9      	ldr	r1, [r7, #8]
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f000 f8e9 	bl	800510e <HAL_SPI_TransmitReceive>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	e0e2      	b.n	8005106 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d101      	bne.n	8004f4e <HAL_SPI_Receive+0x52>
 8004f4a:	2302      	movs	r3, #2
 8004f4c:	e0db      	b.n	8005106 <HAL_SPI_Receive+0x20a>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f56:	f7fd fed9 	bl	8002d0c <HAL_GetTick>
 8004f5a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d002      	beq.n	8004f6e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004f68:	2302      	movs	r3, #2
 8004f6a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f6c:	e0c2      	b.n	80050f4 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d002      	beq.n	8004f7a <HAL_SPI_Receive+0x7e>
 8004f74:	88fb      	ldrh	r3, [r7, #6]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d102      	bne.n	8004f80 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f7e:	e0b9      	b.n	80050f4 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2204      	movs	r2, #4
 8004f84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	88fa      	ldrh	r2, [r7, #6]
 8004f98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	88fa      	ldrh	r2, [r7, #6]
 8004f9e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fc6:	d107      	bne.n	8004fd8 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004fd6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe2:	2b40      	cmp	r3, #64	; 0x40
 8004fe4:	d007      	beq.n	8004ff6 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ff4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d162      	bne.n	80050c4 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004ffe:	e02e      	b.n	800505e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b01      	cmp	r3, #1
 800500c:	d115      	bne.n	800503a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f103 020c 	add.w	r2, r3, #12
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501a:	7812      	ldrb	r2, [r2, #0]
 800501c:	b2d2      	uxtb	r2, r2
 800501e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005024:	1c5a      	adds	r2, r3, #1
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800502e:	b29b      	uxth	r3, r3
 8005030:	3b01      	subs	r3, #1
 8005032:	b29a      	uxth	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005038:	e011      	b.n	800505e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800503a:	f7fd fe67 	bl	8002d0c <HAL_GetTick>
 800503e:	4602      	mov	r2, r0
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	429a      	cmp	r2, r3
 8005048:	d803      	bhi.n	8005052 <HAL_SPI_Receive+0x156>
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005050:	d102      	bne.n	8005058 <HAL_SPI_Receive+0x15c>
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d102      	bne.n	800505e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800505c:	e04a      	b.n	80050f4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005062:	b29b      	uxth	r3, r3
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1cb      	bne.n	8005000 <HAL_SPI_Receive+0x104>
 8005068:	e031      	b.n	80050ce <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	2b01      	cmp	r3, #1
 8005076:	d113      	bne.n	80050a0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68da      	ldr	r2, [r3, #12]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005082:	b292      	uxth	r2, r2
 8005084:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508a:	1c9a      	adds	r2, r3, #2
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005094:	b29b      	uxth	r3, r3
 8005096:	3b01      	subs	r3, #1
 8005098:	b29a      	uxth	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800509e:	e011      	b.n	80050c4 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050a0:	f7fd fe34 	bl	8002d0c <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d803      	bhi.n	80050b8 <HAL_SPI_Receive+0x1bc>
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b6:	d102      	bne.n	80050be <HAL_SPI_Receive+0x1c2>
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d102      	bne.n	80050c4 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80050c2:	e017      	b.n	80050f4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1cd      	bne.n	800506a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	6839      	ldr	r1, [r7, #0]
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f000 fa27 	bl	8005526 <SPI_EndRxTransaction>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d002      	beq.n	80050e4 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2220      	movs	r2, #32
 80050e2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d002      	beq.n	80050f2 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	75fb      	strb	r3, [r7, #23]
 80050f0:	e000      	b.n	80050f4 <HAL_SPI_Receive+0x1f8>
  }

error :
 80050f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005104:	7dfb      	ldrb	r3, [r7, #23]
}
 8005106:	4618      	mov	r0, r3
 8005108:	3718      	adds	r7, #24
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b08c      	sub	sp, #48	; 0x30
 8005112:	af00      	add	r7, sp, #0
 8005114:	60f8      	str	r0, [r7, #12]
 8005116:	60b9      	str	r1, [r7, #8]
 8005118:	607a      	str	r2, [r7, #4]
 800511a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800511c:	2301      	movs	r3, #1
 800511e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005120:	2300      	movs	r3, #0
 8005122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800512c:	2b01      	cmp	r3, #1
 800512e:	d101      	bne.n	8005134 <HAL_SPI_TransmitReceive+0x26>
 8005130:	2302      	movs	r3, #2
 8005132:	e18a      	b.n	800544a <HAL_SPI_TransmitReceive+0x33c>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800513c:	f7fd fde6 	bl	8002d0c <HAL_GetTick>
 8005140:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005148:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005152:	887b      	ldrh	r3, [r7, #2]
 8005154:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005156:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800515a:	2b01      	cmp	r3, #1
 800515c:	d00f      	beq.n	800517e <HAL_SPI_TransmitReceive+0x70>
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005164:	d107      	bne.n	8005176 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d103      	bne.n	8005176 <HAL_SPI_TransmitReceive+0x68>
 800516e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005172:	2b04      	cmp	r3, #4
 8005174:	d003      	beq.n	800517e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005176:	2302      	movs	r3, #2
 8005178:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800517c:	e15b      	b.n	8005436 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d005      	beq.n	8005190 <HAL_SPI_TransmitReceive+0x82>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d002      	beq.n	8005190 <HAL_SPI_TransmitReceive+0x82>
 800518a:	887b      	ldrh	r3, [r7, #2]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d103      	bne.n	8005198 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005196:	e14e      	b.n	8005436 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b04      	cmp	r3, #4
 80051a2:	d003      	beq.n	80051ac <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2205      	movs	r2, #5
 80051a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	887a      	ldrh	r2, [r7, #2]
 80051bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	887a      	ldrh	r2, [r7, #2]
 80051c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	887a      	ldrh	r2, [r7, #2]
 80051ce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	887a      	ldrh	r2, [r7, #2]
 80051d4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ec:	2b40      	cmp	r3, #64	; 0x40
 80051ee:	d007      	beq.n	8005200 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005208:	d178      	bne.n	80052fc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d002      	beq.n	8005218 <HAL_SPI_TransmitReceive+0x10a>
 8005212:	8b7b      	ldrh	r3, [r7, #26]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d166      	bne.n	80052e6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521c:	881a      	ldrh	r2, [r3, #0]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005228:	1c9a      	adds	r2, r3, #2
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005232:	b29b      	uxth	r3, r3
 8005234:	3b01      	subs	r3, #1
 8005236:	b29a      	uxth	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800523c:	e053      	b.n	80052e6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f003 0302 	and.w	r3, r3, #2
 8005248:	2b02      	cmp	r3, #2
 800524a:	d11b      	bne.n	8005284 <HAL_SPI_TransmitReceive+0x176>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005250:	b29b      	uxth	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d016      	beq.n	8005284 <HAL_SPI_TransmitReceive+0x176>
 8005256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005258:	2b01      	cmp	r3, #1
 800525a:	d113      	bne.n	8005284 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005260:	881a      	ldrh	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526c:	1c9a      	adds	r2, r3, #2
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005276:	b29b      	uxth	r3, r3
 8005278:	3b01      	subs	r3, #1
 800527a:	b29a      	uxth	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005280:	2300      	movs	r3, #0
 8005282:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b01      	cmp	r3, #1
 8005290:	d119      	bne.n	80052c6 <HAL_SPI_TransmitReceive+0x1b8>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005296:	b29b      	uxth	r3, r3
 8005298:	2b00      	cmp	r3, #0
 800529a:	d014      	beq.n	80052c6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68da      	ldr	r2, [r3, #12]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a6:	b292      	uxth	r2, r2
 80052a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ae:	1c9a      	adds	r2, r3, #2
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	3b01      	subs	r3, #1
 80052bc:	b29a      	uxth	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052c2:	2301      	movs	r3, #1
 80052c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80052c6:	f7fd fd21 	bl	8002d0c <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d807      	bhi.n	80052e6 <HAL_SPI_TransmitReceive+0x1d8>
 80052d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052dc:	d003      	beq.n	80052e6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80052e4:	e0a7      	b.n	8005436 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1a6      	bne.n	800523e <HAL_SPI_TransmitReceive+0x130>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1a1      	bne.n	800523e <HAL_SPI_TransmitReceive+0x130>
 80052fa:	e07c      	b.n	80053f6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d002      	beq.n	800530a <HAL_SPI_TransmitReceive+0x1fc>
 8005304:	8b7b      	ldrh	r3, [r7, #26]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d16b      	bne.n	80053e2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	330c      	adds	r3, #12
 8005314:	7812      	ldrb	r2, [r2, #0]
 8005316:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531c:	1c5a      	adds	r2, r3, #1
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005326:	b29b      	uxth	r3, r3
 8005328:	3b01      	subs	r3, #1
 800532a:	b29a      	uxth	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005330:	e057      	b.n	80053e2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f003 0302 	and.w	r3, r3, #2
 800533c:	2b02      	cmp	r3, #2
 800533e:	d11c      	bne.n	800537a <HAL_SPI_TransmitReceive+0x26c>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005344:	b29b      	uxth	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d017      	beq.n	800537a <HAL_SPI_TransmitReceive+0x26c>
 800534a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534c:	2b01      	cmp	r3, #1
 800534e:	d114      	bne.n	800537a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	330c      	adds	r3, #12
 800535a:	7812      	ldrb	r2, [r2, #0]
 800535c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005362:	1c5a      	adds	r2, r3, #1
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800536c:	b29b      	uxth	r3, r3
 800536e:	3b01      	subs	r3, #1
 8005370:	b29a      	uxth	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005376:	2300      	movs	r3, #0
 8005378:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f003 0301 	and.w	r3, r3, #1
 8005384:	2b01      	cmp	r3, #1
 8005386:	d119      	bne.n	80053bc <HAL_SPI_TransmitReceive+0x2ae>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800538c:	b29b      	uxth	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d014      	beq.n	80053bc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68da      	ldr	r2, [r3, #12]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539c:	b2d2      	uxtb	r2, r2
 800539e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a4:	1c5a      	adds	r2, r3, #1
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	3b01      	subs	r3, #1
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053b8:	2301      	movs	r3, #1
 80053ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80053bc:	f7fd fca6 	bl	8002d0c <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d803      	bhi.n	80053d4 <HAL_SPI_TransmitReceive+0x2c6>
 80053cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d2:	d102      	bne.n	80053da <HAL_SPI_TransmitReceive+0x2cc>
 80053d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d103      	bne.n	80053e2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80053e0:	e029      	b.n	8005436 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1a2      	bne.n	8005332 <HAL_SPI_TransmitReceive+0x224>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d19d      	bne.n	8005332 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f000 f8f8 	bl	80055f0 <SPI_EndRxTxTransaction>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d006      	beq.n	8005414 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2220      	movs	r2, #32
 8005410:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005412:	e010      	b.n	8005436 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10b      	bne.n	8005434 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800541c:	2300      	movs	r3, #0
 800541e:	617b      	str	r3, [r7, #20]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	617b      	str	r3, [r7, #20]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	617b      	str	r3, [r7, #20]
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	e000      	b.n	8005436 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005434:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005446:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800544a:	4618      	mov	r0, r3
 800544c:	3730      	adds	r7, #48	; 0x30
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005452:	b580      	push	{r7, lr}
 8005454:	b084      	sub	sp, #16
 8005456:	af00      	add	r7, sp, #0
 8005458:	60f8      	str	r0, [r7, #12]
 800545a:	60b9      	str	r1, [r7, #8]
 800545c:	603b      	str	r3, [r7, #0]
 800545e:	4613      	mov	r3, r2
 8005460:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005462:	e04c      	b.n	80054fe <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546a:	d048      	beq.n	80054fe <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800546c:	f7fd fc4e 	bl	8002d0c <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	429a      	cmp	r2, r3
 800547a:	d902      	bls.n	8005482 <SPI_WaitFlagStateUntilTimeout+0x30>
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d13d      	bne.n	80054fe <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005490:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800549a:	d111      	bne.n	80054c0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054a4:	d004      	beq.n	80054b0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ae:	d107      	bne.n	80054c0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054c8:	d10f      	bne.n	80054ea <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054d8:	601a      	str	r2, [r3, #0]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e00f      	b.n	800551e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	4013      	ands	r3, r2
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	429a      	cmp	r2, r3
 800550c:	bf0c      	ite	eq
 800550e:	2301      	moveq	r3, #1
 8005510:	2300      	movne	r3, #0
 8005512:	b2db      	uxtb	r3, r3
 8005514:	461a      	mov	r2, r3
 8005516:	79fb      	ldrb	r3, [r7, #7]
 8005518:	429a      	cmp	r2, r3
 800551a:	d1a3      	bne.n	8005464 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b086      	sub	sp, #24
 800552a:	af02      	add	r7, sp, #8
 800552c:	60f8      	str	r0, [r7, #12]
 800552e:	60b9      	str	r1, [r7, #8]
 8005530:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800553a:	d111      	bne.n	8005560 <SPI_EndRxTransaction+0x3a>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005544:	d004      	beq.n	8005550 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800554e:	d107      	bne.n	8005560 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800555e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005568:	d12a      	bne.n	80055c0 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005572:	d012      	beq.n	800559a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	2200      	movs	r2, #0
 800557c:	2180      	movs	r1, #128	; 0x80
 800557e:	68f8      	ldr	r0, [r7, #12]
 8005580:	f7ff ff67 	bl	8005452 <SPI_WaitFlagStateUntilTimeout>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d02d      	beq.n	80055e6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800558e:	f043 0220 	orr.w	r2, r3, #32
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e026      	b.n	80055e8 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	9300      	str	r3, [sp, #0]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	2200      	movs	r2, #0
 80055a2:	2101      	movs	r1, #1
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f7ff ff54 	bl	8005452 <SPI_WaitFlagStateUntilTimeout>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d01a      	beq.n	80055e6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b4:	f043 0220 	orr.w	r2, r3, #32
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e013      	b.n	80055e8 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	9300      	str	r3, [sp, #0]
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	2200      	movs	r2, #0
 80055c8:	2101      	movs	r1, #1
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f7ff ff41 	bl	8005452 <SPI_WaitFlagStateUntilTimeout>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d007      	beq.n	80055e6 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055da:	f043 0220 	orr.w	r2, r3, #32
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e000      	b.n	80055e8 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b088      	sub	sp, #32
 80055f4:	af02      	add	r7, sp, #8
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80055fc:	4b1b      	ldr	r3, [pc, #108]	; (800566c <SPI_EndRxTxTransaction+0x7c>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a1b      	ldr	r2, [pc, #108]	; (8005670 <SPI_EndRxTxTransaction+0x80>)
 8005602:	fba2 2303 	umull	r2, r3, r2, r3
 8005606:	0d5b      	lsrs	r3, r3, #21
 8005608:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800560c:	fb02 f303 	mul.w	r3, r2, r3
 8005610:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800561a:	d112      	bne.n	8005642 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	9300      	str	r3, [sp, #0]
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	2200      	movs	r2, #0
 8005624:	2180      	movs	r1, #128	; 0x80
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f7ff ff13 	bl	8005452 <SPI_WaitFlagStateUntilTimeout>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d016      	beq.n	8005660 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005636:	f043 0220 	orr.w	r2, r3, #32
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e00f      	b.n	8005662 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00a      	beq.n	800565e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	3b01      	subs	r3, #1
 800564c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005658:	2b80      	cmp	r3, #128	; 0x80
 800565a:	d0f2      	beq.n	8005642 <SPI_EndRxTxTransaction+0x52>
 800565c:	e000      	b.n	8005660 <SPI_EndRxTxTransaction+0x70>
        break;
 800565e:	bf00      	nop
  }

  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3718      	adds	r7, #24
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	2000003c 	.word	0x2000003c
 8005670:	165e9f81 	.word	0x165e9f81

08005674 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e03f      	b.n	8005706 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d106      	bne.n	80056a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f7fd f9c8 	bl	8002a30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2224      	movs	r2, #36	; 0x24
 80056a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68da      	ldr	r2, [r3, #12]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 fb4b 	bl	8005d54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	691a      	ldr	r2, [r3, #16]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	695a      	ldr	r2, [r3, #20]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68da      	ldr	r2, [r3, #12]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2220      	movs	r2, #32
 80056f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2220      	movs	r2, #32
 8005700:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3708      	adds	r7, #8
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b088      	sub	sp, #32
 8005712:	af02      	add	r7, sp, #8
 8005714:	60f8      	str	r0, [r7, #12]
 8005716:	60b9      	str	r1, [r7, #8]
 8005718:	603b      	str	r3, [r7, #0]
 800571a:	4613      	mov	r3, r2
 800571c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800571e:	2300      	movs	r3, #0
 8005720:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b20      	cmp	r3, #32
 800572c:	f040 8083 	bne.w	8005836 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d002      	beq.n	800573c <HAL_UART_Transmit+0x2e>
 8005736:	88fb      	ldrh	r3, [r7, #6]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d101      	bne.n	8005740 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e07b      	b.n	8005838 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005746:	2b01      	cmp	r3, #1
 8005748:	d101      	bne.n	800574e <HAL_UART_Transmit+0x40>
 800574a:	2302      	movs	r3, #2
 800574c:	e074      	b.n	8005838 <HAL_UART_Transmit+0x12a>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2221      	movs	r2, #33	; 0x21
 8005760:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005764:	f7fd fad2 	bl	8002d0c <HAL_GetTick>
 8005768:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	88fa      	ldrh	r2, [r7, #6]
 800576e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	88fa      	ldrh	r2, [r7, #6]
 8005774:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800577e:	e042      	b.n	8005806 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005784:	b29b      	uxth	r3, r3
 8005786:	3b01      	subs	r3, #1
 8005788:	b29a      	uxth	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005796:	d122      	bne.n	80057de <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	9300      	str	r3, [sp, #0]
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	2200      	movs	r2, #0
 80057a0:	2180      	movs	r1, #128	; 0x80
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	f000 f96a 	bl	8005a7c <UART_WaitOnFlagUntilTimeout>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d001      	beq.n	80057b2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e042      	b.n	8005838 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	881b      	ldrh	r3, [r3, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057c4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d103      	bne.n	80057d6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	3302      	adds	r3, #2
 80057d2:	60bb      	str	r3, [r7, #8]
 80057d4:	e017      	b.n	8005806 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	3301      	adds	r3, #1
 80057da:	60bb      	str	r3, [r7, #8]
 80057dc:	e013      	b.n	8005806 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	2200      	movs	r2, #0
 80057e6:	2180      	movs	r1, #128	; 0x80
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f000 f947 	bl	8005a7c <UART_WaitOnFlagUntilTimeout>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d001      	beq.n	80057f8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e01f      	b.n	8005838 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	1c5a      	adds	r2, r3, #1
 80057fc:	60ba      	str	r2, [r7, #8]
 80057fe:	781a      	ldrb	r2, [r3, #0]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800580a:	b29b      	uxth	r3, r3
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1b7      	bne.n	8005780 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	9300      	str	r3, [sp, #0]
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	2200      	movs	r2, #0
 8005818:	2140      	movs	r1, #64	; 0x40
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f000 f92e 	bl	8005a7c <UART_WaitOnFlagUntilTimeout>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d001      	beq.n	800582a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e006      	b.n	8005838 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2220      	movs	r2, #32
 800582e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005832:	2300      	movs	r3, #0
 8005834:	e000      	b.n	8005838 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005836:	2302      	movs	r3, #2
  }
}
 8005838:	4618      	mov	r0, r3
 800583a:	3718      	adds	r7, #24
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b088      	sub	sp, #32
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005860:	2300      	movs	r3, #0
 8005862:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005864:	2300      	movs	r3, #0
 8005866:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	f003 030f 	and.w	r3, r3, #15
 800586e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10d      	bne.n	8005892 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	f003 0320 	and.w	r3, r3, #32
 800587c:	2b00      	cmp	r3, #0
 800587e:	d008      	beq.n	8005892 <HAL_UART_IRQHandler+0x52>
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	f003 0320 	and.w	r3, r3, #32
 8005886:	2b00      	cmp	r3, #0
 8005888:	d003      	beq.n	8005892 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 f9e0 	bl	8005c50 <UART_Receive_IT>
      return;
 8005890:	e0d1      	b.n	8005a36 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 80b0 	beq.w	80059fa <HAL_UART_IRQHandler+0x1ba>
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f003 0301 	and.w	r3, r3, #1
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d105      	bne.n	80058b0 <HAL_UART_IRQHandler+0x70>
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f000 80a5 	beq.w	80059fa <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00a      	beq.n	80058d0 <HAL_UART_IRQHandler+0x90>
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d005      	beq.n	80058d0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c8:	f043 0201 	orr.w	r2, r3, #1
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	f003 0304 	and.w	r3, r3, #4
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00a      	beq.n	80058f0 <HAL_UART_IRQHandler+0xb0>
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f003 0301 	and.w	r3, r3, #1
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d005      	beq.n	80058f0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e8:	f043 0202 	orr.w	r2, r3, #2
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00a      	beq.n	8005910 <HAL_UART_IRQHandler+0xd0>
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	f003 0301 	and.w	r3, r3, #1
 8005900:	2b00      	cmp	r3, #0
 8005902:	d005      	beq.n	8005910 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005908:	f043 0204 	orr.w	r2, r3, #4
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	f003 0308 	and.w	r3, r3, #8
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00f      	beq.n	800593a <HAL_UART_IRQHandler+0xfa>
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	f003 0320 	and.w	r3, r3, #32
 8005920:	2b00      	cmp	r3, #0
 8005922:	d104      	bne.n	800592e <HAL_UART_IRQHandler+0xee>
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d005      	beq.n	800593a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005932:	f043 0208 	orr.w	r2, r3, #8
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800593e:	2b00      	cmp	r3, #0
 8005940:	d078      	beq.n	8005a34 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	f003 0320 	and.w	r3, r3, #32
 8005948:	2b00      	cmp	r3, #0
 800594a:	d007      	beq.n	800595c <HAL_UART_IRQHandler+0x11c>
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	f003 0320 	and.w	r3, r3, #32
 8005952:	2b00      	cmp	r3, #0
 8005954:	d002      	beq.n	800595c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 f97a 	bl	8005c50 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005966:	2b40      	cmp	r3, #64	; 0x40
 8005968:	bf0c      	ite	eq
 800596a:	2301      	moveq	r3, #1
 800596c:	2300      	movne	r3, #0
 800596e:	b2db      	uxtb	r3, r3
 8005970:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005976:	f003 0308 	and.w	r3, r3, #8
 800597a:	2b00      	cmp	r3, #0
 800597c:	d102      	bne.n	8005984 <HAL_UART_IRQHandler+0x144>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d031      	beq.n	80059e8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 f8c3 	bl	8005b10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005994:	2b40      	cmp	r3, #64	; 0x40
 8005996:	d123      	bne.n	80059e0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	695a      	ldr	r2, [r3, #20]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059a6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d013      	beq.n	80059d8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059b4:	4a21      	ldr	r2, [pc, #132]	; (8005a3c <HAL_UART_IRQHandler+0x1fc>)
 80059b6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059bc:	4618      	mov	r0, r3
 80059be:	f7fd ffef 	bl	80039a0 <HAL_DMA_Abort_IT>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d016      	beq.n	80059f6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80059d2:	4610      	mov	r0, r2
 80059d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059d6:	e00e      	b.n	80059f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 f845 	bl	8005a68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059de:	e00a      	b.n	80059f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 f841 	bl	8005a68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059e6:	e006      	b.n	80059f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 f83d 	bl	8005a68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80059f4:	e01e      	b.n	8005a34 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059f6:	bf00      	nop
    return;
 80059f8:	e01c      	b.n	8005a34 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d008      	beq.n	8005a16 <HAL_UART_IRQHandler+0x1d6>
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d003      	beq.n	8005a16 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f8b0 	bl	8005b74 <UART_Transmit_IT>
    return;
 8005a14:	e00f      	b.n	8005a36 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00a      	beq.n	8005a36 <HAL_UART_IRQHandler+0x1f6>
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d005      	beq.n	8005a36 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f8f8 	bl	8005c20 <UART_EndTransmit_IT>
    return;
 8005a30:	bf00      	nop
 8005a32:	e000      	b.n	8005a36 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005a34:	bf00      	nop
  }
}
 8005a36:	3720      	adds	r7, #32
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	08005b4d 	.word	0x08005b4d

08005a40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	603b      	str	r3, [r7, #0]
 8005a88:	4613      	mov	r3, r2
 8005a8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a8c:	e02c      	b.n	8005ae8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a94:	d028      	beq.n	8005ae8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d007      	beq.n	8005aac <UART_WaitOnFlagUntilTimeout+0x30>
 8005a9c:	f7fd f936 	bl	8002d0c <HAL_GetTick>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	69ba      	ldr	r2, [r7, #24]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d21d      	bcs.n	8005ae8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68da      	ldr	r2, [r3, #12]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005aba:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	695a      	ldr	r2, [r3, #20]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f022 0201 	bic.w	r2, r2, #1
 8005aca:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2220      	movs	r2, #32
 8005ad0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e00f      	b.n	8005b08 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	4013      	ands	r3, r2
 8005af2:	68ba      	ldr	r2, [r7, #8]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	bf0c      	ite	eq
 8005af8:	2301      	moveq	r3, #1
 8005afa:	2300      	movne	r3, #0
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	461a      	mov	r2, r3
 8005b00:	79fb      	ldrb	r3, [r7, #7]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d0c3      	beq.n	8005a8e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68da      	ldr	r2, [r3, #12]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b26:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	695a      	ldr	r2, [r3, #20]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f022 0201 	bic.w	r2, r2, #1
 8005b36:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f7ff ff7e 	bl	8005a68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b6c:	bf00      	nop
 8005b6e:	3710      	adds	r7, #16
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	2b21      	cmp	r3, #33	; 0x21
 8005b86:	d144      	bne.n	8005c12 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b90:	d11a      	bne.n	8005bc8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	881b      	ldrh	r3, [r3, #0]
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ba6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d105      	bne.n	8005bbc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a1b      	ldr	r3, [r3, #32]
 8005bb4:	1c9a      	adds	r2, r3, #2
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	621a      	str	r2, [r3, #32]
 8005bba:	e00e      	b.n	8005bda <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a1b      	ldr	r3, [r3, #32]
 8005bc0:	1c5a      	adds	r2, r3, #1
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	621a      	str	r2, [r3, #32]
 8005bc6:	e008      	b.n	8005bda <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a1b      	ldr	r3, [r3, #32]
 8005bcc:	1c59      	adds	r1, r3, #1
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	6211      	str	r1, [r2, #32]
 8005bd2:	781a      	ldrb	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	3b01      	subs	r3, #1
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	4619      	mov	r1, r3
 8005be8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10f      	bne.n	8005c0e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68da      	ldr	r2, [r3, #12]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bfc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68da      	ldr	r2, [r3, #12]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c0c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	e000      	b.n	8005c14 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005c12:	2302      	movs	r3, #2
  }
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3714      	adds	r7, #20
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68da      	ldr	r2, [r3, #12]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c36:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2220      	movs	r2, #32
 8005c3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f7ff fefd 	bl	8005a40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3708      	adds	r7, #8
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b22      	cmp	r3, #34	; 0x22
 8005c62:	d171      	bne.n	8005d48 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c6c:	d123      	bne.n	8005cb6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c72:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10e      	bne.n	8005c9a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c92:	1c9a      	adds	r2, r3, #2
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	629a      	str	r2, [r3, #40]	; 0x28
 8005c98:	e029      	b.n	8005cee <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cae:	1c5a      	adds	r2, r3, #1
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	629a      	str	r2, [r3, #40]	; 0x28
 8005cb4:	e01b      	b.n	8005cee <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10a      	bne.n	8005cd4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	6858      	ldr	r0, [r3, #4]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc8:	1c59      	adds	r1, r3, #1
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	6291      	str	r1, [r2, #40]	; 0x28
 8005cce:	b2c2      	uxtb	r2, r0
 8005cd0:	701a      	strb	r2, [r3, #0]
 8005cd2:	e00c      	b.n	8005cee <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	b2da      	uxtb	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce0:	1c58      	adds	r0, r3, #1
 8005ce2:	6879      	ldr	r1, [r7, #4]
 8005ce4:	6288      	str	r0, [r1, #40]	; 0x28
 8005ce6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005cea:	b2d2      	uxtb	r2, r2
 8005cec:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d120      	bne.n	8005d44 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68da      	ldr	r2, [r3, #12]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f022 0220 	bic.w	r2, r2, #32
 8005d10:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68da      	ldr	r2, [r3, #12]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d20:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	695a      	ldr	r2, [r3, #20]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f022 0201 	bic.w	r2, r2, #1
 8005d30:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2220      	movs	r2, #32
 8005d36:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f7ff fe8a 	bl	8005a54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005d40:	2300      	movs	r3, #0
 8005d42:	e002      	b.n	8005d4a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005d44:	2300      	movs	r3, #0
 8005d46:	e000      	b.n	8005d4a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005d48:	2302      	movs	r3, #2
  }
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
	...

08005d54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d58:	b085      	sub	sp, #20
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	68da      	ldr	r2, [r3, #12]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	430a      	orrs	r2, r1
 8005d72:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	689a      	ldr	r2, [r3, #8]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	431a      	orrs	r2, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	431a      	orrs	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	69db      	ldr	r3, [r3, #28]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005d96:	f023 030c 	bic.w	r3, r3, #12
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	6812      	ldr	r2, [r2, #0]
 8005d9e:	68f9      	ldr	r1, [r7, #12]
 8005da0:	430b      	orrs	r3, r1
 8005da2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	699a      	ldr	r2, [r3, #24]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	430a      	orrs	r2, r1
 8005db8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	69db      	ldr	r3, [r3, #28]
 8005dbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dc2:	f040 818b 	bne.w	80060dc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4ac1      	ldr	r2, [pc, #772]	; (80060d0 <UART_SetConfig+0x37c>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d005      	beq.n	8005ddc <UART_SetConfig+0x88>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4abf      	ldr	r2, [pc, #764]	; (80060d4 <UART_SetConfig+0x380>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	f040 80bd 	bne.w	8005f56 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ddc:	f7fe fb36 	bl	800444c <HAL_RCC_GetPCLK2Freq>
 8005de0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	461d      	mov	r5, r3
 8005de6:	f04f 0600 	mov.w	r6, #0
 8005dea:	46a8      	mov	r8, r5
 8005dec:	46b1      	mov	r9, r6
 8005dee:	eb18 0308 	adds.w	r3, r8, r8
 8005df2:	eb49 0409 	adc.w	r4, r9, r9
 8005df6:	4698      	mov	r8, r3
 8005df8:	46a1      	mov	r9, r4
 8005dfa:	eb18 0805 	adds.w	r8, r8, r5
 8005dfe:	eb49 0906 	adc.w	r9, r9, r6
 8005e02:	f04f 0100 	mov.w	r1, #0
 8005e06:	f04f 0200 	mov.w	r2, #0
 8005e0a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005e0e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005e12:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005e16:	4688      	mov	r8, r1
 8005e18:	4691      	mov	r9, r2
 8005e1a:	eb18 0005 	adds.w	r0, r8, r5
 8005e1e:	eb49 0106 	adc.w	r1, r9, r6
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	461d      	mov	r5, r3
 8005e28:	f04f 0600 	mov.w	r6, #0
 8005e2c:	196b      	adds	r3, r5, r5
 8005e2e:	eb46 0406 	adc.w	r4, r6, r6
 8005e32:	461a      	mov	r2, r3
 8005e34:	4623      	mov	r3, r4
 8005e36:	f7fa ff47 	bl	8000cc8 <__aeabi_uldivmod>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	460c      	mov	r4, r1
 8005e3e:	461a      	mov	r2, r3
 8005e40:	4ba5      	ldr	r3, [pc, #660]	; (80060d8 <UART_SetConfig+0x384>)
 8005e42:	fba3 2302 	umull	r2, r3, r3, r2
 8005e46:	095b      	lsrs	r3, r3, #5
 8005e48:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	461d      	mov	r5, r3
 8005e50:	f04f 0600 	mov.w	r6, #0
 8005e54:	46a9      	mov	r9, r5
 8005e56:	46b2      	mov	sl, r6
 8005e58:	eb19 0309 	adds.w	r3, r9, r9
 8005e5c:	eb4a 040a 	adc.w	r4, sl, sl
 8005e60:	4699      	mov	r9, r3
 8005e62:	46a2      	mov	sl, r4
 8005e64:	eb19 0905 	adds.w	r9, r9, r5
 8005e68:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e6c:	f04f 0100 	mov.w	r1, #0
 8005e70:	f04f 0200 	mov.w	r2, #0
 8005e74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e78:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e7c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e80:	4689      	mov	r9, r1
 8005e82:	4692      	mov	sl, r2
 8005e84:	eb19 0005 	adds.w	r0, r9, r5
 8005e88:	eb4a 0106 	adc.w	r1, sl, r6
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	461d      	mov	r5, r3
 8005e92:	f04f 0600 	mov.w	r6, #0
 8005e96:	196b      	adds	r3, r5, r5
 8005e98:	eb46 0406 	adc.w	r4, r6, r6
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	4623      	mov	r3, r4
 8005ea0:	f7fa ff12 	bl	8000cc8 <__aeabi_uldivmod>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	460c      	mov	r4, r1
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	4b8b      	ldr	r3, [pc, #556]	; (80060d8 <UART_SetConfig+0x384>)
 8005eac:	fba3 1302 	umull	r1, r3, r3, r2
 8005eb0:	095b      	lsrs	r3, r3, #5
 8005eb2:	2164      	movs	r1, #100	; 0x64
 8005eb4:	fb01 f303 	mul.w	r3, r1, r3
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	00db      	lsls	r3, r3, #3
 8005ebc:	3332      	adds	r3, #50	; 0x32
 8005ebe:	4a86      	ldr	r2, [pc, #536]	; (80060d8 <UART_SetConfig+0x384>)
 8005ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec4:	095b      	lsrs	r3, r3, #5
 8005ec6:	005b      	lsls	r3, r3, #1
 8005ec8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ecc:	4498      	add	r8, r3
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	461d      	mov	r5, r3
 8005ed2:	f04f 0600 	mov.w	r6, #0
 8005ed6:	46a9      	mov	r9, r5
 8005ed8:	46b2      	mov	sl, r6
 8005eda:	eb19 0309 	adds.w	r3, r9, r9
 8005ede:	eb4a 040a 	adc.w	r4, sl, sl
 8005ee2:	4699      	mov	r9, r3
 8005ee4:	46a2      	mov	sl, r4
 8005ee6:	eb19 0905 	adds.w	r9, r9, r5
 8005eea:	eb4a 0a06 	adc.w	sl, sl, r6
 8005eee:	f04f 0100 	mov.w	r1, #0
 8005ef2:	f04f 0200 	mov.w	r2, #0
 8005ef6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005efa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005efe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f02:	4689      	mov	r9, r1
 8005f04:	4692      	mov	sl, r2
 8005f06:	eb19 0005 	adds.w	r0, r9, r5
 8005f0a:	eb4a 0106 	adc.w	r1, sl, r6
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	461d      	mov	r5, r3
 8005f14:	f04f 0600 	mov.w	r6, #0
 8005f18:	196b      	adds	r3, r5, r5
 8005f1a:	eb46 0406 	adc.w	r4, r6, r6
 8005f1e:	461a      	mov	r2, r3
 8005f20:	4623      	mov	r3, r4
 8005f22:	f7fa fed1 	bl	8000cc8 <__aeabi_uldivmod>
 8005f26:	4603      	mov	r3, r0
 8005f28:	460c      	mov	r4, r1
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	4b6a      	ldr	r3, [pc, #424]	; (80060d8 <UART_SetConfig+0x384>)
 8005f2e:	fba3 1302 	umull	r1, r3, r3, r2
 8005f32:	095b      	lsrs	r3, r3, #5
 8005f34:	2164      	movs	r1, #100	; 0x64
 8005f36:	fb01 f303 	mul.w	r3, r1, r3
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	00db      	lsls	r3, r3, #3
 8005f3e:	3332      	adds	r3, #50	; 0x32
 8005f40:	4a65      	ldr	r2, [pc, #404]	; (80060d8 <UART_SetConfig+0x384>)
 8005f42:	fba2 2303 	umull	r2, r3, r2, r3
 8005f46:	095b      	lsrs	r3, r3, #5
 8005f48:	f003 0207 	and.w	r2, r3, #7
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4442      	add	r2, r8
 8005f52:	609a      	str	r2, [r3, #8]
 8005f54:	e26f      	b.n	8006436 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f56:	f7fe fa65 	bl	8004424 <HAL_RCC_GetPCLK1Freq>
 8005f5a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	461d      	mov	r5, r3
 8005f60:	f04f 0600 	mov.w	r6, #0
 8005f64:	46a8      	mov	r8, r5
 8005f66:	46b1      	mov	r9, r6
 8005f68:	eb18 0308 	adds.w	r3, r8, r8
 8005f6c:	eb49 0409 	adc.w	r4, r9, r9
 8005f70:	4698      	mov	r8, r3
 8005f72:	46a1      	mov	r9, r4
 8005f74:	eb18 0805 	adds.w	r8, r8, r5
 8005f78:	eb49 0906 	adc.w	r9, r9, r6
 8005f7c:	f04f 0100 	mov.w	r1, #0
 8005f80:	f04f 0200 	mov.w	r2, #0
 8005f84:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005f88:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005f8c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005f90:	4688      	mov	r8, r1
 8005f92:	4691      	mov	r9, r2
 8005f94:	eb18 0005 	adds.w	r0, r8, r5
 8005f98:	eb49 0106 	adc.w	r1, r9, r6
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	461d      	mov	r5, r3
 8005fa2:	f04f 0600 	mov.w	r6, #0
 8005fa6:	196b      	adds	r3, r5, r5
 8005fa8:	eb46 0406 	adc.w	r4, r6, r6
 8005fac:	461a      	mov	r2, r3
 8005fae:	4623      	mov	r3, r4
 8005fb0:	f7fa fe8a 	bl	8000cc8 <__aeabi_uldivmod>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	460c      	mov	r4, r1
 8005fb8:	461a      	mov	r2, r3
 8005fba:	4b47      	ldr	r3, [pc, #284]	; (80060d8 <UART_SetConfig+0x384>)
 8005fbc:	fba3 2302 	umull	r2, r3, r3, r2
 8005fc0:	095b      	lsrs	r3, r3, #5
 8005fc2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	461d      	mov	r5, r3
 8005fca:	f04f 0600 	mov.w	r6, #0
 8005fce:	46a9      	mov	r9, r5
 8005fd0:	46b2      	mov	sl, r6
 8005fd2:	eb19 0309 	adds.w	r3, r9, r9
 8005fd6:	eb4a 040a 	adc.w	r4, sl, sl
 8005fda:	4699      	mov	r9, r3
 8005fdc:	46a2      	mov	sl, r4
 8005fde:	eb19 0905 	adds.w	r9, r9, r5
 8005fe2:	eb4a 0a06 	adc.w	sl, sl, r6
 8005fe6:	f04f 0100 	mov.w	r1, #0
 8005fea:	f04f 0200 	mov.w	r2, #0
 8005fee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ff2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ff6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ffa:	4689      	mov	r9, r1
 8005ffc:	4692      	mov	sl, r2
 8005ffe:	eb19 0005 	adds.w	r0, r9, r5
 8006002:	eb4a 0106 	adc.w	r1, sl, r6
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	461d      	mov	r5, r3
 800600c:	f04f 0600 	mov.w	r6, #0
 8006010:	196b      	adds	r3, r5, r5
 8006012:	eb46 0406 	adc.w	r4, r6, r6
 8006016:	461a      	mov	r2, r3
 8006018:	4623      	mov	r3, r4
 800601a:	f7fa fe55 	bl	8000cc8 <__aeabi_uldivmod>
 800601e:	4603      	mov	r3, r0
 8006020:	460c      	mov	r4, r1
 8006022:	461a      	mov	r2, r3
 8006024:	4b2c      	ldr	r3, [pc, #176]	; (80060d8 <UART_SetConfig+0x384>)
 8006026:	fba3 1302 	umull	r1, r3, r3, r2
 800602a:	095b      	lsrs	r3, r3, #5
 800602c:	2164      	movs	r1, #100	; 0x64
 800602e:	fb01 f303 	mul.w	r3, r1, r3
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	00db      	lsls	r3, r3, #3
 8006036:	3332      	adds	r3, #50	; 0x32
 8006038:	4a27      	ldr	r2, [pc, #156]	; (80060d8 <UART_SetConfig+0x384>)
 800603a:	fba2 2303 	umull	r2, r3, r2, r3
 800603e:	095b      	lsrs	r3, r3, #5
 8006040:	005b      	lsls	r3, r3, #1
 8006042:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006046:	4498      	add	r8, r3
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	461d      	mov	r5, r3
 800604c:	f04f 0600 	mov.w	r6, #0
 8006050:	46a9      	mov	r9, r5
 8006052:	46b2      	mov	sl, r6
 8006054:	eb19 0309 	adds.w	r3, r9, r9
 8006058:	eb4a 040a 	adc.w	r4, sl, sl
 800605c:	4699      	mov	r9, r3
 800605e:	46a2      	mov	sl, r4
 8006060:	eb19 0905 	adds.w	r9, r9, r5
 8006064:	eb4a 0a06 	adc.w	sl, sl, r6
 8006068:	f04f 0100 	mov.w	r1, #0
 800606c:	f04f 0200 	mov.w	r2, #0
 8006070:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006074:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006078:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800607c:	4689      	mov	r9, r1
 800607e:	4692      	mov	sl, r2
 8006080:	eb19 0005 	adds.w	r0, r9, r5
 8006084:	eb4a 0106 	adc.w	r1, sl, r6
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	461d      	mov	r5, r3
 800608e:	f04f 0600 	mov.w	r6, #0
 8006092:	196b      	adds	r3, r5, r5
 8006094:	eb46 0406 	adc.w	r4, r6, r6
 8006098:	461a      	mov	r2, r3
 800609a:	4623      	mov	r3, r4
 800609c:	f7fa fe14 	bl	8000cc8 <__aeabi_uldivmod>
 80060a0:	4603      	mov	r3, r0
 80060a2:	460c      	mov	r4, r1
 80060a4:	461a      	mov	r2, r3
 80060a6:	4b0c      	ldr	r3, [pc, #48]	; (80060d8 <UART_SetConfig+0x384>)
 80060a8:	fba3 1302 	umull	r1, r3, r3, r2
 80060ac:	095b      	lsrs	r3, r3, #5
 80060ae:	2164      	movs	r1, #100	; 0x64
 80060b0:	fb01 f303 	mul.w	r3, r1, r3
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	00db      	lsls	r3, r3, #3
 80060b8:	3332      	adds	r3, #50	; 0x32
 80060ba:	4a07      	ldr	r2, [pc, #28]	; (80060d8 <UART_SetConfig+0x384>)
 80060bc:	fba2 2303 	umull	r2, r3, r2, r3
 80060c0:	095b      	lsrs	r3, r3, #5
 80060c2:	f003 0207 	and.w	r2, r3, #7
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4442      	add	r2, r8
 80060cc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80060ce:	e1b2      	b.n	8006436 <UART_SetConfig+0x6e2>
 80060d0:	40011000 	.word	0x40011000
 80060d4:	40011400 	.word	0x40011400
 80060d8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4ad7      	ldr	r2, [pc, #860]	; (8006440 <UART_SetConfig+0x6ec>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d005      	beq.n	80060f2 <UART_SetConfig+0x39e>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4ad6      	ldr	r2, [pc, #856]	; (8006444 <UART_SetConfig+0x6f0>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	f040 80d1 	bne.w	8006294 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80060f2:	f7fe f9ab 	bl	800444c <HAL_RCC_GetPCLK2Freq>
 80060f6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	469a      	mov	sl, r3
 80060fc:	f04f 0b00 	mov.w	fp, #0
 8006100:	46d0      	mov	r8, sl
 8006102:	46d9      	mov	r9, fp
 8006104:	eb18 0308 	adds.w	r3, r8, r8
 8006108:	eb49 0409 	adc.w	r4, r9, r9
 800610c:	4698      	mov	r8, r3
 800610e:	46a1      	mov	r9, r4
 8006110:	eb18 080a 	adds.w	r8, r8, sl
 8006114:	eb49 090b 	adc.w	r9, r9, fp
 8006118:	f04f 0100 	mov.w	r1, #0
 800611c:	f04f 0200 	mov.w	r2, #0
 8006120:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006124:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006128:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800612c:	4688      	mov	r8, r1
 800612e:	4691      	mov	r9, r2
 8006130:	eb1a 0508 	adds.w	r5, sl, r8
 8006134:	eb4b 0609 	adc.w	r6, fp, r9
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	4619      	mov	r1, r3
 800613e:	f04f 0200 	mov.w	r2, #0
 8006142:	f04f 0300 	mov.w	r3, #0
 8006146:	f04f 0400 	mov.w	r4, #0
 800614a:	0094      	lsls	r4, r2, #2
 800614c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006150:	008b      	lsls	r3, r1, #2
 8006152:	461a      	mov	r2, r3
 8006154:	4623      	mov	r3, r4
 8006156:	4628      	mov	r0, r5
 8006158:	4631      	mov	r1, r6
 800615a:	f7fa fdb5 	bl	8000cc8 <__aeabi_uldivmod>
 800615e:	4603      	mov	r3, r0
 8006160:	460c      	mov	r4, r1
 8006162:	461a      	mov	r2, r3
 8006164:	4bb8      	ldr	r3, [pc, #736]	; (8006448 <UART_SetConfig+0x6f4>)
 8006166:	fba3 2302 	umull	r2, r3, r3, r2
 800616a:	095b      	lsrs	r3, r3, #5
 800616c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	469b      	mov	fp, r3
 8006174:	f04f 0c00 	mov.w	ip, #0
 8006178:	46d9      	mov	r9, fp
 800617a:	46e2      	mov	sl, ip
 800617c:	eb19 0309 	adds.w	r3, r9, r9
 8006180:	eb4a 040a 	adc.w	r4, sl, sl
 8006184:	4699      	mov	r9, r3
 8006186:	46a2      	mov	sl, r4
 8006188:	eb19 090b 	adds.w	r9, r9, fp
 800618c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006190:	f04f 0100 	mov.w	r1, #0
 8006194:	f04f 0200 	mov.w	r2, #0
 8006198:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800619c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80061a4:	4689      	mov	r9, r1
 80061a6:	4692      	mov	sl, r2
 80061a8:	eb1b 0509 	adds.w	r5, fp, r9
 80061ac:	eb4c 060a 	adc.w	r6, ip, sl
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	4619      	mov	r1, r3
 80061b6:	f04f 0200 	mov.w	r2, #0
 80061ba:	f04f 0300 	mov.w	r3, #0
 80061be:	f04f 0400 	mov.w	r4, #0
 80061c2:	0094      	lsls	r4, r2, #2
 80061c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80061c8:	008b      	lsls	r3, r1, #2
 80061ca:	461a      	mov	r2, r3
 80061cc:	4623      	mov	r3, r4
 80061ce:	4628      	mov	r0, r5
 80061d0:	4631      	mov	r1, r6
 80061d2:	f7fa fd79 	bl	8000cc8 <__aeabi_uldivmod>
 80061d6:	4603      	mov	r3, r0
 80061d8:	460c      	mov	r4, r1
 80061da:	461a      	mov	r2, r3
 80061dc:	4b9a      	ldr	r3, [pc, #616]	; (8006448 <UART_SetConfig+0x6f4>)
 80061de:	fba3 1302 	umull	r1, r3, r3, r2
 80061e2:	095b      	lsrs	r3, r3, #5
 80061e4:	2164      	movs	r1, #100	; 0x64
 80061e6:	fb01 f303 	mul.w	r3, r1, r3
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	011b      	lsls	r3, r3, #4
 80061ee:	3332      	adds	r3, #50	; 0x32
 80061f0:	4a95      	ldr	r2, [pc, #596]	; (8006448 <UART_SetConfig+0x6f4>)
 80061f2:	fba2 2303 	umull	r2, r3, r2, r3
 80061f6:	095b      	lsrs	r3, r3, #5
 80061f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061fc:	4498      	add	r8, r3
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	469b      	mov	fp, r3
 8006202:	f04f 0c00 	mov.w	ip, #0
 8006206:	46d9      	mov	r9, fp
 8006208:	46e2      	mov	sl, ip
 800620a:	eb19 0309 	adds.w	r3, r9, r9
 800620e:	eb4a 040a 	adc.w	r4, sl, sl
 8006212:	4699      	mov	r9, r3
 8006214:	46a2      	mov	sl, r4
 8006216:	eb19 090b 	adds.w	r9, r9, fp
 800621a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800621e:	f04f 0100 	mov.w	r1, #0
 8006222:	f04f 0200 	mov.w	r2, #0
 8006226:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800622a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800622e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006232:	4689      	mov	r9, r1
 8006234:	4692      	mov	sl, r2
 8006236:	eb1b 0509 	adds.w	r5, fp, r9
 800623a:	eb4c 060a 	adc.w	r6, ip, sl
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	4619      	mov	r1, r3
 8006244:	f04f 0200 	mov.w	r2, #0
 8006248:	f04f 0300 	mov.w	r3, #0
 800624c:	f04f 0400 	mov.w	r4, #0
 8006250:	0094      	lsls	r4, r2, #2
 8006252:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006256:	008b      	lsls	r3, r1, #2
 8006258:	461a      	mov	r2, r3
 800625a:	4623      	mov	r3, r4
 800625c:	4628      	mov	r0, r5
 800625e:	4631      	mov	r1, r6
 8006260:	f7fa fd32 	bl	8000cc8 <__aeabi_uldivmod>
 8006264:	4603      	mov	r3, r0
 8006266:	460c      	mov	r4, r1
 8006268:	461a      	mov	r2, r3
 800626a:	4b77      	ldr	r3, [pc, #476]	; (8006448 <UART_SetConfig+0x6f4>)
 800626c:	fba3 1302 	umull	r1, r3, r3, r2
 8006270:	095b      	lsrs	r3, r3, #5
 8006272:	2164      	movs	r1, #100	; 0x64
 8006274:	fb01 f303 	mul.w	r3, r1, r3
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	011b      	lsls	r3, r3, #4
 800627c:	3332      	adds	r3, #50	; 0x32
 800627e:	4a72      	ldr	r2, [pc, #456]	; (8006448 <UART_SetConfig+0x6f4>)
 8006280:	fba2 2303 	umull	r2, r3, r2, r3
 8006284:	095b      	lsrs	r3, r3, #5
 8006286:	f003 020f 	and.w	r2, r3, #15
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4442      	add	r2, r8
 8006290:	609a      	str	r2, [r3, #8]
 8006292:	e0d0      	b.n	8006436 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006294:	f7fe f8c6 	bl	8004424 <HAL_RCC_GetPCLK1Freq>
 8006298:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	469a      	mov	sl, r3
 800629e:	f04f 0b00 	mov.w	fp, #0
 80062a2:	46d0      	mov	r8, sl
 80062a4:	46d9      	mov	r9, fp
 80062a6:	eb18 0308 	adds.w	r3, r8, r8
 80062aa:	eb49 0409 	adc.w	r4, r9, r9
 80062ae:	4698      	mov	r8, r3
 80062b0:	46a1      	mov	r9, r4
 80062b2:	eb18 080a 	adds.w	r8, r8, sl
 80062b6:	eb49 090b 	adc.w	r9, r9, fp
 80062ba:	f04f 0100 	mov.w	r1, #0
 80062be:	f04f 0200 	mov.w	r2, #0
 80062c2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80062c6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80062ca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80062ce:	4688      	mov	r8, r1
 80062d0:	4691      	mov	r9, r2
 80062d2:	eb1a 0508 	adds.w	r5, sl, r8
 80062d6:	eb4b 0609 	adc.w	r6, fp, r9
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	4619      	mov	r1, r3
 80062e0:	f04f 0200 	mov.w	r2, #0
 80062e4:	f04f 0300 	mov.w	r3, #0
 80062e8:	f04f 0400 	mov.w	r4, #0
 80062ec:	0094      	lsls	r4, r2, #2
 80062ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80062f2:	008b      	lsls	r3, r1, #2
 80062f4:	461a      	mov	r2, r3
 80062f6:	4623      	mov	r3, r4
 80062f8:	4628      	mov	r0, r5
 80062fa:	4631      	mov	r1, r6
 80062fc:	f7fa fce4 	bl	8000cc8 <__aeabi_uldivmod>
 8006300:	4603      	mov	r3, r0
 8006302:	460c      	mov	r4, r1
 8006304:	461a      	mov	r2, r3
 8006306:	4b50      	ldr	r3, [pc, #320]	; (8006448 <UART_SetConfig+0x6f4>)
 8006308:	fba3 2302 	umull	r2, r3, r3, r2
 800630c:	095b      	lsrs	r3, r3, #5
 800630e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	469b      	mov	fp, r3
 8006316:	f04f 0c00 	mov.w	ip, #0
 800631a:	46d9      	mov	r9, fp
 800631c:	46e2      	mov	sl, ip
 800631e:	eb19 0309 	adds.w	r3, r9, r9
 8006322:	eb4a 040a 	adc.w	r4, sl, sl
 8006326:	4699      	mov	r9, r3
 8006328:	46a2      	mov	sl, r4
 800632a:	eb19 090b 	adds.w	r9, r9, fp
 800632e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006332:	f04f 0100 	mov.w	r1, #0
 8006336:	f04f 0200 	mov.w	r2, #0
 800633a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800633e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006342:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006346:	4689      	mov	r9, r1
 8006348:	4692      	mov	sl, r2
 800634a:	eb1b 0509 	adds.w	r5, fp, r9
 800634e:	eb4c 060a 	adc.w	r6, ip, sl
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	4619      	mov	r1, r3
 8006358:	f04f 0200 	mov.w	r2, #0
 800635c:	f04f 0300 	mov.w	r3, #0
 8006360:	f04f 0400 	mov.w	r4, #0
 8006364:	0094      	lsls	r4, r2, #2
 8006366:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800636a:	008b      	lsls	r3, r1, #2
 800636c:	461a      	mov	r2, r3
 800636e:	4623      	mov	r3, r4
 8006370:	4628      	mov	r0, r5
 8006372:	4631      	mov	r1, r6
 8006374:	f7fa fca8 	bl	8000cc8 <__aeabi_uldivmod>
 8006378:	4603      	mov	r3, r0
 800637a:	460c      	mov	r4, r1
 800637c:	461a      	mov	r2, r3
 800637e:	4b32      	ldr	r3, [pc, #200]	; (8006448 <UART_SetConfig+0x6f4>)
 8006380:	fba3 1302 	umull	r1, r3, r3, r2
 8006384:	095b      	lsrs	r3, r3, #5
 8006386:	2164      	movs	r1, #100	; 0x64
 8006388:	fb01 f303 	mul.w	r3, r1, r3
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	011b      	lsls	r3, r3, #4
 8006390:	3332      	adds	r3, #50	; 0x32
 8006392:	4a2d      	ldr	r2, [pc, #180]	; (8006448 <UART_SetConfig+0x6f4>)
 8006394:	fba2 2303 	umull	r2, r3, r2, r3
 8006398:	095b      	lsrs	r3, r3, #5
 800639a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800639e:	4498      	add	r8, r3
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	469b      	mov	fp, r3
 80063a4:	f04f 0c00 	mov.w	ip, #0
 80063a8:	46d9      	mov	r9, fp
 80063aa:	46e2      	mov	sl, ip
 80063ac:	eb19 0309 	adds.w	r3, r9, r9
 80063b0:	eb4a 040a 	adc.w	r4, sl, sl
 80063b4:	4699      	mov	r9, r3
 80063b6:	46a2      	mov	sl, r4
 80063b8:	eb19 090b 	adds.w	r9, r9, fp
 80063bc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80063c0:	f04f 0100 	mov.w	r1, #0
 80063c4:	f04f 0200 	mov.w	r2, #0
 80063c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80063d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80063d4:	4689      	mov	r9, r1
 80063d6:	4692      	mov	sl, r2
 80063d8:	eb1b 0509 	adds.w	r5, fp, r9
 80063dc:	eb4c 060a 	adc.w	r6, ip, sl
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	4619      	mov	r1, r3
 80063e6:	f04f 0200 	mov.w	r2, #0
 80063ea:	f04f 0300 	mov.w	r3, #0
 80063ee:	f04f 0400 	mov.w	r4, #0
 80063f2:	0094      	lsls	r4, r2, #2
 80063f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80063f8:	008b      	lsls	r3, r1, #2
 80063fa:	461a      	mov	r2, r3
 80063fc:	4623      	mov	r3, r4
 80063fe:	4628      	mov	r0, r5
 8006400:	4631      	mov	r1, r6
 8006402:	f7fa fc61 	bl	8000cc8 <__aeabi_uldivmod>
 8006406:	4603      	mov	r3, r0
 8006408:	460c      	mov	r4, r1
 800640a:	461a      	mov	r2, r3
 800640c:	4b0e      	ldr	r3, [pc, #56]	; (8006448 <UART_SetConfig+0x6f4>)
 800640e:	fba3 1302 	umull	r1, r3, r3, r2
 8006412:	095b      	lsrs	r3, r3, #5
 8006414:	2164      	movs	r1, #100	; 0x64
 8006416:	fb01 f303 	mul.w	r3, r1, r3
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	011b      	lsls	r3, r3, #4
 800641e:	3332      	adds	r3, #50	; 0x32
 8006420:	4a09      	ldr	r2, [pc, #36]	; (8006448 <UART_SetConfig+0x6f4>)
 8006422:	fba2 2303 	umull	r2, r3, r2, r3
 8006426:	095b      	lsrs	r3, r3, #5
 8006428:	f003 020f 	and.w	r2, r3, #15
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4442      	add	r2, r8
 8006432:	609a      	str	r2, [r3, #8]
}
 8006434:	e7ff      	b.n	8006436 <UART_SetConfig+0x6e2>
 8006436:	bf00      	nop
 8006438:	3714      	adds	r7, #20
 800643a:	46bd      	mov	sp, r7
 800643c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006440:	40011000 	.word	0x40011000
 8006444:	40011400 	.word	0x40011400
 8006448:	51eb851f 	.word	0x51eb851f

0800644c <__errno>:
 800644c:	4b01      	ldr	r3, [pc, #4]	; (8006454 <__errno+0x8>)
 800644e:	6818      	ldr	r0, [r3, #0]
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop
 8006454:	20000048 	.word	0x20000048

08006458 <__libc_init_array>:
 8006458:	b570      	push	{r4, r5, r6, lr}
 800645a:	4e0d      	ldr	r6, [pc, #52]	; (8006490 <__libc_init_array+0x38>)
 800645c:	4c0d      	ldr	r4, [pc, #52]	; (8006494 <__libc_init_array+0x3c>)
 800645e:	1ba4      	subs	r4, r4, r6
 8006460:	10a4      	asrs	r4, r4, #2
 8006462:	2500      	movs	r5, #0
 8006464:	42a5      	cmp	r5, r4
 8006466:	d109      	bne.n	800647c <__libc_init_array+0x24>
 8006468:	4e0b      	ldr	r6, [pc, #44]	; (8006498 <__libc_init_array+0x40>)
 800646a:	4c0c      	ldr	r4, [pc, #48]	; (800649c <__libc_init_array+0x44>)
 800646c:	f003 fd58 	bl	8009f20 <_init>
 8006470:	1ba4      	subs	r4, r4, r6
 8006472:	10a4      	asrs	r4, r4, #2
 8006474:	2500      	movs	r5, #0
 8006476:	42a5      	cmp	r5, r4
 8006478:	d105      	bne.n	8006486 <__libc_init_array+0x2e>
 800647a:	bd70      	pop	{r4, r5, r6, pc}
 800647c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006480:	4798      	blx	r3
 8006482:	3501      	adds	r5, #1
 8006484:	e7ee      	b.n	8006464 <__libc_init_array+0xc>
 8006486:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800648a:	4798      	blx	r3
 800648c:	3501      	adds	r5, #1
 800648e:	e7f2      	b.n	8006476 <__libc_init_array+0x1e>
 8006490:	0800a9d0 	.word	0x0800a9d0
 8006494:	0800a9d0 	.word	0x0800a9d0
 8006498:	0800a9d0 	.word	0x0800a9d0
 800649c:	0800a9d4 	.word	0x0800a9d4

080064a0 <memcpy>:
 80064a0:	b510      	push	{r4, lr}
 80064a2:	1e43      	subs	r3, r0, #1
 80064a4:	440a      	add	r2, r1
 80064a6:	4291      	cmp	r1, r2
 80064a8:	d100      	bne.n	80064ac <memcpy+0xc>
 80064aa:	bd10      	pop	{r4, pc}
 80064ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064b4:	e7f7      	b.n	80064a6 <memcpy+0x6>

080064b6 <memmove>:
 80064b6:	4288      	cmp	r0, r1
 80064b8:	b510      	push	{r4, lr}
 80064ba:	eb01 0302 	add.w	r3, r1, r2
 80064be:	d807      	bhi.n	80064d0 <memmove+0x1a>
 80064c0:	1e42      	subs	r2, r0, #1
 80064c2:	4299      	cmp	r1, r3
 80064c4:	d00a      	beq.n	80064dc <memmove+0x26>
 80064c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064ca:	f802 4f01 	strb.w	r4, [r2, #1]!
 80064ce:	e7f8      	b.n	80064c2 <memmove+0xc>
 80064d0:	4283      	cmp	r3, r0
 80064d2:	d9f5      	bls.n	80064c0 <memmove+0xa>
 80064d4:	1881      	adds	r1, r0, r2
 80064d6:	1ad2      	subs	r2, r2, r3
 80064d8:	42d3      	cmn	r3, r2
 80064da:	d100      	bne.n	80064de <memmove+0x28>
 80064dc:	bd10      	pop	{r4, pc}
 80064de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80064e2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80064e6:	e7f7      	b.n	80064d8 <memmove+0x22>

080064e8 <memset>:
 80064e8:	4402      	add	r2, r0
 80064ea:	4603      	mov	r3, r0
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d100      	bne.n	80064f2 <memset+0xa>
 80064f0:	4770      	bx	lr
 80064f2:	f803 1b01 	strb.w	r1, [r3], #1
 80064f6:	e7f9      	b.n	80064ec <memset+0x4>

080064f8 <__cvt>:
 80064f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064fc:	ec55 4b10 	vmov	r4, r5, d0
 8006500:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006502:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006506:	2d00      	cmp	r5, #0
 8006508:	460e      	mov	r6, r1
 800650a:	4691      	mov	r9, r2
 800650c:	4619      	mov	r1, r3
 800650e:	bfb8      	it	lt
 8006510:	4622      	movlt	r2, r4
 8006512:	462b      	mov	r3, r5
 8006514:	f027 0720 	bic.w	r7, r7, #32
 8006518:	bfbb      	ittet	lt
 800651a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800651e:	461d      	movlt	r5, r3
 8006520:	2300      	movge	r3, #0
 8006522:	232d      	movlt	r3, #45	; 0x2d
 8006524:	bfb8      	it	lt
 8006526:	4614      	movlt	r4, r2
 8006528:	2f46      	cmp	r7, #70	; 0x46
 800652a:	700b      	strb	r3, [r1, #0]
 800652c:	d004      	beq.n	8006538 <__cvt+0x40>
 800652e:	2f45      	cmp	r7, #69	; 0x45
 8006530:	d100      	bne.n	8006534 <__cvt+0x3c>
 8006532:	3601      	adds	r6, #1
 8006534:	2102      	movs	r1, #2
 8006536:	e000      	b.n	800653a <__cvt+0x42>
 8006538:	2103      	movs	r1, #3
 800653a:	ab03      	add	r3, sp, #12
 800653c:	9301      	str	r3, [sp, #4]
 800653e:	ab02      	add	r3, sp, #8
 8006540:	9300      	str	r3, [sp, #0]
 8006542:	4632      	mov	r2, r6
 8006544:	4653      	mov	r3, sl
 8006546:	ec45 4b10 	vmov	d0, r4, r5
 800654a:	f001 fd75 	bl	8008038 <_dtoa_r>
 800654e:	2f47      	cmp	r7, #71	; 0x47
 8006550:	4680      	mov	r8, r0
 8006552:	d102      	bne.n	800655a <__cvt+0x62>
 8006554:	f019 0f01 	tst.w	r9, #1
 8006558:	d026      	beq.n	80065a8 <__cvt+0xb0>
 800655a:	2f46      	cmp	r7, #70	; 0x46
 800655c:	eb08 0906 	add.w	r9, r8, r6
 8006560:	d111      	bne.n	8006586 <__cvt+0x8e>
 8006562:	f898 3000 	ldrb.w	r3, [r8]
 8006566:	2b30      	cmp	r3, #48	; 0x30
 8006568:	d10a      	bne.n	8006580 <__cvt+0x88>
 800656a:	2200      	movs	r2, #0
 800656c:	2300      	movs	r3, #0
 800656e:	4620      	mov	r0, r4
 8006570:	4629      	mov	r1, r5
 8006572:	f7fa fac9 	bl	8000b08 <__aeabi_dcmpeq>
 8006576:	b918      	cbnz	r0, 8006580 <__cvt+0x88>
 8006578:	f1c6 0601 	rsb	r6, r6, #1
 800657c:	f8ca 6000 	str.w	r6, [sl]
 8006580:	f8da 3000 	ldr.w	r3, [sl]
 8006584:	4499      	add	r9, r3
 8006586:	2200      	movs	r2, #0
 8006588:	2300      	movs	r3, #0
 800658a:	4620      	mov	r0, r4
 800658c:	4629      	mov	r1, r5
 800658e:	f7fa fabb 	bl	8000b08 <__aeabi_dcmpeq>
 8006592:	b938      	cbnz	r0, 80065a4 <__cvt+0xac>
 8006594:	2230      	movs	r2, #48	; 0x30
 8006596:	9b03      	ldr	r3, [sp, #12]
 8006598:	454b      	cmp	r3, r9
 800659a:	d205      	bcs.n	80065a8 <__cvt+0xb0>
 800659c:	1c59      	adds	r1, r3, #1
 800659e:	9103      	str	r1, [sp, #12]
 80065a0:	701a      	strb	r2, [r3, #0]
 80065a2:	e7f8      	b.n	8006596 <__cvt+0x9e>
 80065a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80065a8:	9b03      	ldr	r3, [sp, #12]
 80065aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065ac:	eba3 0308 	sub.w	r3, r3, r8
 80065b0:	4640      	mov	r0, r8
 80065b2:	6013      	str	r3, [r2, #0]
 80065b4:	b004      	add	sp, #16
 80065b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080065ba <__exponent>:
 80065ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065bc:	2900      	cmp	r1, #0
 80065be:	4604      	mov	r4, r0
 80065c0:	bfba      	itte	lt
 80065c2:	4249      	neglt	r1, r1
 80065c4:	232d      	movlt	r3, #45	; 0x2d
 80065c6:	232b      	movge	r3, #43	; 0x2b
 80065c8:	2909      	cmp	r1, #9
 80065ca:	f804 2b02 	strb.w	r2, [r4], #2
 80065ce:	7043      	strb	r3, [r0, #1]
 80065d0:	dd20      	ble.n	8006614 <__exponent+0x5a>
 80065d2:	f10d 0307 	add.w	r3, sp, #7
 80065d6:	461f      	mov	r7, r3
 80065d8:	260a      	movs	r6, #10
 80065da:	fb91 f5f6 	sdiv	r5, r1, r6
 80065de:	fb06 1115 	mls	r1, r6, r5, r1
 80065e2:	3130      	adds	r1, #48	; 0x30
 80065e4:	2d09      	cmp	r5, #9
 80065e6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80065ea:	f103 32ff 	add.w	r2, r3, #4294967295
 80065ee:	4629      	mov	r1, r5
 80065f0:	dc09      	bgt.n	8006606 <__exponent+0x4c>
 80065f2:	3130      	adds	r1, #48	; 0x30
 80065f4:	3b02      	subs	r3, #2
 80065f6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80065fa:	42bb      	cmp	r3, r7
 80065fc:	4622      	mov	r2, r4
 80065fe:	d304      	bcc.n	800660a <__exponent+0x50>
 8006600:	1a10      	subs	r0, r2, r0
 8006602:	b003      	add	sp, #12
 8006604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006606:	4613      	mov	r3, r2
 8006608:	e7e7      	b.n	80065da <__exponent+0x20>
 800660a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800660e:	f804 2b01 	strb.w	r2, [r4], #1
 8006612:	e7f2      	b.n	80065fa <__exponent+0x40>
 8006614:	2330      	movs	r3, #48	; 0x30
 8006616:	4419      	add	r1, r3
 8006618:	7083      	strb	r3, [r0, #2]
 800661a:	1d02      	adds	r2, r0, #4
 800661c:	70c1      	strb	r1, [r0, #3]
 800661e:	e7ef      	b.n	8006600 <__exponent+0x46>

08006620 <_printf_float>:
 8006620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006624:	b08d      	sub	sp, #52	; 0x34
 8006626:	460c      	mov	r4, r1
 8006628:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800662c:	4616      	mov	r6, r2
 800662e:	461f      	mov	r7, r3
 8006630:	4605      	mov	r5, r0
 8006632:	f002 fde5 	bl	8009200 <_localeconv_r>
 8006636:	6803      	ldr	r3, [r0, #0]
 8006638:	9304      	str	r3, [sp, #16]
 800663a:	4618      	mov	r0, r3
 800663c:	f7f9 fde8 	bl	8000210 <strlen>
 8006640:	2300      	movs	r3, #0
 8006642:	930a      	str	r3, [sp, #40]	; 0x28
 8006644:	f8d8 3000 	ldr.w	r3, [r8]
 8006648:	9005      	str	r0, [sp, #20]
 800664a:	3307      	adds	r3, #7
 800664c:	f023 0307 	bic.w	r3, r3, #7
 8006650:	f103 0208 	add.w	r2, r3, #8
 8006654:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006658:	f8d4 b000 	ldr.w	fp, [r4]
 800665c:	f8c8 2000 	str.w	r2, [r8]
 8006660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006664:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006668:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800666c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006670:	9307      	str	r3, [sp, #28]
 8006672:	f8cd 8018 	str.w	r8, [sp, #24]
 8006676:	f04f 32ff 	mov.w	r2, #4294967295
 800667a:	4ba7      	ldr	r3, [pc, #668]	; (8006918 <_printf_float+0x2f8>)
 800667c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006680:	f7fa fa74 	bl	8000b6c <__aeabi_dcmpun>
 8006684:	bb70      	cbnz	r0, 80066e4 <_printf_float+0xc4>
 8006686:	f04f 32ff 	mov.w	r2, #4294967295
 800668a:	4ba3      	ldr	r3, [pc, #652]	; (8006918 <_printf_float+0x2f8>)
 800668c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006690:	f7fa fa4e 	bl	8000b30 <__aeabi_dcmple>
 8006694:	bb30      	cbnz	r0, 80066e4 <_printf_float+0xc4>
 8006696:	2200      	movs	r2, #0
 8006698:	2300      	movs	r3, #0
 800669a:	4640      	mov	r0, r8
 800669c:	4649      	mov	r1, r9
 800669e:	f7fa fa3d 	bl	8000b1c <__aeabi_dcmplt>
 80066a2:	b110      	cbz	r0, 80066aa <_printf_float+0x8a>
 80066a4:	232d      	movs	r3, #45	; 0x2d
 80066a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066aa:	4a9c      	ldr	r2, [pc, #624]	; (800691c <_printf_float+0x2fc>)
 80066ac:	4b9c      	ldr	r3, [pc, #624]	; (8006920 <_printf_float+0x300>)
 80066ae:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80066b2:	bf8c      	ite	hi
 80066b4:	4690      	movhi	r8, r2
 80066b6:	4698      	movls	r8, r3
 80066b8:	2303      	movs	r3, #3
 80066ba:	f02b 0204 	bic.w	r2, fp, #4
 80066be:	6123      	str	r3, [r4, #16]
 80066c0:	6022      	str	r2, [r4, #0]
 80066c2:	f04f 0900 	mov.w	r9, #0
 80066c6:	9700      	str	r7, [sp, #0]
 80066c8:	4633      	mov	r3, r6
 80066ca:	aa0b      	add	r2, sp, #44	; 0x2c
 80066cc:	4621      	mov	r1, r4
 80066ce:	4628      	mov	r0, r5
 80066d0:	f000 f9e6 	bl	8006aa0 <_printf_common>
 80066d4:	3001      	adds	r0, #1
 80066d6:	f040 808d 	bne.w	80067f4 <_printf_float+0x1d4>
 80066da:	f04f 30ff 	mov.w	r0, #4294967295
 80066de:	b00d      	add	sp, #52	; 0x34
 80066e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066e4:	4642      	mov	r2, r8
 80066e6:	464b      	mov	r3, r9
 80066e8:	4640      	mov	r0, r8
 80066ea:	4649      	mov	r1, r9
 80066ec:	f7fa fa3e 	bl	8000b6c <__aeabi_dcmpun>
 80066f0:	b110      	cbz	r0, 80066f8 <_printf_float+0xd8>
 80066f2:	4a8c      	ldr	r2, [pc, #560]	; (8006924 <_printf_float+0x304>)
 80066f4:	4b8c      	ldr	r3, [pc, #560]	; (8006928 <_printf_float+0x308>)
 80066f6:	e7da      	b.n	80066ae <_printf_float+0x8e>
 80066f8:	6861      	ldr	r1, [r4, #4]
 80066fa:	1c4b      	adds	r3, r1, #1
 80066fc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006700:	a80a      	add	r0, sp, #40	; 0x28
 8006702:	d13e      	bne.n	8006782 <_printf_float+0x162>
 8006704:	2306      	movs	r3, #6
 8006706:	6063      	str	r3, [r4, #4]
 8006708:	2300      	movs	r3, #0
 800670a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800670e:	ab09      	add	r3, sp, #36	; 0x24
 8006710:	9300      	str	r3, [sp, #0]
 8006712:	ec49 8b10 	vmov	d0, r8, r9
 8006716:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800671a:	6022      	str	r2, [r4, #0]
 800671c:	f8cd a004 	str.w	sl, [sp, #4]
 8006720:	6861      	ldr	r1, [r4, #4]
 8006722:	4628      	mov	r0, r5
 8006724:	f7ff fee8 	bl	80064f8 <__cvt>
 8006728:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800672c:	2b47      	cmp	r3, #71	; 0x47
 800672e:	4680      	mov	r8, r0
 8006730:	d109      	bne.n	8006746 <_printf_float+0x126>
 8006732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006734:	1cd8      	adds	r0, r3, #3
 8006736:	db02      	blt.n	800673e <_printf_float+0x11e>
 8006738:	6862      	ldr	r2, [r4, #4]
 800673a:	4293      	cmp	r3, r2
 800673c:	dd47      	ble.n	80067ce <_printf_float+0x1ae>
 800673e:	f1aa 0a02 	sub.w	sl, sl, #2
 8006742:	fa5f fa8a 	uxtb.w	sl, sl
 8006746:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800674a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800674c:	d824      	bhi.n	8006798 <_printf_float+0x178>
 800674e:	3901      	subs	r1, #1
 8006750:	4652      	mov	r2, sl
 8006752:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006756:	9109      	str	r1, [sp, #36]	; 0x24
 8006758:	f7ff ff2f 	bl	80065ba <__exponent>
 800675c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800675e:	1813      	adds	r3, r2, r0
 8006760:	2a01      	cmp	r2, #1
 8006762:	4681      	mov	r9, r0
 8006764:	6123      	str	r3, [r4, #16]
 8006766:	dc02      	bgt.n	800676e <_printf_float+0x14e>
 8006768:	6822      	ldr	r2, [r4, #0]
 800676a:	07d1      	lsls	r1, r2, #31
 800676c:	d501      	bpl.n	8006772 <_printf_float+0x152>
 800676e:	3301      	adds	r3, #1
 8006770:	6123      	str	r3, [r4, #16]
 8006772:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006776:	2b00      	cmp	r3, #0
 8006778:	d0a5      	beq.n	80066c6 <_printf_float+0xa6>
 800677a:	232d      	movs	r3, #45	; 0x2d
 800677c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006780:	e7a1      	b.n	80066c6 <_printf_float+0xa6>
 8006782:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8006786:	f000 8177 	beq.w	8006a78 <_printf_float+0x458>
 800678a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800678e:	d1bb      	bne.n	8006708 <_printf_float+0xe8>
 8006790:	2900      	cmp	r1, #0
 8006792:	d1b9      	bne.n	8006708 <_printf_float+0xe8>
 8006794:	2301      	movs	r3, #1
 8006796:	e7b6      	b.n	8006706 <_printf_float+0xe6>
 8006798:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800679c:	d119      	bne.n	80067d2 <_printf_float+0x1b2>
 800679e:	2900      	cmp	r1, #0
 80067a0:	6863      	ldr	r3, [r4, #4]
 80067a2:	dd0c      	ble.n	80067be <_printf_float+0x19e>
 80067a4:	6121      	str	r1, [r4, #16]
 80067a6:	b913      	cbnz	r3, 80067ae <_printf_float+0x18e>
 80067a8:	6822      	ldr	r2, [r4, #0]
 80067aa:	07d2      	lsls	r2, r2, #31
 80067ac:	d502      	bpl.n	80067b4 <_printf_float+0x194>
 80067ae:	3301      	adds	r3, #1
 80067b0:	440b      	add	r3, r1
 80067b2:	6123      	str	r3, [r4, #16]
 80067b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067b6:	65a3      	str	r3, [r4, #88]	; 0x58
 80067b8:	f04f 0900 	mov.w	r9, #0
 80067bc:	e7d9      	b.n	8006772 <_printf_float+0x152>
 80067be:	b913      	cbnz	r3, 80067c6 <_printf_float+0x1a6>
 80067c0:	6822      	ldr	r2, [r4, #0]
 80067c2:	07d0      	lsls	r0, r2, #31
 80067c4:	d501      	bpl.n	80067ca <_printf_float+0x1aa>
 80067c6:	3302      	adds	r3, #2
 80067c8:	e7f3      	b.n	80067b2 <_printf_float+0x192>
 80067ca:	2301      	movs	r3, #1
 80067cc:	e7f1      	b.n	80067b2 <_printf_float+0x192>
 80067ce:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80067d2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80067d6:	4293      	cmp	r3, r2
 80067d8:	db05      	blt.n	80067e6 <_printf_float+0x1c6>
 80067da:	6822      	ldr	r2, [r4, #0]
 80067dc:	6123      	str	r3, [r4, #16]
 80067de:	07d1      	lsls	r1, r2, #31
 80067e0:	d5e8      	bpl.n	80067b4 <_printf_float+0x194>
 80067e2:	3301      	adds	r3, #1
 80067e4:	e7e5      	b.n	80067b2 <_printf_float+0x192>
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	bfd4      	ite	le
 80067ea:	f1c3 0302 	rsble	r3, r3, #2
 80067ee:	2301      	movgt	r3, #1
 80067f0:	4413      	add	r3, r2
 80067f2:	e7de      	b.n	80067b2 <_printf_float+0x192>
 80067f4:	6823      	ldr	r3, [r4, #0]
 80067f6:	055a      	lsls	r2, r3, #21
 80067f8:	d407      	bmi.n	800680a <_printf_float+0x1ea>
 80067fa:	6923      	ldr	r3, [r4, #16]
 80067fc:	4642      	mov	r2, r8
 80067fe:	4631      	mov	r1, r6
 8006800:	4628      	mov	r0, r5
 8006802:	47b8      	blx	r7
 8006804:	3001      	adds	r0, #1
 8006806:	d12b      	bne.n	8006860 <_printf_float+0x240>
 8006808:	e767      	b.n	80066da <_printf_float+0xba>
 800680a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800680e:	f240 80dc 	bls.w	80069ca <_printf_float+0x3aa>
 8006812:	2200      	movs	r2, #0
 8006814:	2300      	movs	r3, #0
 8006816:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800681a:	f7fa f975 	bl	8000b08 <__aeabi_dcmpeq>
 800681e:	2800      	cmp	r0, #0
 8006820:	d033      	beq.n	800688a <_printf_float+0x26a>
 8006822:	2301      	movs	r3, #1
 8006824:	4a41      	ldr	r2, [pc, #260]	; (800692c <_printf_float+0x30c>)
 8006826:	4631      	mov	r1, r6
 8006828:	4628      	mov	r0, r5
 800682a:	47b8      	blx	r7
 800682c:	3001      	adds	r0, #1
 800682e:	f43f af54 	beq.w	80066da <_printf_float+0xba>
 8006832:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006836:	429a      	cmp	r2, r3
 8006838:	db02      	blt.n	8006840 <_printf_float+0x220>
 800683a:	6823      	ldr	r3, [r4, #0]
 800683c:	07d8      	lsls	r0, r3, #31
 800683e:	d50f      	bpl.n	8006860 <_printf_float+0x240>
 8006840:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006844:	4631      	mov	r1, r6
 8006846:	4628      	mov	r0, r5
 8006848:	47b8      	blx	r7
 800684a:	3001      	adds	r0, #1
 800684c:	f43f af45 	beq.w	80066da <_printf_float+0xba>
 8006850:	f04f 0800 	mov.w	r8, #0
 8006854:	f104 091a 	add.w	r9, r4, #26
 8006858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800685a:	3b01      	subs	r3, #1
 800685c:	4543      	cmp	r3, r8
 800685e:	dc09      	bgt.n	8006874 <_printf_float+0x254>
 8006860:	6823      	ldr	r3, [r4, #0]
 8006862:	079b      	lsls	r3, r3, #30
 8006864:	f100 8103 	bmi.w	8006a6e <_printf_float+0x44e>
 8006868:	68e0      	ldr	r0, [r4, #12]
 800686a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800686c:	4298      	cmp	r0, r3
 800686e:	bfb8      	it	lt
 8006870:	4618      	movlt	r0, r3
 8006872:	e734      	b.n	80066de <_printf_float+0xbe>
 8006874:	2301      	movs	r3, #1
 8006876:	464a      	mov	r2, r9
 8006878:	4631      	mov	r1, r6
 800687a:	4628      	mov	r0, r5
 800687c:	47b8      	blx	r7
 800687e:	3001      	adds	r0, #1
 8006880:	f43f af2b 	beq.w	80066da <_printf_float+0xba>
 8006884:	f108 0801 	add.w	r8, r8, #1
 8006888:	e7e6      	b.n	8006858 <_printf_float+0x238>
 800688a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800688c:	2b00      	cmp	r3, #0
 800688e:	dc2b      	bgt.n	80068e8 <_printf_float+0x2c8>
 8006890:	2301      	movs	r3, #1
 8006892:	4a26      	ldr	r2, [pc, #152]	; (800692c <_printf_float+0x30c>)
 8006894:	4631      	mov	r1, r6
 8006896:	4628      	mov	r0, r5
 8006898:	47b8      	blx	r7
 800689a:	3001      	adds	r0, #1
 800689c:	f43f af1d 	beq.w	80066da <_printf_float+0xba>
 80068a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068a2:	b923      	cbnz	r3, 80068ae <_printf_float+0x28e>
 80068a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068a6:	b913      	cbnz	r3, 80068ae <_printf_float+0x28e>
 80068a8:	6823      	ldr	r3, [r4, #0]
 80068aa:	07d9      	lsls	r1, r3, #31
 80068ac:	d5d8      	bpl.n	8006860 <_printf_float+0x240>
 80068ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068b2:	4631      	mov	r1, r6
 80068b4:	4628      	mov	r0, r5
 80068b6:	47b8      	blx	r7
 80068b8:	3001      	adds	r0, #1
 80068ba:	f43f af0e 	beq.w	80066da <_printf_float+0xba>
 80068be:	f04f 0900 	mov.w	r9, #0
 80068c2:	f104 0a1a 	add.w	sl, r4, #26
 80068c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068c8:	425b      	negs	r3, r3
 80068ca:	454b      	cmp	r3, r9
 80068cc:	dc01      	bgt.n	80068d2 <_printf_float+0x2b2>
 80068ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068d0:	e794      	b.n	80067fc <_printf_float+0x1dc>
 80068d2:	2301      	movs	r3, #1
 80068d4:	4652      	mov	r2, sl
 80068d6:	4631      	mov	r1, r6
 80068d8:	4628      	mov	r0, r5
 80068da:	47b8      	blx	r7
 80068dc:	3001      	adds	r0, #1
 80068de:	f43f aefc 	beq.w	80066da <_printf_float+0xba>
 80068e2:	f109 0901 	add.w	r9, r9, #1
 80068e6:	e7ee      	b.n	80068c6 <_printf_float+0x2a6>
 80068e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068ec:	429a      	cmp	r2, r3
 80068ee:	bfa8      	it	ge
 80068f0:	461a      	movge	r2, r3
 80068f2:	2a00      	cmp	r2, #0
 80068f4:	4691      	mov	r9, r2
 80068f6:	dd07      	ble.n	8006908 <_printf_float+0x2e8>
 80068f8:	4613      	mov	r3, r2
 80068fa:	4631      	mov	r1, r6
 80068fc:	4642      	mov	r2, r8
 80068fe:	4628      	mov	r0, r5
 8006900:	47b8      	blx	r7
 8006902:	3001      	adds	r0, #1
 8006904:	f43f aee9 	beq.w	80066da <_printf_float+0xba>
 8006908:	f104 031a 	add.w	r3, r4, #26
 800690c:	f04f 0b00 	mov.w	fp, #0
 8006910:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006914:	9306      	str	r3, [sp, #24]
 8006916:	e015      	b.n	8006944 <_printf_float+0x324>
 8006918:	7fefffff 	.word	0x7fefffff
 800691c:	0800a714 	.word	0x0800a714
 8006920:	0800a710 	.word	0x0800a710
 8006924:	0800a71c 	.word	0x0800a71c
 8006928:	0800a718 	.word	0x0800a718
 800692c:	0800a720 	.word	0x0800a720
 8006930:	2301      	movs	r3, #1
 8006932:	9a06      	ldr	r2, [sp, #24]
 8006934:	4631      	mov	r1, r6
 8006936:	4628      	mov	r0, r5
 8006938:	47b8      	blx	r7
 800693a:	3001      	adds	r0, #1
 800693c:	f43f aecd 	beq.w	80066da <_printf_float+0xba>
 8006940:	f10b 0b01 	add.w	fp, fp, #1
 8006944:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006948:	ebaa 0309 	sub.w	r3, sl, r9
 800694c:	455b      	cmp	r3, fp
 800694e:	dcef      	bgt.n	8006930 <_printf_float+0x310>
 8006950:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006954:	429a      	cmp	r2, r3
 8006956:	44d0      	add	r8, sl
 8006958:	db15      	blt.n	8006986 <_printf_float+0x366>
 800695a:	6823      	ldr	r3, [r4, #0]
 800695c:	07da      	lsls	r2, r3, #31
 800695e:	d412      	bmi.n	8006986 <_printf_float+0x366>
 8006960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006962:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006964:	eba3 020a 	sub.w	r2, r3, sl
 8006968:	eba3 0a01 	sub.w	sl, r3, r1
 800696c:	4592      	cmp	sl, r2
 800696e:	bfa8      	it	ge
 8006970:	4692      	movge	sl, r2
 8006972:	f1ba 0f00 	cmp.w	sl, #0
 8006976:	dc0e      	bgt.n	8006996 <_printf_float+0x376>
 8006978:	f04f 0800 	mov.w	r8, #0
 800697c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006980:	f104 091a 	add.w	r9, r4, #26
 8006984:	e019      	b.n	80069ba <_printf_float+0x39a>
 8006986:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800698a:	4631      	mov	r1, r6
 800698c:	4628      	mov	r0, r5
 800698e:	47b8      	blx	r7
 8006990:	3001      	adds	r0, #1
 8006992:	d1e5      	bne.n	8006960 <_printf_float+0x340>
 8006994:	e6a1      	b.n	80066da <_printf_float+0xba>
 8006996:	4653      	mov	r3, sl
 8006998:	4642      	mov	r2, r8
 800699a:	4631      	mov	r1, r6
 800699c:	4628      	mov	r0, r5
 800699e:	47b8      	blx	r7
 80069a0:	3001      	adds	r0, #1
 80069a2:	d1e9      	bne.n	8006978 <_printf_float+0x358>
 80069a4:	e699      	b.n	80066da <_printf_float+0xba>
 80069a6:	2301      	movs	r3, #1
 80069a8:	464a      	mov	r2, r9
 80069aa:	4631      	mov	r1, r6
 80069ac:	4628      	mov	r0, r5
 80069ae:	47b8      	blx	r7
 80069b0:	3001      	adds	r0, #1
 80069b2:	f43f ae92 	beq.w	80066da <_printf_float+0xba>
 80069b6:	f108 0801 	add.w	r8, r8, #1
 80069ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069be:	1a9b      	subs	r3, r3, r2
 80069c0:	eba3 030a 	sub.w	r3, r3, sl
 80069c4:	4543      	cmp	r3, r8
 80069c6:	dcee      	bgt.n	80069a6 <_printf_float+0x386>
 80069c8:	e74a      	b.n	8006860 <_printf_float+0x240>
 80069ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069cc:	2a01      	cmp	r2, #1
 80069ce:	dc01      	bgt.n	80069d4 <_printf_float+0x3b4>
 80069d0:	07db      	lsls	r3, r3, #31
 80069d2:	d53a      	bpl.n	8006a4a <_printf_float+0x42a>
 80069d4:	2301      	movs	r3, #1
 80069d6:	4642      	mov	r2, r8
 80069d8:	4631      	mov	r1, r6
 80069da:	4628      	mov	r0, r5
 80069dc:	47b8      	blx	r7
 80069de:	3001      	adds	r0, #1
 80069e0:	f43f ae7b 	beq.w	80066da <_printf_float+0xba>
 80069e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069e8:	4631      	mov	r1, r6
 80069ea:	4628      	mov	r0, r5
 80069ec:	47b8      	blx	r7
 80069ee:	3001      	adds	r0, #1
 80069f0:	f108 0801 	add.w	r8, r8, #1
 80069f4:	f43f ae71 	beq.w	80066da <_printf_float+0xba>
 80069f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069fa:	2200      	movs	r2, #0
 80069fc:	f103 3aff 	add.w	sl, r3, #4294967295
 8006a00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a04:	2300      	movs	r3, #0
 8006a06:	f7fa f87f 	bl	8000b08 <__aeabi_dcmpeq>
 8006a0a:	b9c8      	cbnz	r0, 8006a40 <_printf_float+0x420>
 8006a0c:	4653      	mov	r3, sl
 8006a0e:	4642      	mov	r2, r8
 8006a10:	4631      	mov	r1, r6
 8006a12:	4628      	mov	r0, r5
 8006a14:	47b8      	blx	r7
 8006a16:	3001      	adds	r0, #1
 8006a18:	d10e      	bne.n	8006a38 <_printf_float+0x418>
 8006a1a:	e65e      	b.n	80066da <_printf_float+0xba>
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	4652      	mov	r2, sl
 8006a20:	4631      	mov	r1, r6
 8006a22:	4628      	mov	r0, r5
 8006a24:	47b8      	blx	r7
 8006a26:	3001      	adds	r0, #1
 8006a28:	f43f ae57 	beq.w	80066da <_printf_float+0xba>
 8006a2c:	f108 0801 	add.w	r8, r8, #1
 8006a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a32:	3b01      	subs	r3, #1
 8006a34:	4543      	cmp	r3, r8
 8006a36:	dcf1      	bgt.n	8006a1c <_printf_float+0x3fc>
 8006a38:	464b      	mov	r3, r9
 8006a3a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a3e:	e6de      	b.n	80067fe <_printf_float+0x1de>
 8006a40:	f04f 0800 	mov.w	r8, #0
 8006a44:	f104 0a1a 	add.w	sl, r4, #26
 8006a48:	e7f2      	b.n	8006a30 <_printf_float+0x410>
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e7df      	b.n	8006a0e <_printf_float+0x3ee>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	464a      	mov	r2, r9
 8006a52:	4631      	mov	r1, r6
 8006a54:	4628      	mov	r0, r5
 8006a56:	47b8      	blx	r7
 8006a58:	3001      	adds	r0, #1
 8006a5a:	f43f ae3e 	beq.w	80066da <_printf_float+0xba>
 8006a5e:	f108 0801 	add.w	r8, r8, #1
 8006a62:	68e3      	ldr	r3, [r4, #12]
 8006a64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a66:	1a9b      	subs	r3, r3, r2
 8006a68:	4543      	cmp	r3, r8
 8006a6a:	dcf0      	bgt.n	8006a4e <_printf_float+0x42e>
 8006a6c:	e6fc      	b.n	8006868 <_printf_float+0x248>
 8006a6e:	f04f 0800 	mov.w	r8, #0
 8006a72:	f104 0919 	add.w	r9, r4, #25
 8006a76:	e7f4      	b.n	8006a62 <_printf_float+0x442>
 8006a78:	2900      	cmp	r1, #0
 8006a7a:	f43f ae8b 	beq.w	8006794 <_printf_float+0x174>
 8006a7e:	2300      	movs	r3, #0
 8006a80:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006a84:	ab09      	add	r3, sp, #36	; 0x24
 8006a86:	9300      	str	r3, [sp, #0]
 8006a88:	ec49 8b10 	vmov	d0, r8, r9
 8006a8c:	6022      	str	r2, [r4, #0]
 8006a8e:	f8cd a004 	str.w	sl, [sp, #4]
 8006a92:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006a96:	4628      	mov	r0, r5
 8006a98:	f7ff fd2e 	bl	80064f8 <__cvt>
 8006a9c:	4680      	mov	r8, r0
 8006a9e:	e648      	b.n	8006732 <_printf_float+0x112>

08006aa0 <_printf_common>:
 8006aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006aa4:	4691      	mov	r9, r2
 8006aa6:	461f      	mov	r7, r3
 8006aa8:	688a      	ldr	r2, [r1, #8]
 8006aaa:	690b      	ldr	r3, [r1, #16]
 8006aac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	bfb8      	it	lt
 8006ab4:	4613      	movlt	r3, r2
 8006ab6:	f8c9 3000 	str.w	r3, [r9]
 8006aba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006abe:	4606      	mov	r6, r0
 8006ac0:	460c      	mov	r4, r1
 8006ac2:	b112      	cbz	r2, 8006aca <_printf_common+0x2a>
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	f8c9 3000 	str.w	r3, [r9]
 8006aca:	6823      	ldr	r3, [r4, #0]
 8006acc:	0699      	lsls	r1, r3, #26
 8006ace:	bf42      	ittt	mi
 8006ad0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006ad4:	3302      	addmi	r3, #2
 8006ad6:	f8c9 3000 	strmi.w	r3, [r9]
 8006ada:	6825      	ldr	r5, [r4, #0]
 8006adc:	f015 0506 	ands.w	r5, r5, #6
 8006ae0:	d107      	bne.n	8006af2 <_printf_common+0x52>
 8006ae2:	f104 0a19 	add.w	sl, r4, #25
 8006ae6:	68e3      	ldr	r3, [r4, #12]
 8006ae8:	f8d9 2000 	ldr.w	r2, [r9]
 8006aec:	1a9b      	subs	r3, r3, r2
 8006aee:	42ab      	cmp	r3, r5
 8006af0:	dc28      	bgt.n	8006b44 <_printf_common+0xa4>
 8006af2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006af6:	6822      	ldr	r2, [r4, #0]
 8006af8:	3300      	adds	r3, #0
 8006afa:	bf18      	it	ne
 8006afc:	2301      	movne	r3, #1
 8006afe:	0692      	lsls	r2, r2, #26
 8006b00:	d42d      	bmi.n	8006b5e <_printf_common+0xbe>
 8006b02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b06:	4639      	mov	r1, r7
 8006b08:	4630      	mov	r0, r6
 8006b0a:	47c0      	blx	r8
 8006b0c:	3001      	adds	r0, #1
 8006b0e:	d020      	beq.n	8006b52 <_printf_common+0xb2>
 8006b10:	6823      	ldr	r3, [r4, #0]
 8006b12:	68e5      	ldr	r5, [r4, #12]
 8006b14:	f8d9 2000 	ldr.w	r2, [r9]
 8006b18:	f003 0306 	and.w	r3, r3, #6
 8006b1c:	2b04      	cmp	r3, #4
 8006b1e:	bf08      	it	eq
 8006b20:	1aad      	subeq	r5, r5, r2
 8006b22:	68a3      	ldr	r3, [r4, #8]
 8006b24:	6922      	ldr	r2, [r4, #16]
 8006b26:	bf0c      	ite	eq
 8006b28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b2c:	2500      	movne	r5, #0
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	bfc4      	itt	gt
 8006b32:	1a9b      	subgt	r3, r3, r2
 8006b34:	18ed      	addgt	r5, r5, r3
 8006b36:	f04f 0900 	mov.w	r9, #0
 8006b3a:	341a      	adds	r4, #26
 8006b3c:	454d      	cmp	r5, r9
 8006b3e:	d11a      	bne.n	8006b76 <_printf_common+0xd6>
 8006b40:	2000      	movs	r0, #0
 8006b42:	e008      	b.n	8006b56 <_printf_common+0xb6>
 8006b44:	2301      	movs	r3, #1
 8006b46:	4652      	mov	r2, sl
 8006b48:	4639      	mov	r1, r7
 8006b4a:	4630      	mov	r0, r6
 8006b4c:	47c0      	blx	r8
 8006b4e:	3001      	adds	r0, #1
 8006b50:	d103      	bne.n	8006b5a <_printf_common+0xba>
 8006b52:	f04f 30ff 	mov.w	r0, #4294967295
 8006b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b5a:	3501      	adds	r5, #1
 8006b5c:	e7c3      	b.n	8006ae6 <_printf_common+0x46>
 8006b5e:	18e1      	adds	r1, r4, r3
 8006b60:	1c5a      	adds	r2, r3, #1
 8006b62:	2030      	movs	r0, #48	; 0x30
 8006b64:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b68:	4422      	add	r2, r4
 8006b6a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b6e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b72:	3302      	adds	r3, #2
 8006b74:	e7c5      	b.n	8006b02 <_printf_common+0x62>
 8006b76:	2301      	movs	r3, #1
 8006b78:	4622      	mov	r2, r4
 8006b7a:	4639      	mov	r1, r7
 8006b7c:	4630      	mov	r0, r6
 8006b7e:	47c0      	blx	r8
 8006b80:	3001      	adds	r0, #1
 8006b82:	d0e6      	beq.n	8006b52 <_printf_common+0xb2>
 8006b84:	f109 0901 	add.w	r9, r9, #1
 8006b88:	e7d8      	b.n	8006b3c <_printf_common+0x9c>
	...

08006b8c <_printf_i>:
 8006b8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b90:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006b94:	460c      	mov	r4, r1
 8006b96:	7e09      	ldrb	r1, [r1, #24]
 8006b98:	b085      	sub	sp, #20
 8006b9a:	296e      	cmp	r1, #110	; 0x6e
 8006b9c:	4617      	mov	r7, r2
 8006b9e:	4606      	mov	r6, r0
 8006ba0:	4698      	mov	r8, r3
 8006ba2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ba4:	f000 80b3 	beq.w	8006d0e <_printf_i+0x182>
 8006ba8:	d822      	bhi.n	8006bf0 <_printf_i+0x64>
 8006baa:	2963      	cmp	r1, #99	; 0x63
 8006bac:	d036      	beq.n	8006c1c <_printf_i+0x90>
 8006bae:	d80a      	bhi.n	8006bc6 <_printf_i+0x3a>
 8006bb0:	2900      	cmp	r1, #0
 8006bb2:	f000 80b9 	beq.w	8006d28 <_printf_i+0x19c>
 8006bb6:	2958      	cmp	r1, #88	; 0x58
 8006bb8:	f000 8083 	beq.w	8006cc2 <_printf_i+0x136>
 8006bbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bc0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006bc4:	e032      	b.n	8006c2c <_printf_i+0xa0>
 8006bc6:	2964      	cmp	r1, #100	; 0x64
 8006bc8:	d001      	beq.n	8006bce <_printf_i+0x42>
 8006bca:	2969      	cmp	r1, #105	; 0x69
 8006bcc:	d1f6      	bne.n	8006bbc <_printf_i+0x30>
 8006bce:	6820      	ldr	r0, [r4, #0]
 8006bd0:	6813      	ldr	r3, [r2, #0]
 8006bd2:	0605      	lsls	r5, r0, #24
 8006bd4:	f103 0104 	add.w	r1, r3, #4
 8006bd8:	d52a      	bpl.n	8006c30 <_printf_i+0xa4>
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	6011      	str	r1, [r2, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	da03      	bge.n	8006bea <_printf_i+0x5e>
 8006be2:	222d      	movs	r2, #45	; 0x2d
 8006be4:	425b      	negs	r3, r3
 8006be6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006bea:	486f      	ldr	r0, [pc, #444]	; (8006da8 <_printf_i+0x21c>)
 8006bec:	220a      	movs	r2, #10
 8006bee:	e039      	b.n	8006c64 <_printf_i+0xd8>
 8006bf0:	2973      	cmp	r1, #115	; 0x73
 8006bf2:	f000 809d 	beq.w	8006d30 <_printf_i+0x1a4>
 8006bf6:	d808      	bhi.n	8006c0a <_printf_i+0x7e>
 8006bf8:	296f      	cmp	r1, #111	; 0x6f
 8006bfa:	d020      	beq.n	8006c3e <_printf_i+0xb2>
 8006bfc:	2970      	cmp	r1, #112	; 0x70
 8006bfe:	d1dd      	bne.n	8006bbc <_printf_i+0x30>
 8006c00:	6823      	ldr	r3, [r4, #0]
 8006c02:	f043 0320 	orr.w	r3, r3, #32
 8006c06:	6023      	str	r3, [r4, #0]
 8006c08:	e003      	b.n	8006c12 <_printf_i+0x86>
 8006c0a:	2975      	cmp	r1, #117	; 0x75
 8006c0c:	d017      	beq.n	8006c3e <_printf_i+0xb2>
 8006c0e:	2978      	cmp	r1, #120	; 0x78
 8006c10:	d1d4      	bne.n	8006bbc <_printf_i+0x30>
 8006c12:	2378      	movs	r3, #120	; 0x78
 8006c14:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c18:	4864      	ldr	r0, [pc, #400]	; (8006dac <_printf_i+0x220>)
 8006c1a:	e055      	b.n	8006cc8 <_printf_i+0x13c>
 8006c1c:	6813      	ldr	r3, [r2, #0]
 8006c1e:	1d19      	adds	r1, r3, #4
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	6011      	str	r1, [r2, #0]
 8006c24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e08c      	b.n	8006d4a <_printf_i+0x1be>
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	6011      	str	r1, [r2, #0]
 8006c34:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c38:	bf18      	it	ne
 8006c3a:	b21b      	sxthne	r3, r3
 8006c3c:	e7cf      	b.n	8006bde <_printf_i+0x52>
 8006c3e:	6813      	ldr	r3, [r2, #0]
 8006c40:	6825      	ldr	r5, [r4, #0]
 8006c42:	1d18      	adds	r0, r3, #4
 8006c44:	6010      	str	r0, [r2, #0]
 8006c46:	0628      	lsls	r0, r5, #24
 8006c48:	d501      	bpl.n	8006c4e <_printf_i+0xc2>
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	e002      	b.n	8006c54 <_printf_i+0xc8>
 8006c4e:	0668      	lsls	r0, r5, #25
 8006c50:	d5fb      	bpl.n	8006c4a <_printf_i+0xbe>
 8006c52:	881b      	ldrh	r3, [r3, #0]
 8006c54:	4854      	ldr	r0, [pc, #336]	; (8006da8 <_printf_i+0x21c>)
 8006c56:	296f      	cmp	r1, #111	; 0x6f
 8006c58:	bf14      	ite	ne
 8006c5a:	220a      	movne	r2, #10
 8006c5c:	2208      	moveq	r2, #8
 8006c5e:	2100      	movs	r1, #0
 8006c60:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c64:	6865      	ldr	r5, [r4, #4]
 8006c66:	60a5      	str	r5, [r4, #8]
 8006c68:	2d00      	cmp	r5, #0
 8006c6a:	f2c0 8095 	blt.w	8006d98 <_printf_i+0x20c>
 8006c6e:	6821      	ldr	r1, [r4, #0]
 8006c70:	f021 0104 	bic.w	r1, r1, #4
 8006c74:	6021      	str	r1, [r4, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d13d      	bne.n	8006cf6 <_printf_i+0x16a>
 8006c7a:	2d00      	cmp	r5, #0
 8006c7c:	f040 808e 	bne.w	8006d9c <_printf_i+0x210>
 8006c80:	4665      	mov	r5, ip
 8006c82:	2a08      	cmp	r2, #8
 8006c84:	d10b      	bne.n	8006c9e <_printf_i+0x112>
 8006c86:	6823      	ldr	r3, [r4, #0]
 8006c88:	07db      	lsls	r3, r3, #31
 8006c8a:	d508      	bpl.n	8006c9e <_printf_i+0x112>
 8006c8c:	6923      	ldr	r3, [r4, #16]
 8006c8e:	6862      	ldr	r2, [r4, #4]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	bfde      	ittt	le
 8006c94:	2330      	movle	r3, #48	; 0x30
 8006c96:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c9a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c9e:	ebac 0305 	sub.w	r3, ip, r5
 8006ca2:	6123      	str	r3, [r4, #16]
 8006ca4:	f8cd 8000 	str.w	r8, [sp]
 8006ca8:	463b      	mov	r3, r7
 8006caa:	aa03      	add	r2, sp, #12
 8006cac:	4621      	mov	r1, r4
 8006cae:	4630      	mov	r0, r6
 8006cb0:	f7ff fef6 	bl	8006aa0 <_printf_common>
 8006cb4:	3001      	adds	r0, #1
 8006cb6:	d14d      	bne.n	8006d54 <_printf_i+0x1c8>
 8006cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cbc:	b005      	add	sp, #20
 8006cbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006cc2:	4839      	ldr	r0, [pc, #228]	; (8006da8 <_printf_i+0x21c>)
 8006cc4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006cc8:	6813      	ldr	r3, [r2, #0]
 8006cca:	6821      	ldr	r1, [r4, #0]
 8006ccc:	1d1d      	adds	r5, r3, #4
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	6015      	str	r5, [r2, #0]
 8006cd2:	060a      	lsls	r2, r1, #24
 8006cd4:	d50b      	bpl.n	8006cee <_printf_i+0x162>
 8006cd6:	07ca      	lsls	r2, r1, #31
 8006cd8:	bf44      	itt	mi
 8006cda:	f041 0120 	orrmi.w	r1, r1, #32
 8006cde:	6021      	strmi	r1, [r4, #0]
 8006ce0:	b91b      	cbnz	r3, 8006cea <_printf_i+0x15e>
 8006ce2:	6822      	ldr	r2, [r4, #0]
 8006ce4:	f022 0220 	bic.w	r2, r2, #32
 8006ce8:	6022      	str	r2, [r4, #0]
 8006cea:	2210      	movs	r2, #16
 8006cec:	e7b7      	b.n	8006c5e <_printf_i+0xd2>
 8006cee:	064d      	lsls	r5, r1, #25
 8006cf0:	bf48      	it	mi
 8006cf2:	b29b      	uxthmi	r3, r3
 8006cf4:	e7ef      	b.n	8006cd6 <_printf_i+0x14a>
 8006cf6:	4665      	mov	r5, ip
 8006cf8:	fbb3 f1f2 	udiv	r1, r3, r2
 8006cfc:	fb02 3311 	mls	r3, r2, r1, r3
 8006d00:	5cc3      	ldrb	r3, [r0, r3]
 8006d02:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006d06:	460b      	mov	r3, r1
 8006d08:	2900      	cmp	r1, #0
 8006d0a:	d1f5      	bne.n	8006cf8 <_printf_i+0x16c>
 8006d0c:	e7b9      	b.n	8006c82 <_printf_i+0xf6>
 8006d0e:	6813      	ldr	r3, [r2, #0]
 8006d10:	6825      	ldr	r5, [r4, #0]
 8006d12:	6961      	ldr	r1, [r4, #20]
 8006d14:	1d18      	adds	r0, r3, #4
 8006d16:	6010      	str	r0, [r2, #0]
 8006d18:	0628      	lsls	r0, r5, #24
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	d501      	bpl.n	8006d22 <_printf_i+0x196>
 8006d1e:	6019      	str	r1, [r3, #0]
 8006d20:	e002      	b.n	8006d28 <_printf_i+0x19c>
 8006d22:	066a      	lsls	r2, r5, #25
 8006d24:	d5fb      	bpl.n	8006d1e <_printf_i+0x192>
 8006d26:	8019      	strh	r1, [r3, #0]
 8006d28:	2300      	movs	r3, #0
 8006d2a:	6123      	str	r3, [r4, #16]
 8006d2c:	4665      	mov	r5, ip
 8006d2e:	e7b9      	b.n	8006ca4 <_printf_i+0x118>
 8006d30:	6813      	ldr	r3, [r2, #0]
 8006d32:	1d19      	adds	r1, r3, #4
 8006d34:	6011      	str	r1, [r2, #0]
 8006d36:	681d      	ldr	r5, [r3, #0]
 8006d38:	6862      	ldr	r2, [r4, #4]
 8006d3a:	2100      	movs	r1, #0
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	f7f9 fa6f 	bl	8000220 <memchr>
 8006d42:	b108      	cbz	r0, 8006d48 <_printf_i+0x1bc>
 8006d44:	1b40      	subs	r0, r0, r5
 8006d46:	6060      	str	r0, [r4, #4]
 8006d48:	6863      	ldr	r3, [r4, #4]
 8006d4a:	6123      	str	r3, [r4, #16]
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d52:	e7a7      	b.n	8006ca4 <_printf_i+0x118>
 8006d54:	6923      	ldr	r3, [r4, #16]
 8006d56:	462a      	mov	r2, r5
 8006d58:	4639      	mov	r1, r7
 8006d5a:	4630      	mov	r0, r6
 8006d5c:	47c0      	blx	r8
 8006d5e:	3001      	adds	r0, #1
 8006d60:	d0aa      	beq.n	8006cb8 <_printf_i+0x12c>
 8006d62:	6823      	ldr	r3, [r4, #0]
 8006d64:	079b      	lsls	r3, r3, #30
 8006d66:	d413      	bmi.n	8006d90 <_printf_i+0x204>
 8006d68:	68e0      	ldr	r0, [r4, #12]
 8006d6a:	9b03      	ldr	r3, [sp, #12]
 8006d6c:	4298      	cmp	r0, r3
 8006d6e:	bfb8      	it	lt
 8006d70:	4618      	movlt	r0, r3
 8006d72:	e7a3      	b.n	8006cbc <_printf_i+0x130>
 8006d74:	2301      	movs	r3, #1
 8006d76:	464a      	mov	r2, r9
 8006d78:	4639      	mov	r1, r7
 8006d7a:	4630      	mov	r0, r6
 8006d7c:	47c0      	blx	r8
 8006d7e:	3001      	adds	r0, #1
 8006d80:	d09a      	beq.n	8006cb8 <_printf_i+0x12c>
 8006d82:	3501      	adds	r5, #1
 8006d84:	68e3      	ldr	r3, [r4, #12]
 8006d86:	9a03      	ldr	r2, [sp, #12]
 8006d88:	1a9b      	subs	r3, r3, r2
 8006d8a:	42ab      	cmp	r3, r5
 8006d8c:	dcf2      	bgt.n	8006d74 <_printf_i+0x1e8>
 8006d8e:	e7eb      	b.n	8006d68 <_printf_i+0x1dc>
 8006d90:	2500      	movs	r5, #0
 8006d92:	f104 0919 	add.w	r9, r4, #25
 8006d96:	e7f5      	b.n	8006d84 <_printf_i+0x1f8>
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d1ac      	bne.n	8006cf6 <_printf_i+0x16a>
 8006d9c:	7803      	ldrb	r3, [r0, #0]
 8006d9e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006da2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006da6:	e76c      	b.n	8006c82 <_printf_i+0xf6>
 8006da8:	0800a722 	.word	0x0800a722
 8006dac:	0800a733 	.word	0x0800a733

08006db0 <_scanf_float>:
 8006db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006db4:	469a      	mov	sl, r3
 8006db6:	688b      	ldr	r3, [r1, #8]
 8006db8:	4616      	mov	r6, r2
 8006dba:	1e5a      	subs	r2, r3, #1
 8006dbc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006dc0:	b087      	sub	sp, #28
 8006dc2:	bf83      	ittte	hi
 8006dc4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8006dc8:	189b      	addhi	r3, r3, r2
 8006dca:	9301      	strhi	r3, [sp, #4]
 8006dcc:	2300      	movls	r3, #0
 8006dce:	bf86      	itte	hi
 8006dd0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006dd4:	608b      	strhi	r3, [r1, #8]
 8006dd6:	9301      	strls	r3, [sp, #4]
 8006dd8:	680b      	ldr	r3, [r1, #0]
 8006dda:	4688      	mov	r8, r1
 8006ddc:	f04f 0b00 	mov.w	fp, #0
 8006de0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006de4:	f848 3b1c 	str.w	r3, [r8], #28
 8006de8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8006dec:	4607      	mov	r7, r0
 8006dee:	460c      	mov	r4, r1
 8006df0:	4645      	mov	r5, r8
 8006df2:	465a      	mov	r2, fp
 8006df4:	46d9      	mov	r9, fp
 8006df6:	f8cd b008 	str.w	fp, [sp, #8]
 8006dfa:	68a1      	ldr	r1, [r4, #8]
 8006dfc:	b181      	cbz	r1, 8006e20 <_scanf_float+0x70>
 8006dfe:	6833      	ldr	r3, [r6, #0]
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	2b49      	cmp	r3, #73	; 0x49
 8006e04:	d071      	beq.n	8006eea <_scanf_float+0x13a>
 8006e06:	d84d      	bhi.n	8006ea4 <_scanf_float+0xf4>
 8006e08:	2b39      	cmp	r3, #57	; 0x39
 8006e0a:	d840      	bhi.n	8006e8e <_scanf_float+0xde>
 8006e0c:	2b31      	cmp	r3, #49	; 0x31
 8006e0e:	f080 8088 	bcs.w	8006f22 <_scanf_float+0x172>
 8006e12:	2b2d      	cmp	r3, #45	; 0x2d
 8006e14:	f000 8090 	beq.w	8006f38 <_scanf_float+0x188>
 8006e18:	d815      	bhi.n	8006e46 <_scanf_float+0x96>
 8006e1a:	2b2b      	cmp	r3, #43	; 0x2b
 8006e1c:	f000 808c 	beq.w	8006f38 <_scanf_float+0x188>
 8006e20:	f1b9 0f00 	cmp.w	r9, #0
 8006e24:	d003      	beq.n	8006e2e <_scanf_float+0x7e>
 8006e26:	6823      	ldr	r3, [r4, #0]
 8006e28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e2c:	6023      	str	r3, [r4, #0]
 8006e2e:	3a01      	subs	r2, #1
 8006e30:	2a01      	cmp	r2, #1
 8006e32:	f200 80ea 	bhi.w	800700a <_scanf_float+0x25a>
 8006e36:	4545      	cmp	r5, r8
 8006e38:	f200 80dc 	bhi.w	8006ff4 <_scanf_float+0x244>
 8006e3c:	2601      	movs	r6, #1
 8006e3e:	4630      	mov	r0, r6
 8006e40:	b007      	add	sp, #28
 8006e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e46:	2b2e      	cmp	r3, #46	; 0x2e
 8006e48:	f000 809f 	beq.w	8006f8a <_scanf_float+0x1da>
 8006e4c:	2b30      	cmp	r3, #48	; 0x30
 8006e4e:	d1e7      	bne.n	8006e20 <_scanf_float+0x70>
 8006e50:	6820      	ldr	r0, [r4, #0]
 8006e52:	f410 7f80 	tst.w	r0, #256	; 0x100
 8006e56:	d064      	beq.n	8006f22 <_scanf_float+0x172>
 8006e58:	9b01      	ldr	r3, [sp, #4]
 8006e5a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8006e5e:	6020      	str	r0, [r4, #0]
 8006e60:	f109 0901 	add.w	r9, r9, #1
 8006e64:	b11b      	cbz	r3, 8006e6e <_scanf_float+0xbe>
 8006e66:	3b01      	subs	r3, #1
 8006e68:	3101      	adds	r1, #1
 8006e6a:	9301      	str	r3, [sp, #4]
 8006e6c:	60a1      	str	r1, [r4, #8]
 8006e6e:	68a3      	ldr	r3, [r4, #8]
 8006e70:	3b01      	subs	r3, #1
 8006e72:	60a3      	str	r3, [r4, #8]
 8006e74:	6923      	ldr	r3, [r4, #16]
 8006e76:	3301      	adds	r3, #1
 8006e78:	6123      	str	r3, [r4, #16]
 8006e7a:	6873      	ldr	r3, [r6, #4]
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	6073      	str	r3, [r6, #4]
 8006e82:	f340 80ac 	ble.w	8006fde <_scanf_float+0x22e>
 8006e86:	6833      	ldr	r3, [r6, #0]
 8006e88:	3301      	adds	r3, #1
 8006e8a:	6033      	str	r3, [r6, #0]
 8006e8c:	e7b5      	b.n	8006dfa <_scanf_float+0x4a>
 8006e8e:	2b45      	cmp	r3, #69	; 0x45
 8006e90:	f000 8085 	beq.w	8006f9e <_scanf_float+0x1ee>
 8006e94:	2b46      	cmp	r3, #70	; 0x46
 8006e96:	d06a      	beq.n	8006f6e <_scanf_float+0x1be>
 8006e98:	2b41      	cmp	r3, #65	; 0x41
 8006e9a:	d1c1      	bne.n	8006e20 <_scanf_float+0x70>
 8006e9c:	2a01      	cmp	r2, #1
 8006e9e:	d1bf      	bne.n	8006e20 <_scanf_float+0x70>
 8006ea0:	2202      	movs	r2, #2
 8006ea2:	e046      	b.n	8006f32 <_scanf_float+0x182>
 8006ea4:	2b65      	cmp	r3, #101	; 0x65
 8006ea6:	d07a      	beq.n	8006f9e <_scanf_float+0x1ee>
 8006ea8:	d818      	bhi.n	8006edc <_scanf_float+0x12c>
 8006eaa:	2b54      	cmp	r3, #84	; 0x54
 8006eac:	d066      	beq.n	8006f7c <_scanf_float+0x1cc>
 8006eae:	d811      	bhi.n	8006ed4 <_scanf_float+0x124>
 8006eb0:	2b4e      	cmp	r3, #78	; 0x4e
 8006eb2:	d1b5      	bne.n	8006e20 <_scanf_float+0x70>
 8006eb4:	2a00      	cmp	r2, #0
 8006eb6:	d146      	bne.n	8006f46 <_scanf_float+0x196>
 8006eb8:	f1b9 0f00 	cmp.w	r9, #0
 8006ebc:	d145      	bne.n	8006f4a <_scanf_float+0x19a>
 8006ebe:	6821      	ldr	r1, [r4, #0]
 8006ec0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006ec4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006ec8:	d13f      	bne.n	8006f4a <_scanf_float+0x19a>
 8006eca:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006ece:	6021      	str	r1, [r4, #0]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	e02e      	b.n	8006f32 <_scanf_float+0x182>
 8006ed4:	2b59      	cmp	r3, #89	; 0x59
 8006ed6:	d01e      	beq.n	8006f16 <_scanf_float+0x166>
 8006ed8:	2b61      	cmp	r3, #97	; 0x61
 8006eda:	e7de      	b.n	8006e9a <_scanf_float+0xea>
 8006edc:	2b6e      	cmp	r3, #110	; 0x6e
 8006ede:	d0e9      	beq.n	8006eb4 <_scanf_float+0x104>
 8006ee0:	d815      	bhi.n	8006f0e <_scanf_float+0x15e>
 8006ee2:	2b66      	cmp	r3, #102	; 0x66
 8006ee4:	d043      	beq.n	8006f6e <_scanf_float+0x1be>
 8006ee6:	2b69      	cmp	r3, #105	; 0x69
 8006ee8:	d19a      	bne.n	8006e20 <_scanf_float+0x70>
 8006eea:	f1bb 0f00 	cmp.w	fp, #0
 8006eee:	d138      	bne.n	8006f62 <_scanf_float+0x1b2>
 8006ef0:	f1b9 0f00 	cmp.w	r9, #0
 8006ef4:	d197      	bne.n	8006e26 <_scanf_float+0x76>
 8006ef6:	6821      	ldr	r1, [r4, #0]
 8006ef8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006efc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006f00:	d195      	bne.n	8006e2e <_scanf_float+0x7e>
 8006f02:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006f06:	6021      	str	r1, [r4, #0]
 8006f08:	f04f 0b01 	mov.w	fp, #1
 8006f0c:	e011      	b.n	8006f32 <_scanf_float+0x182>
 8006f0e:	2b74      	cmp	r3, #116	; 0x74
 8006f10:	d034      	beq.n	8006f7c <_scanf_float+0x1cc>
 8006f12:	2b79      	cmp	r3, #121	; 0x79
 8006f14:	d184      	bne.n	8006e20 <_scanf_float+0x70>
 8006f16:	f1bb 0f07 	cmp.w	fp, #7
 8006f1a:	d181      	bne.n	8006e20 <_scanf_float+0x70>
 8006f1c:	f04f 0b08 	mov.w	fp, #8
 8006f20:	e007      	b.n	8006f32 <_scanf_float+0x182>
 8006f22:	eb12 0f0b 	cmn.w	r2, fp
 8006f26:	f47f af7b 	bne.w	8006e20 <_scanf_float+0x70>
 8006f2a:	6821      	ldr	r1, [r4, #0]
 8006f2c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8006f30:	6021      	str	r1, [r4, #0]
 8006f32:	702b      	strb	r3, [r5, #0]
 8006f34:	3501      	adds	r5, #1
 8006f36:	e79a      	b.n	8006e6e <_scanf_float+0xbe>
 8006f38:	6821      	ldr	r1, [r4, #0]
 8006f3a:	0608      	lsls	r0, r1, #24
 8006f3c:	f57f af70 	bpl.w	8006e20 <_scanf_float+0x70>
 8006f40:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006f44:	e7f4      	b.n	8006f30 <_scanf_float+0x180>
 8006f46:	2a02      	cmp	r2, #2
 8006f48:	d047      	beq.n	8006fda <_scanf_float+0x22a>
 8006f4a:	f1bb 0f01 	cmp.w	fp, #1
 8006f4e:	d003      	beq.n	8006f58 <_scanf_float+0x1a8>
 8006f50:	f1bb 0f04 	cmp.w	fp, #4
 8006f54:	f47f af64 	bne.w	8006e20 <_scanf_float+0x70>
 8006f58:	f10b 0b01 	add.w	fp, fp, #1
 8006f5c:	fa5f fb8b 	uxtb.w	fp, fp
 8006f60:	e7e7      	b.n	8006f32 <_scanf_float+0x182>
 8006f62:	f1bb 0f03 	cmp.w	fp, #3
 8006f66:	d0f7      	beq.n	8006f58 <_scanf_float+0x1a8>
 8006f68:	f1bb 0f05 	cmp.w	fp, #5
 8006f6c:	e7f2      	b.n	8006f54 <_scanf_float+0x1a4>
 8006f6e:	f1bb 0f02 	cmp.w	fp, #2
 8006f72:	f47f af55 	bne.w	8006e20 <_scanf_float+0x70>
 8006f76:	f04f 0b03 	mov.w	fp, #3
 8006f7a:	e7da      	b.n	8006f32 <_scanf_float+0x182>
 8006f7c:	f1bb 0f06 	cmp.w	fp, #6
 8006f80:	f47f af4e 	bne.w	8006e20 <_scanf_float+0x70>
 8006f84:	f04f 0b07 	mov.w	fp, #7
 8006f88:	e7d3      	b.n	8006f32 <_scanf_float+0x182>
 8006f8a:	6821      	ldr	r1, [r4, #0]
 8006f8c:	0588      	lsls	r0, r1, #22
 8006f8e:	f57f af47 	bpl.w	8006e20 <_scanf_float+0x70>
 8006f92:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8006f96:	6021      	str	r1, [r4, #0]
 8006f98:	f8cd 9008 	str.w	r9, [sp, #8]
 8006f9c:	e7c9      	b.n	8006f32 <_scanf_float+0x182>
 8006f9e:	6821      	ldr	r1, [r4, #0]
 8006fa0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8006fa4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8006fa8:	d006      	beq.n	8006fb8 <_scanf_float+0x208>
 8006faa:	0548      	lsls	r0, r1, #21
 8006fac:	f57f af38 	bpl.w	8006e20 <_scanf_float+0x70>
 8006fb0:	f1b9 0f00 	cmp.w	r9, #0
 8006fb4:	f43f af3b 	beq.w	8006e2e <_scanf_float+0x7e>
 8006fb8:	0588      	lsls	r0, r1, #22
 8006fba:	bf58      	it	pl
 8006fbc:	9802      	ldrpl	r0, [sp, #8]
 8006fbe:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006fc2:	bf58      	it	pl
 8006fc4:	eba9 0000 	subpl.w	r0, r9, r0
 8006fc8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8006fcc:	bf58      	it	pl
 8006fce:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8006fd2:	6021      	str	r1, [r4, #0]
 8006fd4:	f04f 0900 	mov.w	r9, #0
 8006fd8:	e7ab      	b.n	8006f32 <_scanf_float+0x182>
 8006fda:	2203      	movs	r2, #3
 8006fdc:	e7a9      	b.n	8006f32 <_scanf_float+0x182>
 8006fde:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006fe2:	9205      	str	r2, [sp, #20]
 8006fe4:	4631      	mov	r1, r6
 8006fe6:	4638      	mov	r0, r7
 8006fe8:	4798      	blx	r3
 8006fea:	9a05      	ldr	r2, [sp, #20]
 8006fec:	2800      	cmp	r0, #0
 8006fee:	f43f af04 	beq.w	8006dfa <_scanf_float+0x4a>
 8006ff2:	e715      	b.n	8006e20 <_scanf_float+0x70>
 8006ff4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ff8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006ffc:	4632      	mov	r2, r6
 8006ffe:	4638      	mov	r0, r7
 8007000:	4798      	blx	r3
 8007002:	6923      	ldr	r3, [r4, #16]
 8007004:	3b01      	subs	r3, #1
 8007006:	6123      	str	r3, [r4, #16]
 8007008:	e715      	b.n	8006e36 <_scanf_float+0x86>
 800700a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800700e:	2b06      	cmp	r3, #6
 8007010:	d80a      	bhi.n	8007028 <_scanf_float+0x278>
 8007012:	f1bb 0f02 	cmp.w	fp, #2
 8007016:	d968      	bls.n	80070ea <_scanf_float+0x33a>
 8007018:	f1ab 0b03 	sub.w	fp, fp, #3
 800701c:	fa5f fb8b 	uxtb.w	fp, fp
 8007020:	eba5 0b0b 	sub.w	fp, r5, fp
 8007024:	455d      	cmp	r5, fp
 8007026:	d14b      	bne.n	80070c0 <_scanf_float+0x310>
 8007028:	6823      	ldr	r3, [r4, #0]
 800702a:	05da      	lsls	r2, r3, #23
 800702c:	d51f      	bpl.n	800706e <_scanf_float+0x2be>
 800702e:	055b      	lsls	r3, r3, #21
 8007030:	d468      	bmi.n	8007104 <_scanf_float+0x354>
 8007032:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007036:	6923      	ldr	r3, [r4, #16]
 8007038:	2965      	cmp	r1, #101	; 0x65
 800703a:	f103 33ff 	add.w	r3, r3, #4294967295
 800703e:	f105 3bff 	add.w	fp, r5, #4294967295
 8007042:	6123      	str	r3, [r4, #16]
 8007044:	d00d      	beq.n	8007062 <_scanf_float+0x2b2>
 8007046:	2945      	cmp	r1, #69	; 0x45
 8007048:	d00b      	beq.n	8007062 <_scanf_float+0x2b2>
 800704a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800704e:	4632      	mov	r2, r6
 8007050:	4638      	mov	r0, r7
 8007052:	4798      	blx	r3
 8007054:	6923      	ldr	r3, [r4, #16]
 8007056:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800705a:	3b01      	subs	r3, #1
 800705c:	f1a5 0b02 	sub.w	fp, r5, #2
 8007060:	6123      	str	r3, [r4, #16]
 8007062:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007066:	4632      	mov	r2, r6
 8007068:	4638      	mov	r0, r7
 800706a:	4798      	blx	r3
 800706c:	465d      	mov	r5, fp
 800706e:	6826      	ldr	r6, [r4, #0]
 8007070:	f016 0610 	ands.w	r6, r6, #16
 8007074:	d17a      	bne.n	800716c <_scanf_float+0x3bc>
 8007076:	702e      	strb	r6, [r5, #0]
 8007078:	6823      	ldr	r3, [r4, #0]
 800707a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800707e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007082:	d142      	bne.n	800710a <_scanf_float+0x35a>
 8007084:	9b02      	ldr	r3, [sp, #8]
 8007086:	eba9 0303 	sub.w	r3, r9, r3
 800708a:	425a      	negs	r2, r3
 800708c:	2b00      	cmp	r3, #0
 800708e:	d149      	bne.n	8007124 <_scanf_float+0x374>
 8007090:	2200      	movs	r2, #0
 8007092:	4641      	mov	r1, r8
 8007094:	4638      	mov	r0, r7
 8007096:	f000 fea3 	bl	8007de0 <_strtod_r>
 800709a:	6825      	ldr	r5, [r4, #0]
 800709c:	f8da 3000 	ldr.w	r3, [sl]
 80070a0:	f015 0f02 	tst.w	r5, #2
 80070a4:	f103 0204 	add.w	r2, r3, #4
 80070a8:	ec59 8b10 	vmov	r8, r9, d0
 80070ac:	f8ca 2000 	str.w	r2, [sl]
 80070b0:	d043      	beq.n	800713a <_scanf_float+0x38a>
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	e9c3 8900 	strd	r8, r9, [r3]
 80070b8:	68e3      	ldr	r3, [r4, #12]
 80070ba:	3301      	adds	r3, #1
 80070bc:	60e3      	str	r3, [r4, #12]
 80070be:	e6be      	b.n	8006e3e <_scanf_float+0x8e>
 80070c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070c4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80070c8:	4632      	mov	r2, r6
 80070ca:	4638      	mov	r0, r7
 80070cc:	4798      	blx	r3
 80070ce:	6923      	ldr	r3, [r4, #16]
 80070d0:	3b01      	subs	r3, #1
 80070d2:	6123      	str	r3, [r4, #16]
 80070d4:	e7a6      	b.n	8007024 <_scanf_float+0x274>
 80070d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070da:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80070de:	4632      	mov	r2, r6
 80070e0:	4638      	mov	r0, r7
 80070e2:	4798      	blx	r3
 80070e4:	6923      	ldr	r3, [r4, #16]
 80070e6:	3b01      	subs	r3, #1
 80070e8:	6123      	str	r3, [r4, #16]
 80070ea:	4545      	cmp	r5, r8
 80070ec:	d8f3      	bhi.n	80070d6 <_scanf_float+0x326>
 80070ee:	e6a5      	b.n	8006e3c <_scanf_float+0x8c>
 80070f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070f4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80070f8:	4632      	mov	r2, r6
 80070fa:	4638      	mov	r0, r7
 80070fc:	4798      	blx	r3
 80070fe:	6923      	ldr	r3, [r4, #16]
 8007100:	3b01      	subs	r3, #1
 8007102:	6123      	str	r3, [r4, #16]
 8007104:	4545      	cmp	r5, r8
 8007106:	d8f3      	bhi.n	80070f0 <_scanf_float+0x340>
 8007108:	e698      	b.n	8006e3c <_scanf_float+0x8c>
 800710a:	9b03      	ldr	r3, [sp, #12]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d0bf      	beq.n	8007090 <_scanf_float+0x2e0>
 8007110:	9904      	ldr	r1, [sp, #16]
 8007112:	230a      	movs	r3, #10
 8007114:	4632      	mov	r2, r6
 8007116:	3101      	adds	r1, #1
 8007118:	4638      	mov	r0, r7
 800711a:	f000 feed 	bl	8007ef8 <_strtol_r>
 800711e:	9b03      	ldr	r3, [sp, #12]
 8007120:	9d04      	ldr	r5, [sp, #16]
 8007122:	1ac2      	subs	r2, r0, r3
 8007124:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007128:	429d      	cmp	r5, r3
 800712a:	bf28      	it	cs
 800712c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8007130:	490f      	ldr	r1, [pc, #60]	; (8007170 <_scanf_float+0x3c0>)
 8007132:	4628      	mov	r0, r5
 8007134:	f000 f824 	bl	8007180 <siprintf>
 8007138:	e7aa      	b.n	8007090 <_scanf_float+0x2e0>
 800713a:	f015 0504 	ands.w	r5, r5, #4
 800713e:	d1b8      	bne.n	80070b2 <_scanf_float+0x302>
 8007140:	681f      	ldr	r7, [r3, #0]
 8007142:	ee10 2a10 	vmov	r2, s0
 8007146:	464b      	mov	r3, r9
 8007148:	ee10 0a10 	vmov	r0, s0
 800714c:	4649      	mov	r1, r9
 800714e:	f7f9 fd0d 	bl	8000b6c <__aeabi_dcmpun>
 8007152:	b128      	cbz	r0, 8007160 <_scanf_float+0x3b0>
 8007154:	4628      	mov	r0, r5
 8007156:	f000 f80d 	bl	8007174 <nanf>
 800715a:	ed87 0a00 	vstr	s0, [r7]
 800715e:	e7ab      	b.n	80070b8 <_scanf_float+0x308>
 8007160:	4640      	mov	r0, r8
 8007162:	4649      	mov	r1, r9
 8007164:	f7f9 fd60 	bl	8000c28 <__aeabi_d2f>
 8007168:	6038      	str	r0, [r7, #0]
 800716a:	e7a5      	b.n	80070b8 <_scanf_float+0x308>
 800716c:	2600      	movs	r6, #0
 800716e:	e666      	b.n	8006e3e <_scanf_float+0x8e>
 8007170:	0800a744 	.word	0x0800a744

08007174 <nanf>:
 8007174:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800717c <nanf+0x8>
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	7fc00000 	.word	0x7fc00000

08007180 <siprintf>:
 8007180:	b40e      	push	{r1, r2, r3}
 8007182:	b500      	push	{lr}
 8007184:	b09c      	sub	sp, #112	; 0x70
 8007186:	ab1d      	add	r3, sp, #116	; 0x74
 8007188:	9002      	str	r0, [sp, #8]
 800718a:	9006      	str	r0, [sp, #24]
 800718c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007190:	4809      	ldr	r0, [pc, #36]	; (80071b8 <siprintf+0x38>)
 8007192:	9107      	str	r1, [sp, #28]
 8007194:	9104      	str	r1, [sp, #16]
 8007196:	4909      	ldr	r1, [pc, #36]	; (80071bc <siprintf+0x3c>)
 8007198:	f853 2b04 	ldr.w	r2, [r3], #4
 800719c:	9105      	str	r1, [sp, #20]
 800719e:	6800      	ldr	r0, [r0, #0]
 80071a0:	9301      	str	r3, [sp, #4]
 80071a2:	a902      	add	r1, sp, #8
 80071a4:	f002 fd64 	bl	8009c70 <_svfiprintf_r>
 80071a8:	9b02      	ldr	r3, [sp, #8]
 80071aa:	2200      	movs	r2, #0
 80071ac:	701a      	strb	r2, [r3, #0]
 80071ae:	b01c      	add	sp, #112	; 0x70
 80071b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80071b4:	b003      	add	sp, #12
 80071b6:	4770      	bx	lr
 80071b8:	20000048 	.word	0x20000048
 80071bc:	ffff0208 	.word	0xffff0208

080071c0 <sulp>:
 80071c0:	b570      	push	{r4, r5, r6, lr}
 80071c2:	4604      	mov	r4, r0
 80071c4:	460d      	mov	r5, r1
 80071c6:	ec45 4b10 	vmov	d0, r4, r5
 80071ca:	4616      	mov	r6, r2
 80071cc:	f002 fb0c 	bl	80097e8 <__ulp>
 80071d0:	ec51 0b10 	vmov	r0, r1, d0
 80071d4:	b17e      	cbz	r6, 80071f6 <sulp+0x36>
 80071d6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80071da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80071de:	2b00      	cmp	r3, #0
 80071e0:	dd09      	ble.n	80071f6 <sulp+0x36>
 80071e2:	051b      	lsls	r3, r3, #20
 80071e4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80071e8:	2400      	movs	r4, #0
 80071ea:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80071ee:	4622      	mov	r2, r4
 80071f0:	462b      	mov	r3, r5
 80071f2:	f7f9 fa21 	bl	8000638 <__aeabi_dmul>
 80071f6:	bd70      	pop	{r4, r5, r6, pc}

080071f8 <_strtod_l>:
 80071f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071fc:	461f      	mov	r7, r3
 80071fe:	b0a1      	sub	sp, #132	; 0x84
 8007200:	2300      	movs	r3, #0
 8007202:	4681      	mov	r9, r0
 8007204:	4638      	mov	r0, r7
 8007206:	460e      	mov	r6, r1
 8007208:	9217      	str	r2, [sp, #92]	; 0x5c
 800720a:	931c      	str	r3, [sp, #112]	; 0x70
 800720c:	f001 fff5 	bl	80091fa <__localeconv_l>
 8007210:	4680      	mov	r8, r0
 8007212:	6800      	ldr	r0, [r0, #0]
 8007214:	f7f8 fffc 	bl	8000210 <strlen>
 8007218:	f04f 0a00 	mov.w	sl, #0
 800721c:	4604      	mov	r4, r0
 800721e:	f04f 0b00 	mov.w	fp, #0
 8007222:	961b      	str	r6, [sp, #108]	; 0x6c
 8007224:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007226:	781a      	ldrb	r2, [r3, #0]
 8007228:	2a0d      	cmp	r2, #13
 800722a:	d832      	bhi.n	8007292 <_strtod_l+0x9a>
 800722c:	2a09      	cmp	r2, #9
 800722e:	d236      	bcs.n	800729e <_strtod_l+0xa6>
 8007230:	2a00      	cmp	r2, #0
 8007232:	d03e      	beq.n	80072b2 <_strtod_l+0xba>
 8007234:	2300      	movs	r3, #0
 8007236:	930d      	str	r3, [sp, #52]	; 0x34
 8007238:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800723a:	782b      	ldrb	r3, [r5, #0]
 800723c:	2b30      	cmp	r3, #48	; 0x30
 800723e:	f040 80ac 	bne.w	800739a <_strtod_l+0x1a2>
 8007242:	786b      	ldrb	r3, [r5, #1]
 8007244:	2b58      	cmp	r3, #88	; 0x58
 8007246:	d001      	beq.n	800724c <_strtod_l+0x54>
 8007248:	2b78      	cmp	r3, #120	; 0x78
 800724a:	d167      	bne.n	800731c <_strtod_l+0x124>
 800724c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800724e:	9301      	str	r3, [sp, #4]
 8007250:	ab1c      	add	r3, sp, #112	; 0x70
 8007252:	9300      	str	r3, [sp, #0]
 8007254:	9702      	str	r7, [sp, #8]
 8007256:	ab1d      	add	r3, sp, #116	; 0x74
 8007258:	4a88      	ldr	r2, [pc, #544]	; (800747c <_strtod_l+0x284>)
 800725a:	a91b      	add	r1, sp, #108	; 0x6c
 800725c:	4648      	mov	r0, r9
 800725e:	f001 fcf2 	bl	8008c46 <__gethex>
 8007262:	f010 0407 	ands.w	r4, r0, #7
 8007266:	4606      	mov	r6, r0
 8007268:	d005      	beq.n	8007276 <_strtod_l+0x7e>
 800726a:	2c06      	cmp	r4, #6
 800726c:	d12b      	bne.n	80072c6 <_strtod_l+0xce>
 800726e:	3501      	adds	r5, #1
 8007270:	2300      	movs	r3, #0
 8007272:	951b      	str	r5, [sp, #108]	; 0x6c
 8007274:	930d      	str	r3, [sp, #52]	; 0x34
 8007276:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007278:	2b00      	cmp	r3, #0
 800727a:	f040 859a 	bne.w	8007db2 <_strtod_l+0xbba>
 800727e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007280:	b1e3      	cbz	r3, 80072bc <_strtod_l+0xc4>
 8007282:	4652      	mov	r2, sl
 8007284:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007288:	ec43 2b10 	vmov	d0, r2, r3
 800728c:	b021      	add	sp, #132	; 0x84
 800728e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007292:	2a2b      	cmp	r2, #43	; 0x2b
 8007294:	d015      	beq.n	80072c2 <_strtod_l+0xca>
 8007296:	2a2d      	cmp	r2, #45	; 0x2d
 8007298:	d004      	beq.n	80072a4 <_strtod_l+0xac>
 800729a:	2a20      	cmp	r2, #32
 800729c:	d1ca      	bne.n	8007234 <_strtod_l+0x3c>
 800729e:	3301      	adds	r3, #1
 80072a0:	931b      	str	r3, [sp, #108]	; 0x6c
 80072a2:	e7bf      	b.n	8007224 <_strtod_l+0x2c>
 80072a4:	2201      	movs	r2, #1
 80072a6:	920d      	str	r2, [sp, #52]	; 0x34
 80072a8:	1c5a      	adds	r2, r3, #1
 80072aa:	921b      	str	r2, [sp, #108]	; 0x6c
 80072ac:	785b      	ldrb	r3, [r3, #1]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d1c2      	bne.n	8007238 <_strtod_l+0x40>
 80072b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072b4:	961b      	str	r6, [sp, #108]	; 0x6c
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	f040 8579 	bne.w	8007dae <_strtod_l+0xbb6>
 80072bc:	4652      	mov	r2, sl
 80072be:	465b      	mov	r3, fp
 80072c0:	e7e2      	b.n	8007288 <_strtod_l+0x90>
 80072c2:	2200      	movs	r2, #0
 80072c4:	e7ef      	b.n	80072a6 <_strtod_l+0xae>
 80072c6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80072c8:	b13a      	cbz	r2, 80072da <_strtod_l+0xe2>
 80072ca:	2135      	movs	r1, #53	; 0x35
 80072cc:	a81e      	add	r0, sp, #120	; 0x78
 80072ce:	f002 fb83 	bl	80099d8 <__copybits>
 80072d2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80072d4:	4648      	mov	r0, r9
 80072d6:	f001 ffef 	bl	80092b8 <_Bfree>
 80072da:	3c01      	subs	r4, #1
 80072dc:	2c04      	cmp	r4, #4
 80072de:	d806      	bhi.n	80072ee <_strtod_l+0xf6>
 80072e0:	e8df f004 	tbb	[pc, r4]
 80072e4:	1714030a 	.word	0x1714030a
 80072e8:	0a          	.byte	0x0a
 80072e9:	00          	.byte	0x00
 80072ea:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80072ee:	0730      	lsls	r0, r6, #28
 80072f0:	d5c1      	bpl.n	8007276 <_strtod_l+0x7e>
 80072f2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80072f6:	e7be      	b.n	8007276 <_strtod_l+0x7e>
 80072f8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80072fc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80072fe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007302:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007306:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800730a:	e7f0      	b.n	80072ee <_strtod_l+0xf6>
 800730c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8007480 <_strtod_l+0x288>
 8007310:	e7ed      	b.n	80072ee <_strtod_l+0xf6>
 8007312:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007316:	f04f 3aff 	mov.w	sl, #4294967295
 800731a:	e7e8      	b.n	80072ee <_strtod_l+0xf6>
 800731c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800731e:	1c5a      	adds	r2, r3, #1
 8007320:	921b      	str	r2, [sp, #108]	; 0x6c
 8007322:	785b      	ldrb	r3, [r3, #1]
 8007324:	2b30      	cmp	r3, #48	; 0x30
 8007326:	d0f9      	beq.n	800731c <_strtod_l+0x124>
 8007328:	2b00      	cmp	r3, #0
 800732a:	d0a4      	beq.n	8007276 <_strtod_l+0x7e>
 800732c:	2301      	movs	r3, #1
 800732e:	2500      	movs	r5, #0
 8007330:	9306      	str	r3, [sp, #24]
 8007332:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007334:	9308      	str	r3, [sp, #32]
 8007336:	9507      	str	r5, [sp, #28]
 8007338:	9505      	str	r5, [sp, #20]
 800733a:	220a      	movs	r2, #10
 800733c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800733e:	7807      	ldrb	r7, [r0, #0]
 8007340:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8007344:	b2d9      	uxtb	r1, r3
 8007346:	2909      	cmp	r1, #9
 8007348:	d929      	bls.n	800739e <_strtod_l+0x1a6>
 800734a:	4622      	mov	r2, r4
 800734c:	f8d8 1000 	ldr.w	r1, [r8]
 8007350:	f002 fd96 	bl	8009e80 <strncmp>
 8007354:	2800      	cmp	r0, #0
 8007356:	d031      	beq.n	80073bc <_strtod_l+0x1c4>
 8007358:	2000      	movs	r0, #0
 800735a:	9c05      	ldr	r4, [sp, #20]
 800735c:	9004      	str	r0, [sp, #16]
 800735e:	463b      	mov	r3, r7
 8007360:	4602      	mov	r2, r0
 8007362:	2b65      	cmp	r3, #101	; 0x65
 8007364:	d001      	beq.n	800736a <_strtod_l+0x172>
 8007366:	2b45      	cmp	r3, #69	; 0x45
 8007368:	d114      	bne.n	8007394 <_strtod_l+0x19c>
 800736a:	b924      	cbnz	r4, 8007376 <_strtod_l+0x17e>
 800736c:	b910      	cbnz	r0, 8007374 <_strtod_l+0x17c>
 800736e:	9b06      	ldr	r3, [sp, #24]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d09e      	beq.n	80072b2 <_strtod_l+0xba>
 8007374:	2400      	movs	r4, #0
 8007376:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8007378:	1c73      	adds	r3, r6, #1
 800737a:	931b      	str	r3, [sp, #108]	; 0x6c
 800737c:	7873      	ldrb	r3, [r6, #1]
 800737e:	2b2b      	cmp	r3, #43	; 0x2b
 8007380:	d078      	beq.n	8007474 <_strtod_l+0x27c>
 8007382:	2b2d      	cmp	r3, #45	; 0x2d
 8007384:	d070      	beq.n	8007468 <_strtod_l+0x270>
 8007386:	f04f 0c00 	mov.w	ip, #0
 800738a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800738e:	2f09      	cmp	r7, #9
 8007390:	d97c      	bls.n	800748c <_strtod_l+0x294>
 8007392:	961b      	str	r6, [sp, #108]	; 0x6c
 8007394:	f04f 0e00 	mov.w	lr, #0
 8007398:	e09a      	b.n	80074d0 <_strtod_l+0x2d8>
 800739a:	2300      	movs	r3, #0
 800739c:	e7c7      	b.n	800732e <_strtod_l+0x136>
 800739e:	9905      	ldr	r1, [sp, #20]
 80073a0:	2908      	cmp	r1, #8
 80073a2:	bfdd      	ittte	le
 80073a4:	9907      	ldrle	r1, [sp, #28]
 80073a6:	fb02 3301 	mlale	r3, r2, r1, r3
 80073aa:	9307      	strle	r3, [sp, #28]
 80073ac:	fb02 3505 	mlagt	r5, r2, r5, r3
 80073b0:	9b05      	ldr	r3, [sp, #20]
 80073b2:	3001      	adds	r0, #1
 80073b4:	3301      	adds	r3, #1
 80073b6:	9305      	str	r3, [sp, #20]
 80073b8:	901b      	str	r0, [sp, #108]	; 0x6c
 80073ba:	e7bf      	b.n	800733c <_strtod_l+0x144>
 80073bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80073be:	191a      	adds	r2, r3, r4
 80073c0:	921b      	str	r2, [sp, #108]	; 0x6c
 80073c2:	9a05      	ldr	r2, [sp, #20]
 80073c4:	5d1b      	ldrb	r3, [r3, r4]
 80073c6:	2a00      	cmp	r2, #0
 80073c8:	d037      	beq.n	800743a <_strtod_l+0x242>
 80073ca:	9c05      	ldr	r4, [sp, #20]
 80073cc:	4602      	mov	r2, r0
 80073ce:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80073d2:	2909      	cmp	r1, #9
 80073d4:	d913      	bls.n	80073fe <_strtod_l+0x206>
 80073d6:	2101      	movs	r1, #1
 80073d8:	9104      	str	r1, [sp, #16]
 80073da:	e7c2      	b.n	8007362 <_strtod_l+0x16a>
 80073dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80073de:	1c5a      	adds	r2, r3, #1
 80073e0:	921b      	str	r2, [sp, #108]	; 0x6c
 80073e2:	785b      	ldrb	r3, [r3, #1]
 80073e4:	3001      	adds	r0, #1
 80073e6:	2b30      	cmp	r3, #48	; 0x30
 80073e8:	d0f8      	beq.n	80073dc <_strtod_l+0x1e4>
 80073ea:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80073ee:	2a08      	cmp	r2, #8
 80073f0:	f200 84e4 	bhi.w	8007dbc <_strtod_l+0xbc4>
 80073f4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80073f6:	9208      	str	r2, [sp, #32]
 80073f8:	4602      	mov	r2, r0
 80073fa:	2000      	movs	r0, #0
 80073fc:	4604      	mov	r4, r0
 80073fe:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8007402:	f100 0101 	add.w	r1, r0, #1
 8007406:	d012      	beq.n	800742e <_strtod_l+0x236>
 8007408:	440a      	add	r2, r1
 800740a:	eb00 0c04 	add.w	ip, r0, r4
 800740e:	4621      	mov	r1, r4
 8007410:	270a      	movs	r7, #10
 8007412:	458c      	cmp	ip, r1
 8007414:	d113      	bne.n	800743e <_strtod_l+0x246>
 8007416:	1821      	adds	r1, r4, r0
 8007418:	2908      	cmp	r1, #8
 800741a:	f104 0401 	add.w	r4, r4, #1
 800741e:	4404      	add	r4, r0
 8007420:	dc19      	bgt.n	8007456 <_strtod_l+0x25e>
 8007422:	9b07      	ldr	r3, [sp, #28]
 8007424:	210a      	movs	r1, #10
 8007426:	fb01 e303 	mla	r3, r1, r3, lr
 800742a:	9307      	str	r3, [sp, #28]
 800742c:	2100      	movs	r1, #0
 800742e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007430:	1c58      	adds	r0, r3, #1
 8007432:	901b      	str	r0, [sp, #108]	; 0x6c
 8007434:	785b      	ldrb	r3, [r3, #1]
 8007436:	4608      	mov	r0, r1
 8007438:	e7c9      	b.n	80073ce <_strtod_l+0x1d6>
 800743a:	9805      	ldr	r0, [sp, #20]
 800743c:	e7d3      	b.n	80073e6 <_strtod_l+0x1ee>
 800743e:	2908      	cmp	r1, #8
 8007440:	f101 0101 	add.w	r1, r1, #1
 8007444:	dc03      	bgt.n	800744e <_strtod_l+0x256>
 8007446:	9b07      	ldr	r3, [sp, #28]
 8007448:	437b      	muls	r3, r7
 800744a:	9307      	str	r3, [sp, #28]
 800744c:	e7e1      	b.n	8007412 <_strtod_l+0x21a>
 800744e:	2910      	cmp	r1, #16
 8007450:	bfd8      	it	le
 8007452:	437d      	mulle	r5, r7
 8007454:	e7dd      	b.n	8007412 <_strtod_l+0x21a>
 8007456:	2c10      	cmp	r4, #16
 8007458:	bfdc      	itt	le
 800745a:	210a      	movle	r1, #10
 800745c:	fb01 e505 	mlale	r5, r1, r5, lr
 8007460:	e7e4      	b.n	800742c <_strtod_l+0x234>
 8007462:	2301      	movs	r3, #1
 8007464:	9304      	str	r3, [sp, #16]
 8007466:	e781      	b.n	800736c <_strtod_l+0x174>
 8007468:	f04f 0c01 	mov.w	ip, #1
 800746c:	1cb3      	adds	r3, r6, #2
 800746e:	931b      	str	r3, [sp, #108]	; 0x6c
 8007470:	78b3      	ldrb	r3, [r6, #2]
 8007472:	e78a      	b.n	800738a <_strtod_l+0x192>
 8007474:	f04f 0c00 	mov.w	ip, #0
 8007478:	e7f8      	b.n	800746c <_strtod_l+0x274>
 800747a:	bf00      	nop
 800747c:	0800a74c 	.word	0x0800a74c
 8007480:	7ff00000 	.word	0x7ff00000
 8007484:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007486:	1c5f      	adds	r7, r3, #1
 8007488:	971b      	str	r7, [sp, #108]	; 0x6c
 800748a:	785b      	ldrb	r3, [r3, #1]
 800748c:	2b30      	cmp	r3, #48	; 0x30
 800748e:	d0f9      	beq.n	8007484 <_strtod_l+0x28c>
 8007490:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8007494:	2f08      	cmp	r7, #8
 8007496:	f63f af7d 	bhi.w	8007394 <_strtod_l+0x19c>
 800749a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800749e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80074a0:	930a      	str	r3, [sp, #40]	; 0x28
 80074a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80074a4:	1c5f      	adds	r7, r3, #1
 80074a6:	971b      	str	r7, [sp, #108]	; 0x6c
 80074a8:	785b      	ldrb	r3, [r3, #1]
 80074aa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80074ae:	f1b8 0f09 	cmp.w	r8, #9
 80074b2:	d937      	bls.n	8007524 <_strtod_l+0x32c>
 80074b4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80074b6:	1a7f      	subs	r7, r7, r1
 80074b8:	2f08      	cmp	r7, #8
 80074ba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80074be:	dc37      	bgt.n	8007530 <_strtod_l+0x338>
 80074c0:	45be      	cmp	lr, r7
 80074c2:	bfa8      	it	ge
 80074c4:	46be      	movge	lr, r7
 80074c6:	f1bc 0f00 	cmp.w	ip, #0
 80074ca:	d001      	beq.n	80074d0 <_strtod_l+0x2d8>
 80074cc:	f1ce 0e00 	rsb	lr, lr, #0
 80074d0:	2c00      	cmp	r4, #0
 80074d2:	d151      	bne.n	8007578 <_strtod_l+0x380>
 80074d4:	2800      	cmp	r0, #0
 80074d6:	f47f aece 	bne.w	8007276 <_strtod_l+0x7e>
 80074da:	9a06      	ldr	r2, [sp, #24]
 80074dc:	2a00      	cmp	r2, #0
 80074de:	f47f aeca 	bne.w	8007276 <_strtod_l+0x7e>
 80074e2:	9a04      	ldr	r2, [sp, #16]
 80074e4:	2a00      	cmp	r2, #0
 80074e6:	f47f aee4 	bne.w	80072b2 <_strtod_l+0xba>
 80074ea:	2b4e      	cmp	r3, #78	; 0x4e
 80074ec:	d027      	beq.n	800753e <_strtod_l+0x346>
 80074ee:	dc21      	bgt.n	8007534 <_strtod_l+0x33c>
 80074f0:	2b49      	cmp	r3, #73	; 0x49
 80074f2:	f47f aede 	bne.w	80072b2 <_strtod_l+0xba>
 80074f6:	49a0      	ldr	r1, [pc, #640]	; (8007778 <_strtod_l+0x580>)
 80074f8:	a81b      	add	r0, sp, #108	; 0x6c
 80074fa:	f001 fdd7 	bl	80090ac <__match>
 80074fe:	2800      	cmp	r0, #0
 8007500:	f43f aed7 	beq.w	80072b2 <_strtod_l+0xba>
 8007504:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007506:	499d      	ldr	r1, [pc, #628]	; (800777c <_strtod_l+0x584>)
 8007508:	3b01      	subs	r3, #1
 800750a:	a81b      	add	r0, sp, #108	; 0x6c
 800750c:	931b      	str	r3, [sp, #108]	; 0x6c
 800750e:	f001 fdcd 	bl	80090ac <__match>
 8007512:	b910      	cbnz	r0, 800751a <_strtod_l+0x322>
 8007514:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007516:	3301      	adds	r3, #1
 8007518:	931b      	str	r3, [sp, #108]	; 0x6c
 800751a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8007790 <_strtod_l+0x598>
 800751e:	f04f 0a00 	mov.w	sl, #0
 8007522:	e6a8      	b.n	8007276 <_strtod_l+0x7e>
 8007524:	210a      	movs	r1, #10
 8007526:	fb01 3e0e 	mla	lr, r1, lr, r3
 800752a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800752e:	e7b8      	b.n	80074a2 <_strtod_l+0x2aa>
 8007530:	46be      	mov	lr, r7
 8007532:	e7c8      	b.n	80074c6 <_strtod_l+0x2ce>
 8007534:	2b69      	cmp	r3, #105	; 0x69
 8007536:	d0de      	beq.n	80074f6 <_strtod_l+0x2fe>
 8007538:	2b6e      	cmp	r3, #110	; 0x6e
 800753a:	f47f aeba 	bne.w	80072b2 <_strtod_l+0xba>
 800753e:	4990      	ldr	r1, [pc, #576]	; (8007780 <_strtod_l+0x588>)
 8007540:	a81b      	add	r0, sp, #108	; 0x6c
 8007542:	f001 fdb3 	bl	80090ac <__match>
 8007546:	2800      	cmp	r0, #0
 8007548:	f43f aeb3 	beq.w	80072b2 <_strtod_l+0xba>
 800754c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	2b28      	cmp	r3, #40	; 0x28
 8007552:	d10e      	bne.n	8007572 <_strtod_l+0x37a>
 8007554:	aa1e      	add	r2, sp, #120	; 0x78
 8007556:	498b      	ldr	r1, [pc, #556]	; (8007784 <_strtod_l+0x58c>)
 8007558:	a81b      	add	r0, sp, #108	; 0x6c
 800755a:	f001 fdbb 	bl	80090d4 <__hexnan>
 800755e:	2805      	cmp	r0, #5
 8007560:	d107      	bne.n	8007572 <_strtod_l+0x37a>
 8007562:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007564:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8007568:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800756c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007570:	e681      	b.n	8007276 <_strtod_l+0x7e>
 8007572:	f8df b224 	ldr.w	fp, [pc, #548]	; 8007798 <_strtod_l+0x5a0>
 8007576:	e7d2      	b.n	800751e <_strtod_l+0x326>
 8007578:	ebae 0302 	sub.w	r3, lr, r2
 800757c:	9306      	str	r3, [sp, #24]
 800757e:	9b05      	ldr	r3, [sp, #20]
 8007580:	9807      	ldr	r0, [sp, #28]
 8007582:	2b00      	cmp	r3, #0
 8007584:	bf08      	it	eq
 8007586:	4623      	moveq	r3, r4
 8007588:	2c10      	cmp	r4, #16
 800758a:	9305      	str	r3, [sp, #20]
 800758c:	46a0      	mov	r8, r4
 800758e:	bfa8      	it	ge
 8007590:	f04f 0810 	movge.w	r8, #16
 8007594:	f7f8 ffd6 	bl	8000544 <__aeabi_ui2d>
 8007598:	2c09      	cmp	r4, #9
 800759a:	4682      	mov	sl, r0
 800759c:	468b      	mov	fp, r1
 800759e:	dc13      	bgt.n	80075c8 <_strtod_l+0x3d0>
 80075a0:	9b06      	ldr	r3, [sp, #24]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	f43f ae67 	beq.w	8007276 <_strtod_l+0x7e>
 80075a8:	9b06      	ldr	r3, [sp, #24]
 80075aa:	dd7a      	ble.n	80076a2 <_strtod_l+0x4aa>
 80075ac:	2b16      	cmp	r3, #22
 80075ae:	dc61      	bgt.n	8007674 <_strtod_l+0x47c>
 80075b0:	4a75      	ldr	r2, [pc, #468]	; (8007788 <_strtod_l+0x590>)
 80075b2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80075b6:	e9de 0100 	ldrd	r0, r1, [lr]
 80075ba:	4652      	mov	r2, sl
 80075bc:	465b      	mov	r3, fp
 80075be:	f7f9 f83b 	bl	8000638 <__aeabi_dmul>
 80075c2:	4682      	mov	sl, r0
 80075c4:	468b      	mov	fp, r1
 80075c6:	e656      	b.n	8007276 <_strtod_l+0x7e>
 80075c8:	4b6f      	ldr	r3, [pc, #444]	; (8007788 <_strtod_l+0x590>)
 80075ca:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80075ce:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80075d2:	f7f9 f831 	bl	8000638 <__aeabi_dmul>
 80075d6:	4606      	mov	r6, r0
 80075d8:	4628      	mov	r0, r5
 80075da:	460f      	mov	r7, r1
 80075dc:	f7f8 ffb2 	bl	8000544 <__aeabi_ui2d>
 80075e0:	4602      	mov	r2, r0
 80075e2:	460b      	mov	r3, r1
 80075e4:	4630      	mov	r0, r6
 80075e6:	4639      	mov	r1, r7
 80075e8:	f7f8 fe70 	bl	80002cc <__adddf3>
 80075ec:	2c0f      	cmp	r4, #15
 80075ee:	4682      	mov	sl, r0
 80075f0:	468b      	mov	fp, r1
 80075f2:	ddd5      	ble.n	80075a0 <_strtod_l+0x3a8>
 80075f4:	9b06      	ldr	r3, [sp, #24]
 80075f6:	eba4 0808 	sub.w	r8, r4, r8
 80075fa:	4498      	add	r8, r3
 80075fc:	f1b8 0f00 	cmp.w	r8, #0
 8007600:	f340 8096 	ble.w	8007730 <_strtod_l+0x538>
 8007604:	f018 030f 	ands.w	r3, r8, #15
 8007608:	d00a      	beq.n	8007620 <_strtod_l+0x428>
 800760a:	495f      	ldr	r1, [pc, #380]	; (8007788 <_strtod_l+0x590>)
 800760c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007610:	4652      	mov	r2, sl
 8007612:	465b      	mov	r3, fp
 8007614:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007618:	f7f9 f80e 	bl	8000638 <__aeabi_dmul>
 800761c:	4682      	mov	sl, r0
 800761e:	468b      	mov	fp, r1
 8007620:	f038 080f 	bics.w	r8, r8, #15
 8007624:	d073      	beq.n	800770e <_strtod_l+0x516>
 8007626:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800762a:	dd47      	ble.n	80076bc <_strtod_l+0x4c4>
 800762c:	2400      	movs	r4, #0
 800762e:	46a0      	mov	r8, r4
 8007630:	9407      	str	r4, [sp, #28]
 8007632:	9405      	str	r4, [sp, #20]
 8007634:	2322      	movs	r3, #34	; 0x22
 8007636:	f8df b158 	ldr.w	fp, [pc, #344]	; 8007790 <_strtod_l+0x598>
 800763a:	f8c9 3000 	str.w	r3, [r9]
 800763e:	f04f 0a00 	mov.w	sl, #0
 8007642:	9b07      	ldr	r3, [sp, #28]
 8007644:	2b00      	cmp	r3, #0
 8007646:	f43f ae16 	beq.w	8007276 <_strtod_l+0x7e>
 800764a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800764c:	4648      	mov	r0, r9
 800764e:	f001 fe33 	bl	80092b8 <_Bfree>
 8007652:	9905      	ldr	r1, [sp, #20]
 8007654:	4648      	mov	r0, r9
 8007656:	f001 fe2f 	bl	80092b8 <_Bfree>
 800765a:	4641      	mov	r1, r8
 800765c:	4648      	mov	r0, r9
 800765e:	f001 fe2b 	bl	80092b8 <_Bfree>
 8007662:	9907      	ldr	r1, [sp, #28]
 8007664:	4648      	mov	r0, r9
 8007666:	f001 fe27 	bl	80092b8 <_Bfree>
 800766a:	4621      	mov	r1, r4
 800766c:	4648      	mov	r0, r9
 800766e:	f001 fe23 	bl	80092b8 <_Bfree>
 8007672:	e600      	b.n	8007276 <_strtod_l+0x7e>
 8007674:	9a06      	ldr	r2, [sp, #24]
 8007676:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800767a:	4293      	cmp	r3, r2
 800767c:	dbba      	blt.n	80075f4 <_strtod_l+0x3fc>
 800767e:	4d42      	ldr	r5, [pc, #264]	; (8007788 <_strtod_l+0x590>)
 8007680:	f1c4 040f 	rsb	r4, r4, #15
 8007684:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007688:	4652      	mov	r2, sl
 800768a:	465b      	mov	r3, fp
 800768c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007690:	f7f8 ffd2 	bl	8000638 <__aeabi_dmul>
 8007694:	9b06      	ldr	r3, [sp, #24]
 8007696:	1b1c      	subs	r4, r3, r4
 8007698:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800769c:	e9d5 2300 	ldrd	r2, r3, [r5]
 80076a0:	e78d      	b.n	80075be <_strtod_l+0x3c6>
 80076a2:	f113 0f16 	cmn.w	r3, #22
 80076a6:	dba5      	blt.n	80075f4 <_strtod_l+0x3fc>
 80076a8:	4a37      	ldr	r2, [pc, #220]	; (8007788 <_strtod_l+0x590>)
 80076aa:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80076ae:	e9d2 2300 	ldrd	r2, r3, [r2]
 80076b2:	4650      	mov	r0, sl
 80076b4:	4659      	mov	r1, fp
 80076b6:	f7f9 f8e9 	bl	800088c <__aeabi_ddiv>
 80076ba:	e782      	b.n	80075c2 <_strtod_l+0x3ca>
 80076bc:	2300      	movs	r3, #0
 80076be:	4e33      	ldr	r6, [pc, #204]	; (800778c <_strtod_l+0x594>)
 80076c0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80076c4:	4650      	mov	r0, sl
 80076c6:	4659      	mov	r1, fp
 80076c8:	461d      	mov	r5, r3
 80076ca:	f1b8 0f01 	cmp.w	r8, #1
 80076ce:	dc21      	bgt.n	8007714 <_strtod_l+0x51c>
 80076d0:	b10b      	cbz	r3, 80076d6 <_strtod_l+0x4de>
 80076d2:	4682      	mov	sl, r0
 80076d4:	468b      	mov	fp, r1
 80076d6:	4b2d      	ldr	r3, [pc, #180]	; (800778c <_strtod_l+0x594>)
 80076d8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80076dc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80076e0:	4652      	mov	r2, sl
 80076e2:	465b      	mov	r3, fp
 80076e4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80076e8:	f7f8 ffa6 	bl	8000638 <__aeabi_dmul>
 80076ec:	4b28      	ldr	r3, [pc, #160]	; (8007790 <_strtod_l+0x598>)
 80076ee:	460a      	mov	r2, r1
 80076f0:	400b      	ands	r3, r1
 80076f2:	4928      	ldr	r1, [pc, #160]	; (8007794 <_strtod_l+0x59c>)
 80076f4:	428b      	cmp	r3, r1
 80076f6:	4682      	mov	sl, r0
 80076f8:	d898      	bhi.n	800762c <_strtod_l+0x434>
 80076fa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80076fe:	428b      	cmp	r3, r1
 8007700:	bf86      	itte	hi
 8007702:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800779c <_strtod_l+0x5a4>
 8007706:	f04f 3aff 	movhi.w	sl, #4294967295
 800770a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800770e:	2300      	movs	r3, #0
 8007710:	9304      	str	r3, [sp, #16]
 8007712:	e077      	b.n	8007804 <_strtod_l+0x60c>
 8007714:	f018 0f01 	tst.w	r8, #1
 8007718:	d006      	beq.n	8007728 <_strtod_l+0x530>
 800771a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800771e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007722:	f7f8 ff89 	bl	8000638 <__aeabi_dmul>
 8007726:	2301      	movs	r3, #1
 8007728:	3501      	adds	r5, #1
 800772a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800772e:	e7cc      	b.n	80076ca <_strtod_l+0x4d2>
 8007730:	d0ed      	beq.n	800770e <_strtod_l+0x516>
 8007732:	f1c8 0800 	rsb	r8, r8, #0
 8007736:	f018 020f 	ands.w	r2, r8, #15
 800773a:	d00a      	beq.n	8007752 <_strtod_l+0x55a>
 800773c:	4b12      	ldr	r3, [pc, #72]	; (8007788 <_strtod_l+0x590>)
 800773e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007742:	4650      	mov	r0, sl
 8007744:	4659      	mov	r1, fp
 8007746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774a:	f7f9 f89f 	bl	800088c <__aeabi_ddiv>
 800774e:	4682      	mov	sl, r0
 8007750:	468b      	mov	fp, r1
 8007752:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007756:	d0da      	beq.n	800770e <_strtod_l+0x516>
 8007758:	f1b8 0f1f 	cmp.w	r8, #31
 800775c:	dd20      	ble.n	80077a0 <_strtod_l+0x5a8>
 800775e:	2400      	movs	r4, #0
 8007760:	46a0      	mov	r8, r4
 8007762:	9407      	str	r4, [sp, #28]
 8007764:	9405      	str	r4, [sp, #20]
 8007766:	2322      	movs	r3, #34	; 0x22
 8007768:	f04f 0a00 	mov.w	sl, #0
 800776c:	f04f 0b00 	mov.w	fp, #0
 8007770:	f8c9 3000 	str.w	r3, [r9]
 8007774:	e765      	b.n	8007642 <_strtod_l+0x44a>
 8007776:	bf00      	nop
 8007778:	0800a715 	.word	0x0800a715
 800777c:	0800a7a3 	.word	0x0800a7a3
 8007780:	0800a71d 	.word	0x0800a71d
 8007784:	0800a760 	.word	0x0800a760
 8007788:	0800a7e0 	.word	0x0800a7e0
 800778c:	0800a7b8 	.word	0x0800a7b8
 8007790:	7ff00000 	.word	0x7ff00000
 8007794:	7ca00000 	.word	0x7ca00000
 8007798:	fff80000 	.word	0xfff80000
 800779c:	7fefffff 	.word	0x7fefffff
 80077a0:	f018 0310 	ands.w	r3, r8, #16
 80077a4:	bf18      	it	ne
 80077a6:	236a      	movne	r3, #106	; 0x6a
 80077a8:	4da0      	ldr	r5, [pc, #640]	; (8007a2c <_strtod_l+0x834>)
 80077aa:	9304      	str	r3, [sp, #16]
 80077ac:	4650      	mov	r0, sl
 80077ae:	4659      	mov	r1, fp
 80077b0:	2300      	movs	r3, #0
 80077b2:	f1b8 0f00 	cmp.w	r8, #0
 80077b6:	f300 810a 	bgt.w	80079ce <_strtod_l+0x7d6>
 80077ba:	b10b      	cbz	r3, 80077c0 <_strtod_l+0x5c8>
 80077bc:	4682      	mov	sl, r0
 80077be:	468b      	mov	fp, r1
 80077c0:	9b04      	ldr	r3, [sp, #16]
 80077c2:	b1bb      	cbz	r3, 80077f4 <_strtod_l+0x5fc>
 80077c4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80077c8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	4659      	mov	r1, fp
 80077d0:	dd10      	ble.n	80077f4 <_strtod_l+0x5fc>
 80077d2:	2b1f      	cmp	r3, #31
 80077d4:	f340 8107 	ble.w	80079e6 <_strtod_l+0x7ee>
 80077d8:	2b34      	cmp	r3, #52	; 0x34
 80077da:	bfde      	ittt	le
 80077dc:	3b20      	suble	r3, #32
 80077de:	f04f 32ff 	movle.w	r2, #4294967295
 80077e2:	fa02 f303 	lslle.w	r3, r2, r3
 80077e6:	f04f 0a00 	mov.w	sl, #0
 80077ea:	bfcc      	ite	gt
 80077ec:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80077f0:	ea03 0b01 	andle.w	fp, r3, r1
 80077f4:	2200      	movs	r2, #0
 80077f6:	2300      	movs	r3, #0
 80077f8:	4650      	mov	r0, sl
 80077fa:	4659      	mov	r1, fp
 80077fc:	f7f9 f984 	bl	8000b08 <__aeabi_dcmpeq>
 8007800:	2800      	cmp	r0, #0
 8007802:	d1ac      	bne.n	800775e <_strtod_l+0x566>
 8007804:	9b07      	ldr	r3, [sp, #28]
 8007806:	9300      	str	r3, [sp, #0]
 8007808:	9a05      	ldr	r2, [sp, #20]
 800780a:	9908      	ldr	r1, [sp, #32]
 800780c:	4623      	mov	r3, r4
 800780e:	4648      	mov	r0, r9
 8007810:	f001 fda4 	bl	800935c <__s2b>
 8007814:	9007      	str	r0, [sp, #28]
 8007816:	2800      	cmp	r0, #0
 8007818:	f43f af08 	beq.w	800762c <_strtod_l+0x434>
 800781c:	9a06      	ldr	r2, [sp, #24]
 800781e:	9b06      	ldr	r3, [sp, #24]
 8007820:	2a00      	cmp	r2, #0
 8007822:	f1c3 0300 	rsb	r3, r3, #0
 8007826:	bfa8      	it	ge
 8007828:	2300      	movge	r3, #0
 800782a:	930e      	str	r3, [sp, #56]	; 0x38
 800782c:	2400      	movs	r4, #0
 800782e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007832:	9316      	str	r3, [sp, #88]	; 0x58
 8007834:	46a0      	mov	r8, r4
 8007836:	9b07      	ldr	r3, [sp, #28]
 8007838:	4648      	mov	r0, r9
 800783a:	6859      	ldr	r1, [r3, #4]
 800783c:	f001 fd08 	bl	8009250 <_Balloc>
 8007840:	9005      	str	r0, [sp, #20]
 8007842:	2800      	cmp	r0, #0
 8007844:	f43f aef6 	beq.w	8007634 <_strtod_l+0x43c>
 8007848:	9b07      	ldr	r3, [sp, #28]
 800784a:	691a      	ldr	r2, [r3, #16]
 800784c:	3202      	adds	r2, #2
 800784e:	f103 010c 	add.w	r1, r3, #12
 8007852:	0092      	lsls	r2, r2, #2
 8007854:	300c      	adds	r0, #12
 8007856:	f7fe fe23 	bl	80064a0 <memcpy>
 800785a:	aa1e      	add	r2, sp, #120	; 0x78
 800785c:	a91d      	add	r1, sp, #116	; 0x74
 800785e:	ec4b ab10 	vmov	d0, sl, fp
 8007862:	4648      	mov	r0, r9
 8007864:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007868:	f002 f834 	bl	80098d4 <__d2b>
 800786c:	901c      	str	r0, [sp, #112]	; 0x70
 800786e:	2800      	cmp	r0, #0
 8007870:	f43f aee0 	beq.w	8007634 <_strtod_l+0x43c>
 8007874:	2101      	movs	r1, #1
 8007876:	4648      	mov	r0, r9
 8007878:	f001 fdfc 	bl	8009474 <__i2b>
 800787c:	4680      	mov	r8, r0
 800787e:	2800      	cmp	r0, #0
 8007880:	f43f aed8 	beq.w	8007634 <_strtod_l+0x43c>
 8007884:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007886:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007888:	2e00      	cmp	r6, #0
 800788a:	bfab      	itete	ge
 800788c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800788e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007890:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007892:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8007894:	bfac      	ite	ge
 8007896:	18f7      	addge	r7, r6, r3
 8007898:	1b9d      	sublt	r5, r3, r6
 800789a:	9b04      	ldr	r3, [sp, #16]
 800789c:	1af6      	subs	r6, r6, r3
 800789e:	4416      	add	r6, r2
 80078a0:	4b63      	ldr	r3, [pc, #396]	; (8007a30 <_strtod_l+0x838>)
 80078a2:	3e01      	subs	r6, #1
 80078a4:	429e      	cmp	r6, r3
 80078a6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80078aa:	f280 80af 	bge.w	8007a0c <_strtod_l+0x814>
 80078ae:	1b9b      	subs	r3, r3, r6
 80078b0:	2b1f      	cmp	r3, #31
 80078b2:	eba2 0203 	sub.w	r2, r2, r3
 80078b6:	f04f 0101 	mov.w	r1, #1
 80078ba:	f300 809b 	bgt.w	80079f4 <_strtod_l+0x7fc>
 80078be:	fa01 f303 	lsl.w	r3, r1, r3
 80078c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80078c4:	2300      	movs	r3, #0
 80078c6:	930a      	str	r3, [sp, #40]	; 0x28
 80078c8:	18be      	adds	r6, r7, r2
 80078ca:	9b04      	ldr	r3, [sp, #16]
 80078cc:	42b7      	cmp	r7, r6
 80078ce:	4415      	add	r5, r2
 80078d0:	441d      	add	r5, r3
 80078d2:	463b      	mov	r3, r7
 80078d4:	bfa8      	it	ge
 80078d6:	4633      	movge	r3, r6
 80078d8:	42ab      	cmp	r3, r5
 80078da:	bfa8      	it	ge
 80078dc:	462b      	movge	r3, r5
 80078de:	2b00      	cmp	r3, #0
 80078e0:	bfc2      	ittt	gt
 80078e2:	1af6      	subgt	r6, r6, r3
 80078e4:	1aed      	subgt	r5, r5, r3
 80078e6:	1aff      	subgt	r7, r7, r3
 80078e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078ea:	b1bb      	cbz	r3, 800791c <_strtod_l+0x724>
 80078ec:	4641      	mov	r1, r8
 80078ee:	461a      	mov	r2, r3
 80078f0:	4648      	mov	r0, r9
 80078f2:	f001 fe5f 	bl	80095b4 <__pow5mult>
 80078f6:	4680      	mov	r8, r0
 80078f8:	2800      	cmp	r0, #0
 80078fa:	f43f ae9b 	beq.w	8007634 <_strtod_l+0x43c>
 80078fe:	4601      	mov	r1, r0
 8007900:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007902:	4648      	mov	r0, r9
 8007904:	f001 fdbf 	bl	8009486 <__multiply>
 8007908:	900c      	str	r0, [sp, #48]	; 0x30
 800790a:	2800      	cmp	r0, #0
 800790c:	f43f ae92 	beq.w	8007634 <_strtod_l+0x43c>
 8007910:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007912:	4648      	mov	r0, r9
 8007914:	f001 fcd0 	bl	80092b8 <_Bfree>
 8007918:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800791a:	931c      	str	r3, [sp, #112]	; 0x70
 800791c:	2e00      	cmp	r6, #0
 800791e:	dc7a      	bgt.n	8007a16 <_strtod_l+0x81e>
 8007920:	9b06      	ldr	r3, [sp, #24]
 8007922:	2b00      	cmp	r3, #0
 8007924:	dd08      	ble.n	8007938 <_strtod_l+0x740>
 8007926:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007928:	9905      	ldr	r1, [sp, #20]
 800792a:	4648      	mov	r0, r9
 800792c:	f001 fe42 	bl	80095b4 <__pow5mult>
 8007930:	9005      	str	r0, [sp, #20]
 8007932:	2800      	cmp	r0, #0
 8007934:	f43f ae7e 	beq.w	8007634 <_strtod_l+0x43c>
 8007938:	2d00      	cmp	r5, #0
 800793a:	dd08      	ble.n	800794e <_strtod_l+0x756>
 800793c:	462a      	mov	r2, r5
 800793e:	9905      	ldr	r1, [sp, #20]
 8007940:	4648      	mov	r0, r9
 8007942:	f001 fe85 	bl	8009650 <__lshift>
 8007946:	9005      	str	r0, [sp, #20]
 8007948:	2800      	cmp	r0, #0
 800794a:	f43f ae73 	beq.w	8007634 <_strtod_l+0x43c>
 800794e:	2f00      	cmp	r7, #0
 8007950:	dd08      	ble.n	8007964 <_strtod_l+0x76c>
 8007952:	4641      	mov	r1, r8
 8007954:	463a      	mov	r2, r7
 8007956:	4648      	mov	r0, r9
 8007958:	f001 fe7a 	bl	8009650 <__lshift>
 800795c:	4680      	mov	r8, r0
 800795e:	2800      	cmp	r0, #0
 8007960:	f43f ae68 	beq.w	8007634 <_strtod_l+0x43c>
 8007964:	9a05      	ldr	r2, [sp, #20]
 8007966:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007968:	4648      	mov	r0, r9
 800796a:	f001 fedf 	bl	800972c <__mdiff>
 800796e:	4604      	mov	r4, r0
 8007970:	2800      	cmp	r0, #0
 8007972:	f43f ae5f 	beq.w	8007634 <_strtod_l+0x43c>
 8007976:	68c3      	ldr	r3, [r0, #12]
 8007978:	930c      	str	r3, [sp, #48]	; 0x30
 800797a:	2300      	movs	r3, #0
 800797c:	60c3      	str	r3, [r0, #12]
 800797e:	4641      	mov	r1, r8
 8007980:	f001 feba 	bl	80096f8 <__mcmp>
 8007984:	2800      	cmp	r0, #0
 8007986:	da55      	bge.n	8007a34 <_strtod_l+0x83c>
 8007988:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800798a:	b9e3      	cbnz	r3, 80079c6 <_strtod_l+0x7ce>
 800798c:	f1ba 0f00 	cmp.w	sl, #0
 8007990:	d119      	bne.n	80079c6 <_strtod_l+0x7ce>
 8007992:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007996:	b9b3      	cbnz	r3, 80079c6 <_strtod_l+0x7ce>
 8007998:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800799c:	0d1b      	lsrs	r3, r3, #20
 800799e:	051b      	lsls	r3, r3, #20
 80079a0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80079a4:	d90f      	bls.n	80079c6 <_strtod_l+0x7ce>
 80079a6:	6963      	ldr	r3, [r4, #20]
 80079a8:	b913      	cbnz	r3, 80079b0 <_strtod_l+0x7b8>
 80079aa:	6923      	ldr	r3, [r4, #16]
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	dd0a      	ble.n	80079c6 <_strtod_l+0x7ce>
 80079b0:	4621      	mov	r1, r4
 80079b2:	2201      	movs	r2, #1
 80079b4:	4648      	mov	r0, r9
 80079b6:	f001 fe4b 	bl	8009650 <__lshift>
 80079ba:	4641      	mov	r1, r8
 80079bc:	4604      	mov	r4, r0
 80079be:	f001 fe9b 	bl	80096f8 <__mcmp>
 80079c2:	2800      	cmp	r0, #0
 80079c4:	dc67      	bgt.n	8007a96 <_strtod_l+0x89e>
 80079c6:	9b04      	ldr	r3, [sp, #16]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d171      	bne.n	8007ab0 <_strtod_l+0x8b8>
 80079cc:	e63d      	b.n	800764a <_strtod_l+0x452>
 80079ce:	f018 0f01 	tst.w	r8, #1
 80079d2:	d004      	beq.n	80079de <_strtod_l+0x7e6>
 80079d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80079d8:	f7f8 fe2e 	bl	8000638 <__aeabi_dmul>
 80079dc:	2301      	movs	r3, #1
 80079de:	ea4f 0868 	mov.w	r8, r8, asr #1
 80079e2:	3508      	adds	r5, #8
 80079e4:	e6e5      	b.n	80077b2 <_strtod_l+0x5ba>
 80079e6:	f04f 32ff 	mov.w	r2, #4294967295
 80079ea:	fa02 f303 	lsl.w	r3, r2, r3
 80079ee:	ea03 0a0a 	and.w	sl, r3, sl
 80079f2:	e6ff      	b.n	80077f4 <_strtod_l+0x5fc>
 80079f4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80079f8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80079fc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007a00:	36e2      	adds	r6, #226	; 0xe2
 8007a02:	fa01 f306 	lsl.w	r3, r1, r6
 8007a06:	930a      	str	r3, [sp, #40]	; 0x28
 8007a08:	910f      	str	r1, [sp, #60]	; 0x3c
 8007a0a:	e75d      	b.n	80078c8 <_strtod_l+0x6d0>
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	930a      	str	r3, [sp, #40]	; 0x28
 8007a10:	2301      	movs	r3, #1
 8007a12:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a14:	e758      	b.n	80078c8 <_strtod_l+0x6d0>
 8007a16:	4632      	mov	r2, r6
 8007a18:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007a1a:	4648      	mov	r0, r9
 8007a1c:	f001 fe18 	bl	8009650 <__lshift>
 8007a20:	901c      	str	r0, [sp, #112]	; 0x70
 8007a22:	2800      	cmp	r0, #0
 8007a24:	f47f af7c 	bne.w	8007920 <_strtod_l+0x728>
 8007a28:	e604      	b.n	8007634 <_strtod_l+0x43c>
 8007a2a:	bf00      	nop
 8007a2c:	0800a778 	.word	0x0800a778
 8007a30:	fffffc02 	.word	0xfffffc02
 8007a34:	465d      	mov	r5, fp
 8007a36:	f040 8086 	bne.w	8007b46 <_strtod_l+0x94e>
 8007a3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007a40:	b32a      	cbz	r2, 8007a8e <_strtod_l+0x896>
 8007a42:	4aaf      	ldr	r2, [pc, #700]	; (8007d00 <_strtod_l+0xb08>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d153      	bne.n	8007af0 <_strtod_l+0x8f8>
 8007a48:	9b04      	ldr	r3, [sp, #16]
 8007a4a:	4650      	mov	r0, sl
 8007a4c:	b1d3      	cbz	r3, 8007a84 <_strtod_l+0x88c>
 8007a4e:	4aad      	ldr	r2, [pc, #692]	; (8007d04 <_strtod_l+0xb0c>)
 8007a50:	402a      	ands	r2, r5
 8007a52:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007a56:	f04f 31ff 	mov.w	r1, #4294967295
 8007a5a:	d816      	bhi.n	8007a8a <_strtod_l+0x892>
 8007a5c:	0d12      	lsrs	r2, r2, #20
 8007a5e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007a62:	fa01 f303 	lsl.w	r3, r1, r3
 8007a66:	4298      	cmp	r0, r3
 8007a68:	d142      	bne.n	8007af0 <_strtod_l+0x8f8>
 8007a6a:	4ba7      	ldr	r3, [pc, #668]	; (8007d08 <_strtod_l+0xb10>)
 8007a6c:	429d      	cmp	r5, r3
 8007a6e:	d102      	bne.n	8007a76 <_strtod_l+0x87e>
 8007a70:	3001      	adds	r0, #1
 8007a72:	f43f addf 	beq.w	8007634 <_strtod_l+0x43c>
 8007a76:	4ba3      	ldr	r3, [pc, #652]	; (8007d04 <_strtod_l+0xb0c>)
 8007a78:	402b      	ands	r3, r5
 8007a7a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007a7e:	f04f 0a00 	mov.w	sl, #0
 8007a82:	e7a0      	b.n	80079c6 <_strtod_l+0x7ce>
 8007a84:	f04f 33ff 	mov.w	r3, #4294967295
 8007a88:	e7ed      	b.n	8007a66 <_strtod_l+0x86e>
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	e7eb      	b.n	8007a66 <_strtod_l+0x86e>
 8007a8e:	bb7b      	cbnz	r3, 8007af0 <_strtod_l+0x8f8>
 8007a90:	f1ba 0f00 	cmp.w	sl, #0
 8007a94:	d12c      	bne.n	8007af0 <_strtod_l+0x8f8>
 8007a96:	9904      	ldr	r1, [sp, #16]
 8007a98:	4a9a      	ldr	r2, [pc, #616]	; (8007d04 <_strtod_l+0xb0c>)
 8007a9a:	465b      	mov	r3, fp
 8007a9c:	b1f1      	cbz	r1, 8007adc <_strtod_l+0x8e4>
 8007a9e:	ea02 010b 	and.w	r1, r2, fp
 8007aa2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007aa6:	dc19      	bgt.n	8007adc <_strtod_l+0x8e4>
 8007aa8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007aac:	f77f ae5b 	ble.w	8007766 <_strtod_l+0x56e>
 8007ab0:	4a96      	ldr	r2, [pc, #600]	; (8007d0c <_strtod_l+0xb14>)
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8007ab8:	4650      	mov	r0, sl
 8007aba:	4659      	mov	r1, fp
 8007abc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007ac0:	f7f8 fdba 	bl	8000638 <__aeabi_dmul>
 8007ac4:	4682      	mov	sl, r0
 8007ac6:	468b      	mov	fp, r1
 8007ac8:	2900      	cmp	r1, #0
 8007aca:	f47f adbe 	bne.w	800764a <_strtod_l+0x452>
 8007ace:	2800      	cmp	r0, #0
 8007ad0:	f47f adbb 	bne.w	800764a <_strtod_l+0x452>
 8007ad4:	2322      	movs	r3, #34	; 0x22
 8007ad6:	f8c9 3000 	str.w	r3, [r9]
 8007ada:	e5b6      	b.n	800764a <_strtod_l+0x452>
 8007adc:	4013      	ands	r3, r2
 8007ade:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007ae2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007ae6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007aea:	f04f 3aff 	mov.w	sl, #4294967295
 8007aee:	e76a      	b.n	80079c6 <_strtod_l+0x7ce>
 8007af0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007af2:	b193      	cbz	r3, 8007b1a <_strtod_l+0x922>
 8007af4:	422b      	tst	r3, r5
 8007af6:	f43f af66 	beq.w	80079c6 <_strtod_l+0x7ce>
 8007afa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007afc:	9a04      	ldr	r2, [sp, #16]
 8007afe:	4650      	mov	r0, sl
 8007b00:	4659      	mov	r1, fp
 8007b02:	b173      	cbz	r3, 8007b22 <_strtod_l+0x92a>
 8007b04:	f7ff fb5c 	bl	80071c0 <sulp>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007b10:	f7f8 fbdc 	bl	80002cc <__adddf3>
 8007b14:	4682      	mov	sl, r0
 8007b16:	468b      	mov	fp, r1
 8007b18:	e755      	b.n	80079c6 <_strtod_l+0x7ce>
 8007b1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b1c:	ea13 0f0a 	tst.w	r3, sl
 8007b20:	e7e9      	b.n	8007af6 <_strtod_l+0x8fe>
 8007b22:	f7ff fb4d 	bl	80071c0 <sulp>
 8007b26:	4602      	mov	r2, r0
 8007b28:	460b      	mov	r3, r1
 8007b2a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007b2e:	f7f8 fbcb 	bl	80002c8 <__aeabi_dsub>
 8007b32:	2200      	movs	r2, #0
 8007b34:	2300      	movs	r3, #0
 8007b36:	4682      	mov	sl, r0
 8007b38:	468b      	mov	fp, r1
 8007b3a:	f7f8 ffe5 	bl	8000b08 <__aeabi_dcmpeq>
 8007b3e:	2800      	cmp	r0, #0
 8007b40:	f47f ae11 	bne.w	8007766 <_strtod_l+0x56e>
 8007b44:	e73f      	b.n	80079c6 <_strtod_l+0x7ce>
 8007b46:	4641      	mov	r1, r8
 8007b48:	4620      	mov	r0, r4
 8007b4a:	f001 ff12 	bl	8009972 <__ratio>
 8007b4e:	ec57 6b10 	vmov	r6, r7, d0
 8007b52:	2200      	movs	r2, #0
 8007b54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007b58:	ee10 0a10 	vmov	r0, s0
 8007b5c:	4639      	mov	r1, r7
 8007b5e:	f7f8 ffe7 	bl	8000b30 <__aeabi_dcmple>
 8007b62:	2800      	cmp	r0, #0
 8007b64:	d077      	beq.n	8007c56 <_strtod_l+0xa5e>
 8007b66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d04a      	beq.n	8007c02 <_strtod_l+0xa0a>
 8007b6c:	4b68      	ldr	r3, [pc, #416]	; (8007d10 <_strtod_l+0xb18>)
 8007b6e:	2200      	movs	r2, #0
 8007b70:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007b74:	4f66      	ldr	r7, [pc, #408]	; (8007d10 <_strtod_l+0xb18>)
 8007b76:	2600      	movs	r6, #0
 8007b78:	4b62      	ldr	r3, [pc, #392]	; (8007d04 <_strtod_l+0xb0c>)
 8007b7a:	402b      	ands	r3, r5
 8007b7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b80:	4b64      	ldr	r3, [pc, #400]	; (8007d14 <_strtod_l+0xb1c>)
 8007b82:	429a      	cmp	r2, r3
 8007b84:	f040 80ce 	bne.w	8007d24 <_strtod_l+0xb2c>
 8007b88:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007b8c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007b90:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8007b94:	ec4b ab10 	vmov	d0, sl, fp
 8007b98:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007b9c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007ba0:	f001 fe22 	bl	80097e8 <__ulp>
 8007ba4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ba8:	ec53 2b10 	vmov	r2, r3, d0
 8007bac:	f7f8 fd44 	bl	8000638 <__aeabi_dmul>
 8007bb0:	4652      	mov	r2, sl
 8007bb2:	465b      	mov	r3, fp
 8007bb4:	f7f8 fb8a 	bl	80002cc <__adddf3>
 8007bb8:	460b      	mov	r3, r1
 8007bba:	4952      	ldr	r1, [pc, #328]	; (8007d04 <_strtod_l+0xb0c>)
 8007bbc:	4a56      	ldr	r2, [pc, #344]	; (8007d18 <_strtod_l+0xb20>)
 8007bbe:	4019      	ands	r1, r3
 8007bc0:	4291      	cmp	r1, r2
 8007bc2:	4682      	mov	sl, r0
 8007bc4:	d95b      	bls.n	8007c7e <_strtod_l+0xa86>
 8007bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bc8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d103      	bne.n	8007bd8 <_strtod_l+0x9e0>
 8007bd0:	9b08      	ldr	r3, [sp, #32]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	f43f ad2e 	beq.w	8007634 <_strtod_l+0x43c>
 8007bd8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8007d08 <_strtod_l+0xb10>
 8007bdc:	f04f 3aff 	mov.w	sl, #4294967295
 8007be0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007be2:	4648      	mov	r0, r9
 8007be4:	f001 fb68 	bl	80092b8 <_Bfree>
 8007be8:	9905      	ldr	r1, [sp, #20]
 8007bea:	4648      	mov	r0, r9
 8007bec:	f001 fb64 	bl	80092b8 <_Bfree>
 8007bf0:	4641      	mov	r1, r8
 8007bf2:	4648      	mov	r0, r9
 8007bf4:	f001 fb60 	bl	80092b8 <_Bfree>
 8007bf8:	4621      	mov	r1, r4
 8007bfa:	4648      	mov	r0, r9
 8007bfc:	f001 fb5c 	bl	80092b8 <_Bfree>
 8007c00:	e619      	b.n	8007836 <_strtod_l+0x63e>
 8007c02:	f1ba 0f00 	cmp.w	sl, #0
 8007c06:	d11a      	bne.n	8007c3e <_strtod_l+0xa46>
 8007c08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c0c:	b9eb      	cbnz	r3, 8007c4a <_strtod_l+0xa52>
 8007c0e:	2200      	movs	r2, #0
 8007c10:	4b3f      	ldr	r3, [pc, #252]	; (8007d10 <_strtod_l+0xb18>)
 8007c12:	4630      	mov	r0, r6
 8007c14:	4639      	mov	r1, r7
 8007c16:	f7f8 ff81 	bl	8000b1c <__aeabi_dcmplt>
 8007c1a:	b9c8      	cbnz	r0, 8007c50 <_strtod_l+0xa58>
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	4639      	mov	r1, r7
 8007c20:	2200      	movs	r2, #0
 8007c22:	4b3e      	ldr	r3, [pc, #248]	; (8007d1c <_strtod_l+0xb24>)
 8007c24:	f7f8 fd08 	bl	8000638 <__aeabi_dmul>
 8007c28:	4606      	mov	r6, r0
 8007c2a:	460f      	mov	r7, r1
 8007c2c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007c30:	9618      	str	r6, [sp, #96]	; 0x60
 8007c32:	9319      	str	r3, [sp, #100]	; 0x64
 8007c34:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8007c38:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007c3c:	e79c      	b.n	8007b78 <_strtod_l+0x980>
 8007c3e:	f1ba 0f01 	cmp.w	sl, #1
 8007c42:	d102      	bne.n	8007c4a <_strtod_l+0xa52>
 8007c44:	2d00      	cmp	r5, #0
 8007c46:	f43f ad8e 	beq.w	8007766 <_strtod_l+0x56e>
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	4b34      	ldr	r3, [pc, #208]	; (8007d20 <_strtod_l+0xb28>)
 8007c4e:	e78f      	b.n	8007b70 <_strtod_l+0x978>
 8007c50:	2600      	movs	r6, #0
 8007c52:	4f32      	ldr	r7, [pc, #200]	; (8007d1c <_strtod_l+0xb24>)
 8007c54:	e7ea      	b.n	8007c2c <_strtod_l+0xa34>
 8007c56:	4b31      	ldr	r3, [pc, #196]	; (8007d1c <_strtod_l+0xb24>)
 8007c58:	4630      	mov	r0, r6
 8007c5a:	4639      	mov	r1, r7
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f7f8 fceb 	bl	8000638 <__aeabi_dmul>
 8007c62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c64:	4606      	mov	r6, r0
 8007c66:	460f      	mov	r7, r1
 8007c68:	b933      	cbnz	r3, 8007c78 <_strtod_l+0xa80>
 8007c6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c6e:	9010      	str	r0, [sp, #64]	; 0x40
 8007c70:	9311      	str	r3, [sp, #68]	; 0x44
 8007c72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007c76:	e7df      	b.n	8007c38 <_strtod_l+0xa40>
 8007c78:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007c7c:	e7f9      	b.n	8007c72 <_strtod_l+0xa7a>
 8007c7e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007c82:	9b04      	ldr	r3, [sp, #16]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d1ab      	bne.n	8007be0 <_strtod_l+0x9e8>
 8007c88:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007c8c:	0d1b      	lsrs	r3, r3, #20
 8007c8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c90:	051b      	lsls	r3, r3, #20
 8007c92:	429a      	cmp	r2, r3
 8007c94:	465d      	mov	r5, fp
 8007c96:	d1a3      	bne.n	8007be0 <_strtod_l+0x9e8>
 8007c98:	4639      	mov	r1, r7
 8007c9a:	4630      	mov	r0, r6
 8007c9c:	f7f8 ff7c 	bl	8000b98 <__aeabi_d2iz>
 8007ca0:	f7f8 fc60 	bl	8000564 <__aeabi_i2d>
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	4639      	mov	r1, r7
 8007caa:	4630      	mov	r0, r6
 8007cac:	f7f8 fb0c 	bl	80002c8 <__aeabi_dsub>
 8007cb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cb2:	4606      	mov	r6, r0
 8007cb4:	460f      	mov	r7, r1
 8007cb6:	b933      	cbnz	r3, 8007cc6 <_strtod_l+0xace>
 8007cb8:	f1ba 0f00 	cmp.w	sl, #0
 8007cbc:	d103      	bne.n	8007cc6 <_strtod_l+0xace>
 8007cbe:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8007cc2:	2d00      	cmp	r5, #0
 8007cc4:	d06d      	beq.n	8007da2 <_strtod_l+0xbaa>
 8007cc6:	a30a      	add	r3, pc, #40	; (adr r3, 8007cf0 <_strtod_l+0xaf8>)
 8007cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ccc:	4630      	mov	r0, r6
 8007cce:	4639      	mov	r1, r7
 8007cd0:	f7f8 ff24 	bl	8000b1c <__aeabi_dcmplt>
 8007cd4:	2800      	cmp	r0, #0
 8007cd6:	f47f acb8 	bne.w	800764a <_strtod_l+0x452>
 8007cda:	a307      	add	r3, pc, #28	; (adr r3, 8007cf8 <_strtod_l+0xb00>)
 8007cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce0:	4630      	mov	r0, r6
 8007ce2:	4639      	mov	r1, r7
 8007ce4:	f7f8 ff38 	bl	8000b58 <__aeabi_dcmpgt>
 8007ce8:	2800      	cmp	r0, #0
 8007cea:	f43f af79 	beq.w	8007be0 <_strtod_l+0x9e8>
 8007cee:	e4ac      	b.n	800764a <_strtod_l+0x452>
 8007cf0:	94a03595 	.word	0x94a03595
 8007cf4:	3fdfffff 	.word	0x3fdfffff
 8007cf8:	35afe535 	.word	0x35afe535
 8007cfc:	3fe00000 	.word	0x3fe00000
 8007d00:	000fffff 	.word	0x000fffff
 8007d04:	7ff00000 	.word	0x7ff00000
 8007d08:	7fefffff 	.word	0x7fefffff
 8007d0c:	39500000 	.word	0x39500000
 8007d10:	3ff00000 	.word	0x3ff00000
 8007d14:	7fe00000 	.word	0x7fe00000
 8007d18:	7c9fffff 	.word	0x7c9fffff
 8007d1c:	3fe00000 	.word	0x3fe00000
 8007d20:	bff00000 	.word	0xbff00000
 8007d24:	9b04      	ldr	r3, [sp, #16]
 8007d26:	b333      	cbz	r3, 8007d76 <_strtod_l+0xb7e>
 8007d28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d2a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007d2e:	d822      	bhi.n	8007d76 <_strtod_l+0xb7e>
 8007d30:	a327      	add	r3, pc, #156	; (adr r3, 8007dd0 <_strtod_l+0xbd8>)
 8007d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d36:	4630      	mov	r0, r6
 8007d38:	4639      	mov	r1, r7
 8007d3a:	f7f8 fef9 	bl	8000b30 <__aeabi_dcmple>
 8007d3e:	b1a0      	cbz	r0, 8007d6a <_strtod_l+0xb72>
 8007d40:	4639      	mov	r1, r7
 8007d42:	4630      	mov	r0, r6
 8007d44:	f7f8 ff50 	bl	8000be8 <__aeabi_d2uiz>
 8007d48:	2800      	cmp	r0, #0
 8007d4a:	bf08      	it	eq
 8007d4c:	2001      	moveq	r0, #1
 8007d4e:	f7f8 fbf9 	bl	8000544 <__aeabi_ui2d>
 8007d52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d54:	4606      	mov	r6, r0
 8007d56:	460f      	mov	r7, r1
 8007d58:	bb03      	cbnz	r3, 8007d9c <_strtod_l+0xba4>
 8007d5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d5e:	9012      	str	r0, [sp, #72]	; 0x48
 8007d60:	9313      	str	r3, [sp, #76]	; 0x4c
 8007d62:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007d66:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007d6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007d6e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007d72:	1a9b      	subs	r3, r3, r2
 8007d74:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d76:	ed9d 0b08 	vldr	d0, [sp, #32]
 8007d7a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8007d7e:	f001 fd33 	bl	80097e8 <__ulp>
 8007d82:	4650      	mov	r0, sl
 8007d84:	ec53 2b10 	vmov	r2, r3, d0
 8007d88:	4659      	mov	r1, fp
 8007d8a:	f7f8 fc55 	bl	8000638 <__aeabi_dmul>
 8007d8e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007d92:	f7f8 fa9b 	bl	80002cc <__adddf3>
 8007d96:	4682      	mov	sl, r0
 8007d98:	468b      	mov	fp, r1
 8007d9a:	e772      	b.n	8007c82 <_strtod_l+0xa8a>
 8007d9c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8007da0:	e7df      	b.n	8007d62 <_strtod_l+0xb6a>
 8007da2:	a30d      	add	r3, pc, #52	; (adr r3, 8007dd8 <_strtod_l+0xbe0>)
 8007da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da8:	f7f8 feb8 	bl	8000b1c <__aeabi_dcmplt>
 8007dac:	e79c      	b.n	8007ce8 <_strtod_l+0xaf0>
 8007dae:	2300      	movs	r3, #0
 8007db0:	930d      	str	r3, [sp, #52]	; 0x34
 8007db2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007db4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007db6:	6013      	str	r3, [r2, #0]
 8007db8:	f7ff ba61 	b.w	800727e <_strtod_l+0x86>
 8007dbc:	2b65      	cmp	r3, #101	; 0x65
 8007dbe:	f04f 0200 	mov.w	r2, #0
 8007dc2:	f43f ab4e 	beq.w	8007462 <_strtod_l+0x26a>
 8007dc6:	2101      	movs	r1, #1
 8007dc8:	4614      	mov	r4, r2
 8007dca:	9104      	str	r1, [sp, #16]
 8007dcc:	f7ff bacb 	b.w	8007366 <_strtod_l+0x16e>
 8007dd0:	ffc00000 	.word	0xffc00000
 8007dd4:	41dfffff 	.word	0x41dfffff
 8007dd8:	94a03595 	.word	0x94a03595
 8007ddc:	3fcfffff 	.word	0x3fcfffff

08007de0 <_strtod_r>:
 8007de0:	4b05      	ldr	r3, [pc, #20]	; (8007df8 <_strtod_r+0x18>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	b410      	push	{r4}
 8007de6:	6a1b      	ldr	r3, [r3, #32]
 8007de8:	4c04      	ldr	r4, [pc, #16]	; (8007dfc <_strtod_r+0x1c>)
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	bf08      	it	eq
 8007dee:	4623      	moveq	r3, r4
 8007df0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007df4:	f7ff ba00 	b.w	80071f8 <_strtod_l>
 8007df8:	20000048 	.word	0x20000048
 8007dfc:	200000ac 	.word	0x200000ac

08007e00 <_strtol_l.isra.0>:
 8007e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e04:	4680      	mov	r8, r0
 8007e06:	4689      	mov	r9, r1
 8007e08:	4692      	mov	sl, r2
 8007e0a:	461e      	mov	r6, r3
 8007e0c:	460f      	mov	r7, r1
 8007e0e:	463d      	mov	r5, r7
 8007e10:	9808      	ldr	r0, [sp, #32]
 8007e12:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e16:	f001 f9ed 	bl	80091f4 <__locale_ctype_ptr_l>
 8007e1a:	4420      	add	r0, r4
 8007e1c:	7843      	ldrb	r3, [r0, #1]
 8007e1e:	f013 0308 	ands.w	r3, r3, #8
 8007e22:	d132      	bne.n	8007e8a <_strtol_l.isra.0+0x8a>
 8007e24:	2c2d      	cmp	r4, #45	; 0x2d
 8007e26:	d132      	bne.n	8007e8e <_strtol_l.isra.0+0x8e>
 8007e28:	787c      	ldrb	r4, [r7, #1]
 8007e2a:	1cbd      	adds	r5, r7, #2
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	2e00      	cmp	r6, #0
 8007e30:	d05d      	beq.n	8007eee <_strtol_l.isra.0+0xee>
 8007e32:	2e10      	cmp	r6, #16
 8007e34:	d109      	bne.n	8007e4a <_strtol_l.isra.0+0x4a>
 8007e36:	2c30      	cmp	r4, #48	; 0x30
 8007e38:	d107      	bne.n	8007e4a <_strtol_l.isra.0+0x4a>
 8007e3a:	782b      	ldrb	r3, [r5, #0]
 8007e3c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007e40:	2b58      	cmp	r3, #88	; 0x58
 8007e42:	d14f      	bne.n	8007ee4 <_strtol_l.isra.0+0xe4>
 8007e44:	786c      	ldrb	r4, [r5, #1]
 8007e46:	2610      	movs	r6, #16
 8007e48:	3502      	adds	r5, #2
 8007e4a:	2a00      	cmp	r2, #0
 8007e4c:	bf14      	ite	ne
 8007e4e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007e52:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007e56:	2700      	movs	r7, #0
 8007e58:	fbb1 fcf6 	udiv	ip, r1, r6
 8007e5c:	4638      	mov	r0, r7
 8007e5e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8007e62:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007e66:	2b09      	cmp	r3, #9
 8007e68:	d817      	bhi.n	8007e9a <_strtol_l.isra.0+0x9a>
 8007e6a:	461c      	mov	r4, r3
 8007e6c:	42a6      	cmp	r6, r4
 8007e6e:	dd23      	ble.n	8007eb8 <_strtol_l.isra.0+0xb8>
 8007e70:	1c7b      	adds	r3, r7, #1
 8007e72:	d007      	beq.n	8007e84 <_strtol_l.isra.0+0x84>
 8007e74:	4584      	cmp	ip, r0
 8007e76:	d31c      	bcc.n	8007eb2 <_strtol_l.isra.0+0xb2>
 8007e78:	d101      	bne.n	8007e7e <_strtol_l.isra.0+0x7e>
 8007e7a:	45a6      	cmp	lr, r4
 8007e7c:	db19      	blt.n	8007eb2 <_strtol_l.isra.0+0xb2>
 8007e7e:	fb00 4006 	mla	r0, r0, r6, r4
 8007e82:	2701      	movs	r7, #1
 8007e84:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e88:	e7eb      	b.n	8007e62 <_strtol_l.isra.0+0x62>
 8007e8a:	462f      	mov	r7, r5
 8007e8c:	e7bf      	b.n	8007e0e <_strtol_l.isra.0+0xe>
 8007e8e:	2c2b      	cmp	r4, #43	; 0x2b
 8007e90:	bf04      	itt	eq
 8007e92:	1cbd      	addeq	r5, r7, #2
 8007e94:	787c      	ldrbeq	r4, [r7, #1]
 8007e96:	461a      	mov	r2, r3
 8007e98:	e7c9      	b.n	8007e2e <_strtol_l.isra.0+0x2e>
 8007e9a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007e9e:	2b19      	cmp	r3, #25
 8007ea0:	d801      	bhi.n	8007ea6 <_strtol_l.isra.0+0xa6>
 8007ea2:	3c37      	subs	r4, #55	; 0x37
 8007ea4:	e7e2      	b.n	8007e6c <_strtol_l.isra.0+0x6c>
 8007ea6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007eaa:	2b19      	cmp	r3, #25
 8007eac:	d804      	bhi.n	8007eb8 <_strtol_l.isra.0+0xb8>
 8007eae:	3c57      	subs	r4, #87	; 0x57
 8007eb0:	e7dc      	b.n	8007e6c <_strtol_l.isra.0+0x6c>
 8007eb2:	f04f 37ff 	mov.w	r7, #4294967295
 8007eb6:	e7e5      	b.n	8007e84 <_strtol_l.isra.0+0x84>
 8007eb8:	1c7b      	adds	r3, r7, #1
 8007eba:	d108      	bne.n	8007ece <_strtol_l.isra.0+0xce>
 8007ebc:	2322      	movs	r3, #34	; 0x22
 8007ebe:	f8c8 3000 	str.w	r3, [r8]
 8007ec2:	4608      	mov	r0, r1
 8007ec4:	f1ba 0f00 	cmp.w	sl, #0
 8007ec8:	d107      	bne.n	8007eda <_strtol_l.isra.0+0xda>
 8007eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ece:	b102      	cbz	r2, 8007ed2 <_strtol_l.isra.0+0xd2>
 8007ed0:	4240      	negs	r0, r0
 8007ed2:	f1ba 0f00 	cmp.w	sl, #0
 8007ed6:	d0f8      	beq.n	8007eca <_strtol_l.isra.0+0xca>
 8007ed8:	b10f      	cbz	r7, 8007ede <_strtol_l.isra.0+0xde>
 8007eda:	f105 39ff 	add.w	r9, r5, #4294967295
 8007ede:	f8ca 9000 	str.w	r9, [sl]
 8007ee2:	e7f2      	b.n	8007eca <_strtol_l.isra.0+0xca>
 8007ee4:	2430      	movs	r4, #48	; 0x30
 8007ee6:	2e00      	cmp	r6, #0
 8007ee8:	d1af      	bne.n	8007e4a <_strtol_l.isra.0+0x4a>
 8007eea:	2608      	movs	r6, #8
 8007eec:	e7ad      	b.n	8007e4a <_strtol_l.isra.0+0x4a>
 8007eee:	2c30      	cmp	r4, #48	; 0x30
 8007ef0:	d0a3      	beq.n	8007e3a <_strtol_l.isra.0+0x3a>
 8007ef2:	260a      	movs	r6, #10
 8007ef4:	e7a9      	b.n	8007e4a <_strtol_l.isra.0+0x4a>
	...

08007ef8 <_strtol_r>:
 8007ef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007efa:	4c06      	ldr	r4, [pc, #24]	; (8007f14 <_strtol_r+0x1c>)
 8007efc:	4d06      	ldr	r5, [pc, #24]	; (8007f18 <_strtol_r+0x20>)
 8007efe:	6824      	ldr	r4, [r4, #0]
 8007f00:	6a24      	ldr	r4, [r4, #32]
 8007f02:	2c00      	cmp	r4, #0
 8007f04:	bf08      	it	eq
 8007f06:	462c      	moveq	r4, r5
 8007f08:	9400      	str	r4, [sp, #0]
 8007f0a:	f7ff ff79 	bl	8007e00 <_strtol_l.isra.0>
 8007f0e:	b003      	add	sp, #12
 8007f10:	bd30      	pop	{r4, r5, pc}
 8007f12:	bf00      	nop
 8007f14:	20000048 	.word	0x20000048
 8007f18:	200000ac 	.word	0x200000ac

08007f1c <quorem>:
 8007f1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f20:	6903      	ldr	r3, [r0, #16]
 8007f22:	690c      	ldr	r4, [r1, #16]
 8007f24:	42a3      	cmp	r3, r4
 8007f26:	4680      	mov	r8, r0
 8007f28:	f2c0 8082 	blt.w	8008030 <quorem+0x114>
 8007f2c:	3c01      	subs	r4, #1
 8007f2e:	f101 0714 	add.w	r7, r1, #20
 8007f32:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007f36:	f100 0614 	add.w	r6, r0, #20
 8007f3a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007f3e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007f42:	eb06 030c 	add.w	r3, r6, ip
 8007f46:	3501      	adds	r5, #1
 8007f48:	eb07 090c 	add.w	r9, r7, ip
 8007f4c:	9301      	str	r3, [sp, #4]
 8007f4e:	fbb0 f5f5 	udiv	r5, r0, r5
 8007f52:	b395      	cbz	r5, 8007fba <quorem+0x9e>
 8007f54:	f04f 0a00 	mov.w	sl, #0
 8007f58:	4638      	mov	r0, r7
 8007f5a:	46b6      	mov	lr, r6
 8007f5c:	46d3      	mov	fp, sl
 8007f5e:	f850 2b04 	ldr.w	r2, [r0], #4
 8007f62:	b293      	uxth	r3, r2
 8007f64:	fb05 a303 	mla	r3, r5, r3, sl
 8007f68:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	ebab 0303 	sub.w	r3, fp, r3
 8007f72:	0c12      	lsrs	r2, r2, #16
 8007f74:	f8de b000 	ldr.w	fp, [lr]
 8007f78:	fb05 a202 	mla	r2, r5, r2, sl
 8007f7c:	fa13 f38b 	uxtah	r3, r3, fp
 8007f80:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007f84:	fa1f fb82 	uxth.w	fp, r2
 8007f88:	f8de 2000 	ldr.w	r2, [lr]
 8007f8c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007f90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f9a:	4581      	cmp	r9, r0
 8007f9c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007fa0:	f84e 3b04 	str.w	r3, [lr], #4
 8007fa4:	d2db      	bcs.n	8007f5e <quorem+0x42>
 8007fa6:	f856 300c 	ldr.w	r3, [r6, ip]
 8007faa:	b933      	cbnz	r3, 8007fba <quorem+0x9e>
 8007fac:	9b01      	ldr	r3, [sp, #4]
 8007fae:	3b04      	subs	r3, #4
 8007fb0:	429e      	cmp	r6, r3
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	d330      	bcc.n	8008018 <quorem+0xfc>
 8007fb6:	f8c8 4010 	str.w	r4, [r8, #16]
 8007fba:	4640      	mov	r0, r8
 8007fbc:	f001 fb9c 	bl	80096f8 <__mcmp>
 8007fc0:	2800      	cmp	r0, #0
 8007fc2:	db25      	blt.n	8008010 <quorem+0xf4>
 8007fc4:	3501      	adds	r5, #1
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	f04f 0c00 	mov.w	ip, #0
 8007fcc:	f857 2b04 	ldr.w	r2, [r7], #4
 8007fd0:	f8d0 e000 	ldr.w	lr, [r0]
 8007fd4:	b293      	uxth	r3, r2
 8007fd6:	ebac 0303 	sub.w	r3, ip, r3
 8007fda:	0c12      	lsrs	r2, r2, #16
 8007fdc:	fa13 f38e 	uxtah	r3, r3, lr
 8007fe0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007fe4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007fee:	45b9      	cmp	r9, r7
 8007ff0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007ff4:	f840 3b04 	str.w	r3, [r0], #4
 8007ff8:	d2e8      	bcs.n	8007fcc <quorem+0xb0>
 8007ffa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007ffe:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008002:	b92a      	cbnz	r2, 8008010 <quorem+0xf4>
 8008004:	3b04      	subs	r3, #4
 8008006:	429e      	cmp	r6, r3
 8008008:	461a      	mov	r2, r3
 800800a:	d30b      	bcc.n	8008024 <quorem+0x108>
 800800c:	f8c8 4010 	str.w	r4, [r8, #16]
 8008010:	4628      	mov	r0, r5
 8008012:	b003      	add	sp, #12
 8008014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008018:	6812      	ldr	r2, [r2, #0]
 800801a:	3b04      	subs	r3, #4
 800801c:	2a00      	cmp	r2, #0
 800801e:	d1ca      	bne.n	8007fb6 <quorem+0x9a>
 8008020:	3c01      	subs	r4, #1
 8008022:	e7c5      	b.n	8007fb0 <quorem+0x94>
 8008024:	6812      	ldr	r2, [r2, #0]
 8008026:	3b04      	subs	r3, #4
 8008028:	2a00      	cmp	r2, #0
 800802a:	d1ef      	bne.n	800800c <quorem+0xf0>
 800802c:	3c01      	subs	r4, #1
 800802e:	e7ea      	b.n	8008006 <quorem+0xea>
 8008030:	2000      	movs	r0, #0
 8008032:	e7ee      	b.n	8008012 <quorem+0xf6>
 8008034:	0000      	movs	r0, r0
	...

08008038 <_dtoa_r>:
 8008038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800803c:	ec57 6b10 	vmov	r6, r7, d0
 8008040:	b097      	sub	sp, #92	; 0x5c
 8008042:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008044:	9106      	str	r1, [sp, #24]
 8008046:	4604      	mov	r4, r0
 8008048:	920b      	str	r2, [sp, #44]	; 0x2c
 800804a:	9312      	str	r3, [sp, #72]	; 0x48
 800804c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008050:	e9cd 6700 	strd	r6, r7, [sp]
 8008054:	b93d      	cbnz	r5, 8008066 <_dtoa_r+0x2e>
 8008056:	2010      	movs	r0, #16
 8008058:	f001 f8e0 	bl	800921c <malloc>
 800805c:	6260      	str	r0, [r4, #36]	; 0x24
 800805e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008062:	6005      	str	r5, [r0, #0]
 8008064:	60c5      	str	r5, [r0, #12]
 8008066:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008068:	6819      	ldr	r1, [r3, #0]
 800806a:	b151      	cbz	r1, 8008082 <_dtoa_r+0x4a>
 800806c:	685a      	ldr	r2, [r3, #4]
 800806e:	604a      	str	r2, [r1, #4]
 8008070:	2301      	movs	r3, #1
 8008072:	4093      	lsls	r3, r2
 8008074:	608b      	str	r3, [r1, #8]
 8008076:	4620      	mov	r0, r4
 8008078:	f001 f91e 	bl	80092b8 <_Bfree>
 800807c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800807e:	2200      	movs	r2, #0
 8008080:	601a      	str	r2, [r3, #0]
 8008082:	1e3b      	subs	r3, r7, #0
 8008084:	bfbb      	ittet	lt
 8008086:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800808a:	9301      	strlt	r3, [sp, #4]
 800808c:	2300      	movge	r3, #0
 800808e:	2201      	movlt	r2, #1
 8008090:	bfac      	ite	ge
 8008092:	f8c8 3000 	strge.w	r3, [r8]
 8008096:	f8c8 2000 	strlt.w	r2, [r8]
 800809a:	4baf      	ldr	r3, [pc, #700]	; (8008358 <_dtoa_r+0x320>)
 800809c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80080a0:	ea33 0308 	bics.w	r3, r3, r8
 80080a4:	d114      	bne.n	80080d0 <_dtoa_r+0x98>
 80080a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80080a8:	f242 730f 	movw	r3, #9999	; 0x270f
 80080ac:	6013      	str	r3, [r2, #0]
 80080ae:	9b00      	ldr	r3, [sp, #0]
 80080b0:	b923      	cbnz	r3, 80080bc <_dtoa_r+0x84>
 80080b2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80080b6:	2800      	cmp	r0, #0
 80080b8:	f000 8542 	beq.w	8008b40 <_dtoa_r+0xb08>
 80080bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080be:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800836c <_dtoa_r+0x334>
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	f000 8544 	beq.w	8008b50 <_dtoa_r+0xb18>
 80080c8:	f10b 0303 	add.w	r3, fp, #3
 80080cc:	f000 bd3e 	b.w	8008b4c <_dtoa_r+0xb14>
 80080d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80080d4:	2200      	movs	r2, #0
 80080d6:	2300      	movs	r3, #0
 80080d8:	4630      	mov	r0, r6
 80080da:	4639      	mov	r1, r7
 80080dc:	f7f8 fd14 	bl	8000b08 <__aeabi_dcmpeq>
 80080e0:	4681      	mov	r9, r0
 80080e2:	b168      	cbz	r0, 8008100 <_dtoa_r+0xc8>
 80080e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80080e6:	2301      	movs	r3, #1
 80080e8:	6013      	str	r3, [r2, #0]
 80080ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f000 8524 	beq.w	8008b3a <_dtoa_r+0xb02>
 80080f2:	4b9a      	ldr	r3, [pc, #616]	; (800835c <_dtoa_r+0x324>)
 80080f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80080f6:	f103 3bff 	add.w	fp, r3, #4294967295
 80080fa:	6013      	str	r3, [r2, #0]
 80080fc:	f000 bd28 	b.w	8008b50 <_dtoa_r+0xb18>
 8008100:	aa14      	add	r2, sp, #80	; 0x50
 8008102:	a915      	add	r1, sp, #84	; 0x54
 8008104:	ec47 6b10 	vmov	d0, r6, r7
 8008108:	4620      	mov	r0, r4
 800810a:	f001 fbe3 	bl	80098d4 <__d2b>
 800810e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008112:	9004      	str	r0, [sp, #16]
 8008114:	2d00      	cmp	r5, #0
 8008116:	d07c      	beq.n	8008212 <_dtoa_r+0x1da>
 8008118:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800811c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008120:	46b2      	mov	sl, r6
 8008122:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008126:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800812a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800812e:	2200      	movs	r2, #0
 8008130:	4b8b      	ldr	r3, [pc, #556]	; (8008360 <_dtoa_r+0x328>)
 8008132:	4650      	mov	r0, sl
 8008134:	4659      	mov	r1, fp
 8008136:	f7f8 f8c7 	bl	80002c8 <__aeabi_dsub>
 800813a:	a381      	add	r3, pc, #516	; (adr r3, 8008340 <_dtoa_r+0x308>)
 800813c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008140:	f7f8 fa7a 	bl	8000638 <__aeabi_dmul>
 8008144:	a380      	add	r3, pc, #512	; (adr r3, 8008348 <_dtoa_r+0x310>)
 8008146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814a:	f7f8 f8bf 	bl	80002cc <__adddf3>
 800814e:	4606      	mov	r6, r0
 8008150:	4628      	mov	r0, r5
 8008152:	460f      	mov	r7, r1
 8008154:	f7f8 fa06 	bl	8000564 <__aeabi_i2d>
 8008158:	a37d      	add	r3, pc, #500	; (adr r3, 8008350 <_dtoa_r+0x318>)
 800815a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800815e:	f7f8 fa6b 	bl	8000638 <__aeabi_dmul>
 8008162:	4602      	mov	r2, r0
 8008164:	460b      	mov	r3, r1
 8008166:	4630      	mov	r0, r6
 8008168:	4639      	mov	r1, r7
 800816a:	f7f8 f8af 	bl	80002cc <__adddf3>
 800816e:	4606      	mov	r6, r0
 8008170:	460f      	mov	r7, r1
 8008172:	f7f8 fd11 	bl	8000b98 <__aeabi_d2iz>
 8008176:	2200      	movs	r2, #0
 8008178:	4682      	mov	sl, r0
 800817a:	2300      	movs	r3, #0
 800817c:	4630      	mov	r0, r6
 800817e:	4639      	mov	r1, r7
 8008180:	f7f8 fccc 	bl	8000b1c <__aeabi_dcmplt>
 8008184:	b148      	cbz	r0, 800819a <_dtoa_r+0x162>
 8008186:	4650      	mov	r0, sl
 8008188:	f7f8 f9ec 	bl	8000564 <__aeabi_i2d>
 800818c:	4632      	mov	r2, r6
 800818e:	463b      	mov	r3, r7
 8008190:	f7f8 fcba 	bl	8000b08 <__aeabi_dcmpeq>
 8008194:	b908      	cbnz	r0, 800819a <_dtoa_r+0x162>
 8008196:	f10a 3aff 	add.w	sl, sl, #4294967295
 800819a:	f1ba 0f16 	cmp.w	sl, #22
 800819e:	d859      	bhi.n	8008254 <_dtoa_r+0x21c>
 80081a0:	4970      	ldr	r1, [pc, #448]	; (8008364 <_dtoa_r+0x32c>)
 80081a2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80081a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081ae:	f7f8 fcd3 	bl	8000b58 <__aeabi_dcmpgt>
 80081b2:	2800      	cmp	r0, #0
 80081b4:	d050      	beq.n	8008258 <_dtoa_r+0x220>
 80081b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80081ba:	2300      	movs	r3, #0
 80081bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80081be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80081c0:	1b5d      	subs	r5, r3, r5
 80081c2:	f1b5 0801 	subs.w	r8, r5, #1
 80081c6:	bf49      	itett	mi
 80081c8:	f1c5 0301 	rsbmi	r3, r5, #1
 80081cc:	2300      	movpl	r3, #0
 80081ce:	9305      	strmi	r3, [sp, #20]
 80081d0:	f04f 0800 	movmi.w	r8, #0
 80081d4:	bf58      	it	pl
 80081d6:	9305      	strpl	r3, [sp, #20]
 80081d8:	f1ba 0f00 	cmp.w	sl, #0
 80081dc:	db3e      	blt.n	800825c <_dtoa_r+0x224>
 80081de:	2300      	movs	r3, #0
 80081e0:	44d0      	add	r8, sl
 80081e2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80081e6:	9307      	str	r3, [sp, #28]
 80081e8:	9b06      	ldr	r3, [sp, #24]
 80081ea:	2b09      	cmp	r3, #9
 80081ec:	f200 8090 	bhi.w	8008310 <_dtoa_r+0x2d8>
 80081f0:	2b05      	cmp	r3, #5
 80081f2:	bfc4      	itt	gt
 80081f4:	3b04      	subgt	r3, #4
 80081f6:	9306      	strgt	r3, [sp, #24]
 80081f8:	9b06      	ldr	r3, [sp, #24]
 80081fa:	f1a3 0302 	sub.w	r3, r3, #2
 80081fe:	bfcc      	ite	gt
 8008200:	2500      	movgt	r5, #0
 8008202:	2501      	movle	r5, #1
 8008204:	2b03      	cmp	r3, #3
 8008206:	f200 808f 	bhi.w	8008328 <_dtoa_r+0x2f0>
 800820a:	e8df f003 	tbb	[pc, r3]
 800820e:	7f7d      	.short	0x7f7d
 8008210:	7131      	.short	0x7131
 8008212:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008216:	441d      	add	r5, r3
 8008218:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800821c:	2820      	cmp	r0, #32
 800821e:	dd13      	ble.n	8008248 <_dtoa_r+0x210>
 8008220:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008224:	9b00      	ldr	r3, [sp, #0]
 8008226:	fa08 f800 	lsl.w	r8, r8, r0
 800822a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800822e:	fa23 f000 	lsr.w	r0, r3, r0
 8008232:	ea48 0000 	orr.w	r0, r8, r0
 8008236:	f7f8 f985 	bl	8000544 <__aeabi_ui2d>
 800823a:	2301      	movs	r3, #1
 800823c:	4682      	mov	sl, r0
 800823e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008242:	3d01      	subs	r5, #1
 8008244:	9313      	str	r3, [sp, #76]	; 0x4c
 8008246:	e772      	b.n	800812e <_dtoa_r+0xf6>
 8008248:	9b00      	ldr	r3, [sp, #0]
 800824a:	f1c0 0020 	rsb	r0, r0, #32
 800824e:	fa03 f000 	lsl.w	r0, r3, r0
 8008252:	e7f0      	b.n	8008236 <_dtoa_r+0x1fe>
 8008254:	2301      	movs	r3, #1
 8008256:	e7b1      	b.n	80081bc <_dtoa_r+0x184>
 8008258:	900f      	str	r0, [sp, #60]	; 0x3c
 800825a:	e7b0      	b.n	80081be <_dtoa_r+0x186>
 800825c:	9b05      	ldr	r3, [sp, #20]
 800825e:	eba3 030a 	sub.w	r3, r3, sl
 8008262:	9305      	str	r3, [sp, #20]
 8008264:	f1ca 0300 	rsb	r3, sl, #0
 8008268:	9307      	str	r3, [sp, #28]
 800826a:	2300      	movs	r3, #0
 800826c:	930e      	str	r3, [sp, #56]	; 0x38
 800826e:	e7bb      	b.n	80081e8 <_dtoa_r+0x1b0>
 8008270:	2301      	movs	r3, #1
 8008272:	930a      	str	r3, [sp, #40]	; 0x28
 8008274:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008276:	2b00      	cmp	r3, #0
 8008278:	dd59      	ble.n	800832e <_dtoa_r+0x2f6>
 800827a:	9302      	str	r3, [sp, #8]
 800827c:	4699      	mov	r9, r3
 800827e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008280:	2200      	movs	r2, #0
 8008282:	6072      	str	r2, [r6, #4]
 8008284:	2204      	movs	r2, #4
 8008286:	f102 0014 	add.w	r0, r2, #20
 800828a:	4298      	cmp	r0, r3
 800828c:	6871      	ldr	r1, [r6, #4]
 800828e:	d953      	bls.n	8008338 <_dtoa_r+0x300>
 8008290:	4620      	mov	r0, r4
 8008292:	f000 ffdd 	bl	8009250 <_Balloc>
 8008296:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008298:	6030      	str	r0, [r6, #0]
 800829a:	f1b9 0f0e 	cmp.w	r9, #14
 800829e:	f8d3 b000 	ldr.w	fp, [r3]
 80082a2:	f200 80e6 	bhi.w	8008472 <_dtoa_r+0x43a>
 80082a6:	2d00      	cmp	r5, #0
 80082a8:	f000 80e3 	beq.w	8008472 <_dtoa_r+0x43a>
 80082ac:	ed9d 7b00 	vldr	d7, [sp]
 80082b0:	f1ba 0f00 	cmp.w	sl, #0
 80082b4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80082b8:	dd74      	ble.n	80083a4 <_dtoa_r+0x36c>
 80082ba:	4a2a      	ldr	r2, [pc, #168]	; (8008364 <_dtoa_r+0x32c>)
 80082bc:	f00a 030f 	and.w	r3, sl, #15
 80082c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80082c4:	ed93 7b00 	vldr	d7, [r3]
 80082c8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80082cc:	06f0      	lsls	r0, r6, #27
 80082ce:	ed8d 7b08 	vstr	d7, [sp, #32]
 80082d2:	d565      	bpl.n	80083a0 <_dtoa_r+0x368>
 80082d4:	4b24      	ldr	r3, [pc, #144]	; (8008368 <_dtoa_r+0x330>)
 80082d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80082da:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80082de:	f7f8 fad5 	bl	800088c <__aeabi_ddiv>
 80082e2:	e9cd 0100 	strd	r0, r1, [sp]
 80082e6:	f006 060f 	and.w	r6, r6, #15
 80082ea:	2503      	movs	r5, #3
 80082ec:	4f1e      	ldr	r7, [pc, #120]	; (8008368 <_dtoa_r+0x330>)
 80082ee:	e04c      	b.n	800838a <_dtoa_r+0x352>
 80082f0:	2301      	movs	r3, #1
 80082f2:	930a      	str	r3, [sp, #40]	; 0x28
 80082f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082f6:	4453      	add	r3, sl
 80082f8:	f103 0901 	add.w	r9, r3, #1
 80082fc:	9302      	str	r3, [sp, #8]
 80082fe:	464b      	mov	r3, r9
 8008300:	2b01      	cmp	r3, #1
 8008302:	bfb8      	it	lt
 8008304:	2301      	movlt	r3, #1
 8008306:	e7ba      	b.n	800827e <_dtoa_r+0x246>
 8008308:	2300      	movs	r3, #0
 800830a:	e7b2      	b.n	8008272 <_dtoa_r+0x23a>
 800830c:	2300      	movs	r3, #0
 800830e:	e7f0      	b.n	80082f2 <_dtoa_r+0x2ba>
 8008310:	2501      	movs	r5, #1
 8008312:	2300      	movs	r3, #0
 8008314:	9306      	str	r3, [sp, #24]
 8008316:	950a      	str	r5, [sp, #40]	; 0x28
 8008318:	f04f 33ff 	mov.w	r3, #4294967295
 800831c:	9302      	str	r3, [sp, #8]
 800831e:	4699      	mov	r9, r3
 8008320:	2200      	movs	r2, #0
 8008322:	2312      	movs	r3, #18
 8008324:	920b      	str	r2, [sp, #44]	; 0x2c
 8008326:	e7aa      	b.n	800827e <_dtoa_r+0x246>
 8008328:	2301      	movs	r3, #1
 800832a:	930a      	str	r3, [sp, #40]	; 0x28
 800832c:	e7f4      	b.n	8008318 <_dtoa_r+0x2e0>
 800832e:	2301      	movs	r3, #1
 8008330:	9302      	str	r3, [sp, #8]
 8008332:	4699      	mov	r9, r3
 8008334:	461a      	mov	r2, r3
 8008336:	e7f5      	b.n	8008324 <_dtoa_r+0x2ec>
 8008338:	3101      	adds	r1, #1
 800833a:	6071      	str	r1, [r6, #4]
 800833c:	0052      	lsls	r2, r2, #1
 800833e:	e7a2      	b.n	8008286 <_dtoa_r+0x24e>
 8008340:	636f4361 	.word	0x636f4361
 8008344:	3fd287a7 	.word	0x3fd287a7
 8008348:	8b60c8b3 	.word	0x8b60c8b3
 800834c:	3fc68a28 	.word	0x3fc68a28
 8008350:	509f79fb 	.word	0x509f79fb
 8008354:	3fd34413 	.word	0x3fd34413
 8008358:	7ff00000 	.word	0x7ff00000
 800835c:	0800a721 	.word	0x0800a721
 8008360:	3ff80000 	.word	0x3ff80000
 8008364:	0800a7e0 	.word	0x0800a7e0
 8008368:	0800a7b8 	.word	0x0800a7b8
 800836c:	0800a7a9 	.word	0x0800a7a9
 8008370:	07f1      	lsls	r1, r6, #31
 8008372:	d508      	bpl.n	8008386 <_dtoa_r+0x34e>
 8008374:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008378:	e9d7 2300 	ldrd	r2, r3, [r7]
 800837c:	f7f8 f95c 	bl	8000638 <__aeabi_dmul>
 8008380:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008384:	3501      	adds	r5, #1
 8008386:	1076      	asrs	r6, r6, #1
 8008388:	3708      	adds	r7, #8
 800838a:	2e00      	cmp	r6, #0
 800838c:	d1f0      	bne.n	8008370 <_dtoa_r+0x338>
 800838e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008392:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008396:	f7f8 fa79 	bl	800088c <__aeabi_ddiv>
 800839a:	e9cd 0100 	strd	r0, r1, [sp]
 800839e:	e01a      	b.n	80083d6 <_dtoa_r+0x39e>
 80083a0:	2502      	movs	r5, #2
 80083a2:	e7a3      	b.n	80082ec <_dtoa_r+0x2b4>
 80083a4:	f000 80a0 	beq.w	80084e8 <_dtoa_r+0x4b0>
 80083a8:	f1ca 0600 	rsb	r6, sl, #0
 80083ac:	4b9f      	ldr	r3, [pc, #636]	; (800862c <_dtoa_r+0x5f4>)
 80083ae:	4fa0      	ldr	r7, [pc, #640]	; (8008630 <_dtoa_r+0x5f8>)
 80083b0:	f006 020f 	and.w	r2, r6, #15
 80083b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80083c0:	f7f8 f93a 	bl	8000638 <__aeabi_dmul>
 80083c4:	e9cd 0100 	strd	r0, r1, [sp]
 80083c8:	1136      	asrs	r6, r6, #4
 80083ca:	2300      	movs	r3, #0
 80083cc:	2502      	movs	r5, #2
 80083ce:	2e00      	cmp	r6, #0
 80083d0:	d17f      	bne.n	80084d2 <_dtoa_r+0x49a>
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d1e1      	bne.n	800839a <_dtoa_r+0x362>
 80083d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083d8:	2b00      	cmp	r3, #0
 80083da:	f000 8087 	beq.w	80084ec <_dtoa_r+0x4b4>
 80083de:	e9dd 6700 	ldrd	r6, r7, [sp]
 80083e2:	2200      	movs	r2, #0
 80083e4:	4b93      	ldr	r3, [pc, #588]	; (8008634 <_dtoa_r+0x5fc>)
 80083e6:	4630      	mov	r0, r6
 80083e8:	4639      	mov	r1, r7
 80083ea:	f7f8 fb97 	bl	8000b1c <__aeabi_dcmplt>
 80083ee:	2800      	cmp	r0, #0
 80083f0:	d07c      	beq.n	80084ec <_dtoa_r+0x4b4>
 80083f2:	f1b9 0f00 	cmp.w	r9, #0
 80083f6:	d079      	beq.n	80084ec <_dtoa_r+0x4b4>
 80083f8:	9b02      	ldr	r3, [sp, #8]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	dd35      	ble.n	800846a <_dtoa_r+0x432>
 80083fe:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008402:	9308      	str	r3, [sp, #32]
 8008404:	4639      	mov	r1, r7
 8008406:	2200      	movs	r2, #0
 8008408:	4b8b      	ldr	r3, [pc, #556]	; (8008638 <_dtoa_r+0x600>)
 800840a:	4630      	mov	r0, r6
 800840c:	f7f8 f914 	bl	8000638 <__aeabi_dmul>
 8008410:	e9cd 0100 	strd	r0, r1, [sp]
 8008414:	9f02      	ldr	r7, [sp, #8]
 8008416:	3501      	adds	r5, #1
 8008418:	4628      	mov	r0, r5
 800841a:	f7f8 f8a3 	bl	8000564 <__aeabi_i2d>
 800841e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008422:	f7f8 f909 	bl	8000638 <__aeabi_dmul>
 8008426:	2200      	movs	r2, #0
 8008428:	4b84      	ldr	r3, [pc, #528]	; (800863c <_dtoa_r+0x604>)
 800842a:	f7f7 ff4f 	bl	80002cc <__adddf3>
 800842e:	4605      	mov	r5, r0
 8008430:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008434:	2f00      	cmp	r7, #0
 8008436:	d15d      	bne.n	80084f4 <_dtoa_r+0x4bc>
 8008438:	2200      	movs	r2, #0
 800843a:	4b81      	ldr	r3, [pc, #516]	; (8008640 <_dtoa_r+0x608>)
 800843c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008440:	f7f7 ff42 	bl	80002c8 <__aeabi_dsub>
 8008444:	462a      	mov	r2, r5
 8008446:	4633      	mov	r3, r6
 8008448:	e9cd 0100 	strd	r0, r1, [sp]
 800844c:	f7f8 fb84 	bl	8000b58 <__aeabi_dcmpgt>
 8008450:	2800      	cmp	r0, #0
 8008452:	f040 8288 	bne.w	8008966 <_dtoa_r+0x92e>
 8008456:	462a      	mov	r2, r5
 8008458:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800845c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008460:	f7f8 fb5c 	bl	8000b1c <__aeabi_dcmplt>
 8008464:	2800      	cmp	r0, #0
 8008466:	f040 827c 	bne.w	8008962 <_dtoa_r+0x92a>
 800846a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800846e:	e9cd 2300 	strd	r2, r3, [sp]
 8008472:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008474:	2b00      	cmp	r3, #0
 8008476:	f2c0 8150 	blt.w	800871a <_dtoa_r+0x6e2>
 800847a:	f1ba 0f0e 	cmp.w	sl, #14
 800847e:	f300 814c 	bgt.w	800871a <_dtoa_r+0x6e2>
 8008482:	4b6a      	ldr	r3, [pc, #424]	; (800862c <_dtoa_r+0x5f4>)
 8008484:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008488:	ed93 7b00 	vldr	d7, [r3]
 800848c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800848e:	2b00      	cmp	r3, #0
 8008490:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008494:	f280 80d8 	bge.w	8008648 <_dtoa_r+0x610>
 8008498:	f1b9 0f00 	cmp.w	r9, #0
 800849c:	f300 80d4 	bgt.w	8008648 <_dtoa_r+0x610>
 80084a0:	f040 825e 	bne.w	8008960 <_dtoa_r+0x928>
 80084a4:	2200      	movs	r2, #0
 80084a6:	4b66      	ldr	r3, [pc, #408]	; (8008640 <_dtoa_r+0x608>)
 80084a8:	ec51 0b17 	vmov	r0, r1, d7
 80084ac:	f7f8 f8c4 	bl	8000638 <__aeabi_dmul>
 80084b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084b4:	f7f8 fb46 	bl	8000b44 <__aeabi_dcmpge>
 80084b8:	464f      	mov	r7, r9
 80084ba:	464e      	mov	r6, r9
 80084bc:	2800      	cmp	r0, #0
 80084be:	f040 8234 	bne.w	800892a <_dtoa_r+0x8f2>
 80084c2:	2331      	movs	r3, #49	; 0x31
 80084c4:	f10b 0501 	add.w	r5, fp, #1
 80084c8:	f88b 3000 	strb.w	r3, [fp]
 80084cc:	f10a 0a01 	add.w	sl, sl, #1
 80084d0:	e22f      	b.n	8008932 <_dtoa_r+0x8fa>
 80084d2:	07f2      	lsls	r2, r6, #31
 80084d4:	d505      	bpl.n	80084e2 <_dtoa_r+0x4aa>
 80084d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084da:	f7f8 f8ad 	bl	8000638 <__aeabi_dmul>
 80084de:	3501      	adds	r5, #1
 80084e0:	2301      	movs	r3, #1
 80084e2:	1076      	asrs	r6, r6, #1
 80084e4:	3708      	adds	r7, #8
 80084e6:	e772      	b.n	80083ce <_dtoa_r+0x396>
 80084e8:	2502      	movs	r5, #2
 80084ea:	e774      	b.n	80083d6 <_dtoa_r+0x39e>
 80084ec:	f8cd a020 	str.w	sl, [sp, #32]
 80084f0:	464f      	mov	r7, r9
 80084f2:	e791      	b.n	8008418 <_dtoa_r+0x3e0>
 80084f4:	4b4d      	ldr	r3, [pc, #308]	; (800862c <_dtoa_r+0x5f4>)
 80084f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80084fa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80084fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008500:	2b00      	cmp	r3, #0
 8008502:	d047      	beq.n	8008594 <_dtoa_r+0x55c>
 8008504:	4602      	mov	r2, r0
 8008506:	460b      	mov	r3, r1
 8008508:	2000      	movs	r0, #0
 800850a:	494e      	ldr	r1, [pc, #312]	; (8008644 <_dtoa_r+0x60c>)
 800850c:	f7f8 f9be 	bl	800088c <__aeabi_ddiv>
 8008510:	462a      	mov	r2, r5
 8008512:	4633      	mov	r3, r6
 8008514:	f7f7 fed8 	bl	80002c8 <__aeabi_dsub>
 8008518:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800851c:	465d      	mov	r5, fp
 800851e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008522:	f7f8 fb39 	bl	8000b98 <__aeabi_d2iz>
 8008526:	4606      	mov	r6, r0
 8008528:	f7f8 f81c 	bl	8000564 <__aeabi_i2d>
 800852c:	4602      	mov	r2, r0
 800852e:	460b      	mov	r3, r1
 8008530:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008534:	f7f7 fec8 	bl	80002c8 <__aeabi_dsub>
 8008538:	3630      	adds	r6, #48	; 0x30
 800853a:	f805 6b01 	strb.w	r6, [r5], #1
 800853e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008542:	e9cd 0100 	strd	r0, r1, [sp]
 8008546:	f7f8 fae9 	bl	8000b1c <__aeabi_dcmplt>
 800854a:	2800      	cmp	r0, #0
 800854c:	d163      	bne.n	8008616 <_dtoa_r+0x5de>
 800854e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008552:	2000      	movs	r0, #0
 8008554:	4937      	ldr	r1, [pc, #220]	; (8008634 <_dtoa_r+0x5fc>)
 8008556:	f7f7 feb7 	bl	80002c8 <__aeabi_dsub>
 800855a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800855e:	f7f8 fadd 	bl	8000b1c <__aeabi_dcmplt>
 8008562:	2800      	cmp	r0, #0
 8008564:	f040 80b7 	bne.w	80086d6 <_dtoa_r+0x69e>
 8008568:	eba5 030b 	sub.w	r3, r5, fp
 800856c:	429f      	cmp	r7, r3
 800856e:	f77f af7c 	ble.w	800846a <_dtoa_r+0x432>
 8008572:	2200      	movs	r2, #0
 8008574:	4b30      	ldr	r3, [pc, #192]	; (8008638 <_dtoa_r+0x600>)
 8008576:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800857a:	f7f8 f85d 	bl	8000638 <__aeabi_dmul>
 800857e:	2200      	movs	r2, #0
 8008580:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008584:	4b2c      	ldr	r3, [pc, #176]	; (8008638 <_dtoa_r+0x600>)
 8008586:	e9dd 0100 	ldrd	r0, r1, [sp]
 800858a:	f7f8 f855 	bl	8000638 <__aeabi_dmul>
 800858e:	e9cd 0100 	strd	r0, r1, [sp]
 8008592:	e7c4      	b.n	800851e <_dtoa_r+0x4e6>
 8008594:	462a      	mov	r2, r5
 8008596:	4633      	mov	r3, r6
 8008598:	f7f8 f84e 	bl	8000638 <__aeabi_dmul>
 800859c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80085a0:	eb0b 0507 	add.w	r5, fp, r7
 80085a4:	465e      	mov	r6, fp
 80085a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085aa:	f7f8 faf5 	bl	8000b98 <__aeabi_d2iz>
 80085ae:	4607      	mov	r7, r0
 80085b0:	f7f7 ffd8 	bl	8000564 <__aeabi_i2d>
 80085b4:	3730      	adds	r7, #48	; 0x30
 80085b6:	4602      	mov	r2, r0
 80085b8:	460b      	mov	r3, r1
 80085ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085be:	f7f7 fe83 	bl	80002c8 <__aeabi_dsub>
 80085c2:	f806 7b01 	strb.w	r7, [r6], #1
 80085c6:	42ae      	cmp	r6, r5
 80085c8:	e9cd 0100 	strd	r0, r1, [sp]
 80085cc:	f04f 0200 	mov.w	r2, #0
 80085d0:	d126      	bne.n	8008620 <_dtoa_r+0x5e8>
 80085d2:	4b1c      	ldr	r3, [pc, #112]	; (8008644 <_dtoa_r+0x60c>)
 80085d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80085d8:	f7f7 fe78 	bl	80002cc <__adddf3>
 80085dc:	4602      	mov	r2, r0
 80085de:	460b      	mov	r3, r1
 80085e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085e4:	f7f8 fab8 	bl	8000b58 <__aeabi_dcmpgt>
 80085e8:	2800      	cmp	r0, #0
 80085ea:	d174      	bne.n	80086d6 <_dtoa_r+0x69e>
 80085ec:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80085f0:	2000      	movs	r0, #0
 80085f2:	4914      	ldr	r1, [pc, #80]	; (8008644 <_dtoa_r+0x60c>)
 80085f4:	f7f7 fe68 	bl	80002c8 <__aeabi_dsub>
 80085f8:	4602      	mov	r2, r0
 80085fa:	460b      	mov	r3, r1
 80085fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008600:	f7f8 fa8c 	bl	8000b1c <__aeabi_dcmplt>
 8008604:	2800      	cmp	r0, #0
 8008606:	f43f af30 	beq.w	800846a <_dtoa_r+0x432>
 800860a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800860e:	2b30      	cmp	r3, #48	; 0x30
 8008610:	f105 32ff 	add.w	r2, r5, #4294967295
 8008614:	d002      	beq.n	800861c <_dtoa_r+0x5e4>
 8008616:	f8dd a020 	ldr.w	sl, [sp, #32]
 800861a:	e04a      	b.n	80086b2 <_dtoa_r+0x67a>
 800861c:	4615      	mov	r5, r2
 800861e:	e7f4      	b.n	800860a <_dtoa_r+0x5d2>
 8008620:	4b05      	ldr	r3, [pc, #20]	; (8008638 <_dtoa_r+0x600>)
 8008622:	f7f8 f809 	bl	8000638 <__aeabi_dmul>
 8008626:	e9cd 0100 	strd	r0, r1, [sp]
 800862a:	e7bc      	b.n	80085a6 <_dtoa_r+0x56e>
 800862c:	0800a7e0 	.word	0x0800a7e0
 8008630:	0800a7b8 	.word	0x0800a7b8
 8008634:	3ff00000 	.word	0x3ff00000
 8008638:	40240000 	.word	0x40240000
 800863c:	401c0000 	.word	0x401c0000
 8008640:	40140000 	.word	0x40140000
 8008644:	3fe00000 	.word	0x3fe00000
 8008648:	e9dd 6700 	ldrd	r6, r7, [sp]
 800864c:	465d      	mov	r5, fp
 800864e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008652:	4630      	mov	r0, r6
 8008654:	4639      	mov	r1, r7
 8008656:	f7f8 f919 	bl	800088c <__aeabi_ddiv>
 800865a:	f7f8 fa9d 	bl	8000b98 <__aeabi_d2iz>
 800865e:	4680      	mov	r8, r0
 8008660:	f7f7 ff80 	bl	8000564 <__aeabi_i2d>
 8008664:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008668:	f7f7 ffe6 	bl	8000638 <__aeabi_dmul>
 800866c:	4602      	mov	r2, r0
 800866e:	460b      	mov	r3, r1
 8008670:	4630      	mov	r0, r6
 8008672:	4639      	mov	r1, r7
 8008674:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008678:	f7f7 fe26 	bl	80002c8 <__aeabi_dsub>
 800867c:	f805 6b01 	strb.w	r6, [r5], #1
 8008680:	eba5 060b 	sub.w	r6, r5, fp
 8008684:	45b1      	cmp	r9, r6
 8008686:	4602      	mov	r2, r0
 8008688:	460b      	mov	r3, r1
 800868a:	d139      	bne.n	8008700 <_dtoa_r+0x6c8>
 800868c:	f7f7 fe1e 	bl	80002cc <__adddf3>
 8008690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008694:	4606      	mov	r6, r0
 8008696:	460f      	mov	r7, r1
 8008698:	f7f8 fa5e 	bl	8000b58 <__aeabi_dcmpgt>
 800869c:	b9c8      	cbnz	r0, 80086d2 <_dtoa_r+0x69a>
 800869e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086a2:	4630      	mov	r0, r6
 80086a4:	4639      	mov	r1, r7
 80086a6:	f7f8 fa2f 	bl	8000b08 <__aeabi_dcmpeq>
 80086aa:	b110      	cbz	r0, 80086b2 <_dtoa_r+0x67a>
 80086ac:	f018 0f01 	tst.w	r8, #1
 80086b0:	d10f      	bne.n	80086d2 <_dtoa_r+0x69a>
 80086b2:	9904      	ldr	r1, [sp, #16]
 80086b4:	4620      	mov	r0, r4
 80086b6:	f000 fdff 	bl	80092b8 <_Bfree>
 80086ba:	2300      	movs	r3, #0
 80086bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80086be:	702b      	strb	r3, [r5, #0]
 80086c0:	f10a 0301 	add.w	r3, sl, #1
 80086c4:	6013      	str	r3, [r2, #0]
 80086c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	f000 8241 	beq.w	8008b50 <_dtoa_r+0xb18>
 80086ce:	601d      	str	r5, [r3, #0]
 80086d0:	e23e      	b.n	8008b50 <_dtoa_r+0xb18>
 80086d2:	f8cd a020 	str.w	sl, [sp, #32]
 80086d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80086da:	2a39      	cmp	r2, #57	; 0x39
 80086dc:	f105 33ff 	add.w	r3, r5, #4294967295
 80086e0:	d108      	bne.n	80086f4 <_dtoa_r+0x6bc>
 80086e2:	459b      	cmp	fp, r3
 80086e4:	d10a      	bne.n	80086fc <_dtoa_r+0x6c4>
 80086e6:	9b08      	ldr	r3, [sp, #32]
 80086e8:	3301      	adds	r3, #1
 80086ea:	9308      	str	r3, [sp, #32]
 80086ec:	2330      	movs	r3, #48	; 0x30
 80086ee:	f88b 3000 	strb.w	r3, [fp]
 80086f2:	465b      	mov	r3, fp
 80086f4:	781a      	ldrb	r2, [r3, #0]
 80086f6:	3201      	adds	r2, #1
 80086f8:	701a      	strb	r2, [r3, #0]
 80086fa:	e78c      	b.n	8008616 <_dtoa_r+0x5de>
 80086fc:	461d      	mov	r5, r3
 80086fe:	e7ea      	b.n	80086d6 <_dtoa_r+0x69e>
 8008700:	2200      	movs	r2, #0
 8008702:	4b9b      	ldr	r3, [pc, #620]	; (8008970 <_dtoa_r+0x938>)
 8008704:	f7f7 ff98 	bl	8000638 <__aeabi_dmul>
 8008708:	2200      	movs	r2, #0
 800870a:	2300      	movs	r3, #0
 800870c:	4606      	mov	r6, r0
 800870e:	460f      	mov	r7, r1
 8008710:	f7f8 f9fa 	bl	8000b08 <__aeabi_dcmpeq>
 8008714:	2800      	cmp	r0, #0
 8008716:	d09a      	beq.n	800864e <_dtoa_r+0x616>
 8008718:	e7cb      	b.n	80086b2 <_dtoa_r+0x67a>
 800871a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800871c:	2a00      	cmp	r2, #0
 800871e:	f000 808b 	beq.w	8008838 <_dtoa_r+0x800>
 8008722:	9a06      	ldr	r2, [sp, #24]
 8008724:	2a01      	cmp	r2, #1
 8008726:	dc6e      	bgt.n	8008806 <_dtoa_r+0x7ce>
 8008728:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800872a:	2a00      	cmp	r2, #0
 800872c:	d067      	beq.n	80087fe <_dtoa_r+0x7c6>
 800872e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008732:	9f07      	ldr	r7, [sp, #28]
 8008734:	9d05      	ldr	r5, [sp, #20]
 8008736:	9a05      	ldr	r2, [sp, #20]
 8008738:	2101      	movs	r1, #1
 800873a:	441a      	add	r2, r3
 800873c:	4620      	mov	r0, r4
 800873e:	9205      	str	r2, [sp, #20]
 8008740:	4498      	add	r8, r3
 8008742:	f000 fe97 	bl	8009474 <__i2b>
 8008746:	4606      	mov	r6, r0
 8008748:	2d00      	cmp	r5, #0
 800874a:	dd0c      	ble.n	8008766 <_dtoa_r+0x72e>
 800874c:	f1b8 0f00 	cmp.w	r8, #0
 8008750:	dd09      	ble.n	8008766 <_dtoa_r+0x72e>
 8008752:	4545      	cmp	r5, r8
 8008754:	9a05      	ldr	r2, [sp, #20]
 8008756:	462b      	mov	r3, r5
 8008758:	bfa8      	it	ge
 800875a:	4643      	movge	r3, r8
 800875c:	1ad2      	subs	r2, r2, r3
 800875e:	9205      	str	r2, [sp, #20]
 8008760:	1aed      	subs	r5, r5, r3
 8008762:	eba8 0803 	sub.w	r8, r8, r3
 8008766:	9b07      	ldr	r3, [sp, #28]
 8008768:	b1eb      	cbz	r3, 80087a6 <_dtoa_r+0x76e>
 800876a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800876c:	2b00      	cmp	r3, #0
 800876e:	d067      	beq.n	8008840 <_dtoa_r+0x808>
 8008770:	b18f      	cbz	r7, 8008796 <_dtoa_r+0x75e>
 8008772:	4631      	mov	r1, r6
 8008774:	463a      	mov	r2, r7
 8008776:	4620      	mov	r0, r4
 8008778:	f000 ff1c 	bl	80095b4 <__pow5mult>
 800877c:	9a04      	ldr	r2, [sp, #16]
 800877e:	4601      	mov	r1, r0
 8008780:	4606      	mov	r6, r0
 8008782:	4620      	mov	r0, r4
 8008784:	f000 fe7f 	bl	8009486 <__multiply>
 8008788:	9904      	ldr	r1, [sp, #16]
 800878a:	9008      	str	r0, [sp, #32]
 800878c:	4620      	mov	r0, r4
 800878e:	f000 fd93 	bl	80092b8 <_Bfree>
 8008792:	9b08      	ldr	r3, [sp, #32]
 8008794:	9304      	str	r3, [sp, #16]
 8008796:	9b07      	ldr	r3, [sp, #28]
 8008798:	1bda      	subs	r2, r3, r7
 800879a:	d004      	beq.n	80087a6 <_dtoa_r+0x76e>
 800879c:	9904      	ldr	r1, [sp, #16]
 800879e:	4620      	mov	r0, r4
 80087a0:	f000 ff08 	bl	80095b4 <__pow5mult>
 80087a4:	9004      	str	r0, [sp, #16]
 80087a6:	2101      	movs	r1, #1
 80087a8:	4620      	mov	r0, r4
 80087aa:	f000 fe63 	bl	8009474 <__i2b>
 80087ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087b0:	4607      	mov	r7, r0
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	f000 81d0 	beq.w	8008b58 <_dtoa_r+0xb20>
 80087b8:	461a      	mov	r2, r3
 80087ba:	4601      	mov	r1, r0
 80087bc:	4620      	mov	r0, r4
 80087be:	f000 fef9 	bl	80095b4 <__pow5mult>
 80087c2:	9b06      	ldr	r3, [sp, #24]
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	4607      	mov	r7, r0
 80087c8:	dc40      	bgt.n	800884c <_dtoa_r+0x814>
 80087ca:	9b00      	ldr	r3, [sp, #0]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d139      	bne.n	8008844 <_dtoa_r+0x80c>
 80087d0:	9b01      	ldr	r3, [sp, #4]
 80087d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d136      	bne.n	8008848 <_dtoa_r+0x810>
 80087da:	9b01      	ldr	r3, [sp, #4]
 80087dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80087e0:	0d1b      	lsrs	r3, r3, #20
 80087e2:	051b      	lsls	r3, r3, #20
 80087e4:	b12b      	cbz	r3, 80087f2 <_dtoa_r+0x7ba>
 80087e6:	9b05      	ldr	r3, [sp, #20]
 80087e8:	3301      	adds	r3, #1
 80087ea:	9305      	str	r3, [sp, #20]
 80087ec:	f108 0801 	add.w	r8, r8, #1
 80087f0:	2301      	movs	r3, #1
 80087f2:	9307      	str	r3, [sp, #28]
 80087f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d12a      	bne.n	8008850 <_dtoa_r+0x818>
 80087fa:	2001      	movs	r0, #1
 80087fc:	e030      	b.n	8008860 <_dtoa_r+0x828>
 80087fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008800:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008804:	e795      	b.n	8008732 <_dtoa_r+0x6fa>
 8008806:	9b07      	ldr	r3, [sp, #28]
 8008808:	f109 37ff 	add.w	r7, r9, #4294967295
 800880c:	42bb      	cmp	r3, r7
 800880e:	bfbf      	itttt	lt
 8008810:	9b07      	ldrlt	r3, [sp, #28]
 8008812:	9707      	strlt	r7, [sp, #28]
 8008814:	1afa      	sublt	r2, r7, r3
 8008816:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008818:	bfbb      	ittet	lt
 800881a:	189b      	addlt	r3, r3, r2
 800881c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800881e:	1bdf      	subge	r7, r3, r7
 8008820:	2700      	movlt	r7, #0
 8008822:	f1b9 0f00 	cmp.w	r9, #0
 8008826:	bfb5      	itete	lt
 8008828:	9b05      	ldrlt	r3, [sp, #20]
 800882a:	9d05      	ldrge	r5, [sp, #20]
 800882c:	eba3 0509 	sublt.w	r5, r3, r9
 8008830:	464b      	movge	r3, r9
 8008832:	bfb8      	it	lt
 8008834:	2300      	movlt	r3, #0
 8008836:	e77e      	b.n	8008736 <_dtoa_r+0x6fe>
 8008838:	9f07      	ldr	r7, [sp, #28]
 800883a:	9d05      	ldr	r5, [sp, #20]
 800883c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800883e:	e783      	b.n	8008748 <_dtoa_r+0x710>
 8008840:	9a07      	ldr	r2, [sp, #28]
 8008842:	e7ab      	b.n	800879c <_dtoa_r+0x764>
 8008844:	2300      	movs	r3, #0
 8008846:	e7d4      	b.n	80087f2 <_dtoa_r+0x7ba>
 8008848:	9b00      	ldr	r3, [sp, #0]
 800884a:	e7d2      	b.n	80087f2 <_dtoa_r+0x7ba>
 800884c:	2300      	movs	r3, #0
 800884e:	9307      	str	r3, [sp, #28]
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008856:	6918      	ldr	r0, [r3, #16]
 8008858:	f000 fdbe 	bl	80093d8 <__hi0bits>
 800885c:	f1c0 0020 	rsb	r0, r0, #32
 8008860:	4440      	add	r0, r8
 8008862:	f010 001f 	ands.w	r0, r0, #31
 8008866:	d047      	beq.n	80088f8 <_dtoa_r+0x8c0>
 8008868:	f1c0 0320 	rsb	r3, r0, #32
 800886c:	2b04      	cmp	r3, #4
 800886e:	dd3b      	ble.n	80088e8 <_dtoa_r+0x8b0>
 8008870:	9b05      	ldr	r3, [sp, #20]
 8008872:	f1c0 001c 	rsb	r0, r0, #28
 8008876:	4403      	add	r3, r0
 8008878:	9305      	str	r3, [sp, #20]
 800887a:	4405      	add	r5, r0
 800887c:	4480      	add	r8, r0
 800887e:	9b05      	ldr	r3, [sp, #20]
 8008880:	2b00      	cmp	r3, #0
 8008882:	dd05      	ble.n	8008890 <_dtoa_r+0x858>
 8008884:	461a      	mov	r2, r3
 8008886:	9904      	ldr	r1, [sp, #16]
 8008888:	4620      	mov	r0, r4
 800888a:	f000 fee1 	bl	8009650 <__lshift>
 800888e:	9004      	str	r0, [sp, #16]
 8008890:	f1b8 0f00 	cmp.w	r8, #0
 8008894:	dd05      	ble.n	80088a2 <_dtoa_r+0x86a>
 8008896:	4639      	mov	r1, r7
 8008898:	4642      	mov	r2, r8
 800889a:	4620      	mov	r0, r4
 800889c:	f000 fed8 	bl	8009650 <__lshift>
 80088a0:	4607      	mov	r7, r0
 80088a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088a4:	b353      	cbz	r3, 80088fc <_dtoa_r+0x8c4>
 80088a6:	4639      	mov	r1, r7
 80088a8:	9804      	ldr	r0, [sp, #16]
 80088aa:	f000 ff25 	bl	80096f8 <__mcmp>
 80088ae:	2800      	cmp	r0, #0
 80088b0:	da24      	bge.n	80088fc <_dtoa_r+0x8c4>
 80088b2:	2300      	movs	r3, #0
 80088b4:	220a      	movs	r2, #10
 80088b6:	9904      	ldr	r1, [sp, #16]
 80088b8:	4620      	mov	r0, r4
 80088ba:	f000 fd14 	bl	80092e6 <__multadd>
 80088be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088c0:	9004      	str	r0, [sp, #16]
 80088c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	f000 814d 	beq.w	8008b66 <_dtoa_r+0xb2e>
 80088cc:	2300      	movs	r3, #0
 80088ce:	4631      	mov	r1, r6
 80088d0:	220a      	movs	r2, #10
 80088d2:	4620      	mov	r0, r4
 80088d4:	f000 fd07 	bl	80092e6 <__multadd>
 80088d8:	9b02      	ldr	r3, [sp, #8]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	4606      	mov	r6, r0
 80088de:	dc4f      	bgt.n	8008980 <_dtoa_r+0x948>
 80088e0:	9b06      	ldr	r3, [sp, #24]
 80088e2:	2b02      	cmp	r3, #2
 80088e4:	dd4c      	ble.n	8008980 <_dtoa_r+0x948>
 80088e6:	e011      	b.n	800890c <_dtoa_r+0x8d4>
 80088e8:	d0c9      	beq.n	800887e <_dtoa_r+0x846>
 80088ea:	9a05      	ldr	r2, [sp, #20]
 80088ec:	331c      	adds	r3, #28
 80088ee:	441a      	add	r2, r3
 80088f0:	9205      	str	r2, [sp, #20]
 80088f2:	441d      	add	r5, r3
 80088f4:	4498      	add	r8, r3
 80088f6:	e7c2      	b.n	800887e <_dtoa_r+0x846>
 80088f8:	4603      	mov	r3, r0
 80088fa:	e7f6      	b.n	80088ea <_dtoa_r+0x8b2>
 80088fc:	f1b9 0f00 	cmp.w	r9, #0
 8008900:	dc38      	bgt.n	8008974 <_dtoa_r+0x93c>
 8008902:	9b06      	ldr	r3, [sp, #24]
 8008904:	2b02      	cmp	r3, #2
 8008906:	dd35      	ble.n	8008974 <_dtoa_r+0x93c>
 8008908:	f8cd 9008 	str.w	r9, [sp, #8]
 800890c:	9b02      	ldr	r3, [sp, #8]
 800890e:	b963      	cbnz	r3, 800892a <_dtoa_r+0x8f2>
 8008910:	4639      	mov	r1, r7
 8008912:	2205      	movs	r2, #5
 8008914:	4620      	mov	r0, r4
 8008916:	f000 fce6 	bl	80092e6 <__multadd>
 800891a:	4601      	mov	r1, r0
 800891c:	4607      	mov	r7, r0
 800891e:	9804      	ldr	r0, [sp, #16]
 8008920:	f000 feea 	bl	80096f8 <__mcmp>
 8008924:	2800      	cmp	r0, #0
 8008926:	f73f adcc 	bgt.w	80084c2 <_dtoa_r+0x48a>
 800892a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800892c:	465d      	mov	r5, fp
 800892e:	ea6f 0a03 	mvn.w	sl, r3
 8008932:	f04f 0900 	mov.w	r9, #0
 8008936:	4639      	mov	r1, r7
 8008938:	4620      	mov	r0, r4
 800893a:	f000 fcbd 	bl	80092b8 <_Bfree>
 800893e:	2e00      	cmp	r6, #0
 8008940:	f43f aeb7 	beq.w	80086b2 <_dtoa_r+0x67a>
 8008944:	f1b9 0f00 	cmp.w	r9, #0
 8008948:	d005      	beq.n	8008956 <_dtoa_r+0x91e>
 800894a:	45b1      	cmp	r9, r6
 800894c:	d003      	beq.n	8008956 <_dtoa_r+0x91e>
 800894e:	4649      	mov	r1, r9
 8008950:	4620      	mov	r0, r4
 8008952:	f000 fcb1 	bl	80092b8 <_Bfree>
 8008956:	4631      	mov	r1, r6
 8008958:	4620      	mov	r0, r4
 800895a:	f000 fcad 	bl	80092b8 <_Bfree>
 800895e:	e6a8      	b.n	80086b2 <_dtoa_r+0x67a>
 8008960:	2700      	movs	r7, #0
 8008962:	463e      	mov	r6, r7
 8008964:	e7e1      	b.n	800892a <_dtoa_r+0x8f2>
 8008966:	f8dd a020 	ldr.w	sl, [sp, #32]
 800896a:	463e      	mov	r6, r7
 800896c:	e5a9      	b.n	80084c2 <_dtoa_r+0x48a>
 800896e:	bf00      	nop
 8008970:	40240000 	.word	0x40240000
 8008974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008976:	f8cd 9008 	str.w	r9, [sp, #8]
 800897a:	2b00      	cmp	r3, #0
 800897c:	f000 80fa 	beq.w	8008b74 <_dtoa_r+0xb3c>
 8008980:	2d00      	cmp	r5, #0
 8008982:	dd05      	ble.n	8008990 <_dtoa_r+0x958>
 8008984:	4631      	mov	r1, r6
 8008986:	462a      	mov	r2, r5
 8008988:	4620      	mov	r0, r4
 800898a:	f000 fe61 	bl	8009650 <__lshift>
 800898e:	4606      	mov	r6, r0
 8008990:	9b07      	ldr	r3, [sp, #28]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d04c      	beq.n	8008a30 <_dtoa_r+0x9f8>
 8008996:	6871      	ldr	r1, [r6, #4]
 8008998:	4620      	mov	r0, r4
 800899a:	f000 fc59 	bl	8009250 <_Balloc>
 800899e:	6932      	ldr	r2, [r6, #16]
 80089a0:	3202      	adds	r2, #2
 80089a2:	4605      	mov	r5, r0
 80089a4:	0092      	lsls	r2, r2, #2
 80089a6:	f106 010c 	add.w	r1, r6, #12
 80089aa:	300c      	adds	r0, #12
 80089ac:	f7fd fd78 	bl	80064a0 <memcpy>
 80089b0:	2201      	movs	r2, #1
 80089b2:	4629      	mov	r1, r5
 80089b4:	4620      	mov	r0, r4
 80089b6:	f000 fe4b 	bl	8009650 <__lshift>
 80089ba:	9b00      	ldr	r3, [sp, #0]
 80089bc:	f8cd b014 	str.w	fp, [sp, #20]
 80089c0:	f003 0301 	and.w	r3, r3, #1
 80089c4:	46b1      	mov	r9, r6
 80089c6:	9307      	str	r3, [sp, #28]
 80089c8:	4606      	mov	r6, r0
 80089ca:	4639      	mov	r1, r7
 80089cc:	9804      	ldr	r0, [sp, #16]
 80089ce:	f7ff faa5 	bl	8007f1c <quorem>
 80089d2:	4649      	mov	r1, r9
 80089d4:	4605      	mov	r5, r0
 80089d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80089da:	9804      	ldr	r0, [sp, #16]
 80089dc:	f000 fe8c 	bl	80096f8 <__mcmp>
 80089e0:	4632      	mov	r2, r6
 80089e2:	9000      	str	r0, [sp, #0]
 80089e4:	4639      	mov	r1, r7
 80089e6:	4620      	mov	r0, r4
 80089e8:	f000 fea0 	bl	800972c <__mdiff>
 80089ec:	68c3      	ldr	r3, [r0, #12]
 80089ee:	4602      	mov	r2, r0
 80089f0:	bb03      	cbnz	r3, 8008a34 <_dtoa_r+0x9fc>
 80089f2:	4601      	mov	r1, r0
 80089f4:	9008      	str	r0, [sp, #32]
 80089f6:	9804      	ldr	r0, [sp, #16]
 80089f8:	f000 fe7e 	bl	80096f8 <__mcmp>
 80089fc:	9a08      	ldr	r2, [sp, #32]
 80089fe:	4603      	mov	r3, r0
 8008a00:	4611      	mov	r1, r2
 8008a02:	4620      	mov	r0, r4
 8008a04:	9308      	str	r3, [sp, #32]
 8008a06:	f000 fc57 	bl	80092b8 <_Bfree>
 8008a0a:	9b08      	ldr	r3, [sp, #32]
 8008a0c:	b9a3      	cbnz	r3, 8008a38 <_dtoa_r+0xa00>
 8008a0e:	9a06      	ldr	r2, [sp, #24]
 8008a10:	b992      	cbnz	r2, 8008a38 <_dtoa_r+0xa00>
 8008a12:	9a07      	ldr	r2, [sp, #28]
 8008a14:	b982      	cbnz	r2, 8008a38 <_dtoa_r+0xa00>
 8008a16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008a1a:	d029      	beq.n	8008a70 <_dtoa_r+0xa38>
 8008a1c:	9b00      	ldr	r3, [sp, #0]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	dd01      	ble.n	8008a26 <_dtoa_r+0x9ee>
 8008a22:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008a26:	9b05      	ldr	r3, [sp, #20]
 8008a28:	1c5d      	adds	r5, r3, #1
 8008a2a:	f883 8000 	strb.w	r8, [r3]
 8008a2e:	e782      	b.n	8008936 <_dtoa_r+0x8fe>
 8008a30:	4630      	mov	r0, r6
 8008a32:	e7c2      	b.n	80089ba <_dtoa_r+0x982>
 8008a34:	2301      	movs	r3, #1
 8008a36:	e7e3      	b.n	8008a00 <_dtoa_r+0x9c8>
 8008a38:	9a00      	ldr	r2, [sp, #0]
 8008a3a:	2a00      	cmp	r2, #0
 8008a3c:	db04      	blt.n	8008a48 <_dtoa_r+0xa10>
 8008a3e:	d125      	bne.n	8008a8c <_dtoa_r+0xa54>
 8008a40:	9a06      	ldr	r2, [sp, #24]
 8008a42:	bb1a      	cbnz	r2, 8008a8c <_dtoa_r+0xa54>
 8008a44:	9a07      	ldr	r2, [sp, #28]
 8008a46:	bb0a      	cbnz	r2, 8008a8c <_dtoa_r+0xa54>
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	ddec      	ble.n	8008a26 <_dtoa_r+0x9ee>
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	9904      	ldr	r1, [sp, #16]
 8008a50:	4620      	mov	r0, r4
 8008a52:	f000 fdfd 	bl	8009650 <__lshift>
 8008a56:	4639      	mov	r1, r7
 8008a58:	9004      	str	r0, [sp, #16]
 8008a5a:	f000 fe4d 	bl	80096f8 <__mcmp>
 8008a5e:	2800      	cmp	r0, #0
 8008a60:	dc03      	bgt.n	8008a6a <_dtoa_r+0xa32>
 8008a62:	d1e0      	bne.n	8008a26 <_dtoa_r+0x9ee>
 8008a64:	f018 0f01 	tst.w	r8, #1
 8008a68:	d0dd      	beq.n	8008a26 <_dtoa_r+0x9ee>
 8008a6a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008a6e:	d1d8      	bne.n	8008a22 <_dtoa_r+0x9ea>
 8008a70:	9b05      	ldr	r3, [sp, #20]
 8008a72:	9a05      	ldr	r2, [sp, #20]
 8008a74:	1c5d      	adds	r5, r3, #1
 8008a76:	2339      	movs	r3, #57	; 0x39
 8008a78:	7013      	strb	r3, [r2, #0]
 8008a7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008a7e:	2b39      	cmp	r3, #57	; 0x39
 8008a80:	f105 32ff 	add.w	r2, r5, #4294967295
 8008a84:	d04f      	beq.n	8008b26 <_dtoa_r+0xaee>
 8008a86:	3301      	adds	r3, #1
 8008a88:	7013      	strb	r3, [r2, #0]
 8008a8a:	e754      	b.n	8008936 <_dtoa_r+0x8fe>
 8008a8c:	9a05      	ldr	r2, [sp, #20]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	f102 0501 	add.w	r5, r2, #1
 8008a94:	dd06      	ble.n	8008aa4 <_dtoa_r+0xa6c>
 8008a96:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008a9a:	d0e9      	beq.n	8008a70 <_dtoa_r+0xa38>
 8008a9c:	f108 0801 	add.w	r8, r8, #1
 8008aa0:	9b05      	ldr	r3, [sp, #20]
 8008aa2:	e7c2      	b.n	8008a2a <_dtoa_r+0x9f2>
 8008aa4:	9a02      	ldr	r2, [sp, #8]
 8008aa6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008aaa:	eba5 030b 	sub.w	r3, r5, fp
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d021      	beq.n	8008af6 <_dtoa_r+0xabe>
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	220a      	movs	r2, #10
 8008ab6:	9904      	ldr	r1, [sp, #16]
 8008ab8:	4620      	mov	r0, r4
 8008aba:	f000 fc14 	bl	80092e6 <__multadd>
 8008abe:	45b1      	cmp	r9, r6
 8008ac0:	9004      	str	r0, [sp, #16]
 8008ac2:	f04f 0300 	mov.w	r3, #0
 8008ac6:	f04f 020a 	mov.w	r2, #10
 8008aca:	4649      	mov	r1, r9
 8008acc:	4620      	mov	r0, r4
 8008ace:	d105      	bne.n	8008adc <_dtoa_r+0xaa4>
 8008ad0:	f000 fc09 	bl	80092e6 <__multadd>
 8008ad4:	4681      	mov	r9, r0
 8008ad6:	4606      	mov	r6, r0
 8008ad8:	9505      	str	r5, [sp, #20]
 8008ada:	e776      	b.n	80089ca <_dtoa_r+0x992>
 8008adc:	f000 fc03 	bl	80092e6 <__multadd>
 8008ae0:	4631      	mov	r1, r6
 8008ae2:	4681      	mov	r9, r0
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	220a      	movs	r2, #10
 8008ae8:	4620      	mov	r0, r4
 8008aea:	f000 fbfc 	bl	80092e6 <__multadd>
 8008aee:	4606      	mov	r6, r0
 8008af0:	e7f2      	b.n	8008ad8 <_dtoa_r+0xaa0>
 8008af2:	f04f 0900 	mov.w	r9, #0
 8008af6:	2201      	movs	r2, #1
 8008af8:	9904      	ldr	r1, [sp, #16]
 8008afa:	4620      	mov	r0, r4
 8008afc:	f000 fda8 	bl	8009650 <__lshift>
 8008b00:	4639      	mov	r1, r7
 8008b02:	9004      	str	r0, [sp, #16]
 8008b04:	f000 fdf8 	bl	80096f8 <__mcmp>
 8008b08:	2800      	cmp	r0, #0
 8008b0a:	dcb6      	bgt.n	8008a7a <_dtoa_r+0xa42>
 8008b0c:	d102      	bne.n	8008b14 <_dtoa_r+0xadc>
 8008b0e:	f018 0f01 	tst.w	r8, #1
 8008b12:	d1b2      	bne.n	8008a7a <_dtoa_r+0xa42>
 8008b14:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008b18:	2b30      	cmp	r3, #48	; 0x30
 8008b1a:	f105 32ff 	add.w	r2, r5, #4294967295
 8008b1e:	f47f af0a 	bne.w	8008936 <_dtoa_r+0x8fe>
 8008b22:	4615      	mov	r5, r2
 8008b24:	e7f6      	b.n	8008b14 <_dtoa_r+0xadc>
 8008b26:	4593      	cmp	fp, r2
 8008b28:	d105      	bne.n	8008b36 <_dtoa_r+0xafe>
 8008b2a:	2331      	movs	r3, #49	; 0x31
 8008b2c:	f10a 0a01 	add.w	sl, sl, #1
 8008b30:	f88b 3000 	strb.w	r3, [fp]
 8008b34:	e6ff      	b.n	8008936 <_dtoa_r+0x8fe>
 8008b36:	4615      	mov	r5, r2
 8008b38:	e79f      	b.n	8008a7a <_dtoa_r+0xa42>
 8008b3a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008ba0 <_dtoa_r+0xb68>
 8008b3e:	e007      	b.n	8008b50 <_dtoa_r+0xb18>
 8008b40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b42:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008ba4 <_dtoa_r+0xb6c>
 8008b46:	b11b      	cbz	r3, 8008b50 <_dtoa_r+0xb18>
 8008b48:	f10b 0308 	add.w	r3, fp, #8
 8008b4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008b4e:	6013      	str	r3, [r2, #0]
 8008b50:	4658      	mov	r0, fp
 8008b52:	b017      	add	sp, #92	; 0x5c
 8008b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b58:	9b06      	ldr	r3, [sp, #24]
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	f77f ae35 	ble.w	80087ca <_dtoa_r+0x792>
 8008b60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b62:	9307      	str	r3, [sp, #28]
 8008b64:	e649      	b.n	80087fa <_dtoa_r+0x7c2>
 8008b66:	9b02      	ldr	r3, [sp, #8]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	dc03      	bgt.n	8008b74 <_dtoa_r+0xb3c>
 8008b6c:	9b06      	ldr	r3, [sp, #24]
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	f73f aecc 	bgt.w	800890c <_dtoa_r+0x8d4>
 8008b74:	465d      	mov	r5, fp
 8008b76:	4639      	mov	r1, r7
 8008b78:	9804      	ldr	r0, [sp, #16]
 8008b7a:	f7ff f9cf 	bl	8007f1c <quorem>
 8008b7e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008b82:	f805 8b01 	strb.w	r8, [r5], #1
 8008b86:	9a02      	ldr	r2, [sp, #8]
 8008b88:	eba5 030b 	sub.w	r3, r5, fp
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	ddb0      	ble.n	8008af2 <_dtoa_r+0xaba>
 8008b90:	2300      	movs	r3, #0
 8008b92:	220a      	movs	r2, #10
 8008b94:	9904      	ldr	r1, [sp, #16]
 8008b96:	4620      	mov	r0, r4
 8008b98:	f000 fba5 	bl	80092e6 <__multadd>
 8008b9c:	9004      	str	r0, [sp, #16]
 8008b9e:	e7ea      	b.n	8008b76 <_dtoa_r+0xb3e>
 8008ba0:	0800a720 	.word	0x0800a720
 8008ba4:	0800a7a0 	.word	0x0800a7a0

08008ba8 <rshift>:
 8008ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008baa:	6906      	ldr	r6, [r0, #16]
 8008bac:	114b      	asrs	r3, r1, #5
 8008bae:	429e      	cmp	r6, r3
 8008bb0:	f100 0414 	add.w	r4, r0, #20
 8008bb4:	dd30      	ble.n	8008c18 <rshift+0x70>
 8008bb6:	f011 011f 	ands.w	r1, r1, #31
 8008bba:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008bbe:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008bc2:	d108      	bne.n	8008bd6 <rshift+0x2e>
 8008bc4:	4621      	mov	r1, r4
 8008bc6:	42b2      	cmp	r2, r6
 8008bc8:	460b      	mov	r3, r1
 8008bca:	d211      	bcs.n	8008bf0 <rshift+0x48>
 8008bcc:	f852 3b04 	ldr.w	r3, [r2], #4
 8008bd0:	f841 3b04 	str.w	r3, [r1], #4
 8008bd4:	e7f7      	b.n	8008bc6 <rshift+0x1e>
 8008bd6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8008bda:	f1c1 0c20 	rsb	ip, r1, #32
 8008bde:	40cd      	lsrs	r5, r1
 8008be0:	3204      	adds	r2, #4
 8008be2:	4623      	mov	r3, r4
 8008be4:	42b2      	cmp	r2, r6
 8008be6:	4617      	mov	r7, r2
 8008be8:	d30c      	bcc.n	8008c04 <rshift+0x5c>
 8008bea:	601d      	str	r5, [r3, #0]
 8008bec:	b105      	cbz	r5, 8008bf0 <rshift+0x48>
 8008bee:	3304      	adds	r3, #4
 8008bf0:	1b1a      	subs	r2, r3, r4
 8008bf2:	42a3      	cmp	r3, r4
 8008bf4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008bf8:	bf08      	it	eq
 8008bfa:	2300      	moveq	r3, #0
 8008bfc:	6102      	str	r2, [r0, #16]
 8008bfe:	bf08      	it	eq
 8008c00:	6143      	streq	r3, [r0, #20]
 8008c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c04:	683f      	ldr	r7, [r7, #0]
 8008c06:	fa07 f70c 	lsl.w	r7, r7, ip
 8008c0a:	433d      	orrs	r5, r7
 8008c0c:	f843 5b04 	str.w	r5, [r3], #4
 8008c10:	f852 5b04 	ldr.w	r5, [r2], #4
 8008c14:	40cd      	lsrs	r5, r1
 8008c16:	e7e5      	b.n	8008be4 <rshift+0x3c>
 8008c18:	4623      	mov	r3, r4
 8008c1a:	e7e9      	b.n	8008bf0 <rshift+0x48>

08008c1c <__hexdig_fun>:
 8008c1c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008c20:	2b09      	cmp	r3, #9
 8008c22:	d802      	bhi.n	8008c2a <__hexdig_fun+0xe>
 8008c24:	3820      	subs	r0, #32
 8008c26:	b2c0      	uxtb	r0, r0
 8008c28:	4770      	bx	lr
 8008c2a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008c2e:	2b05      	cmp	r3, #5
 8008c30:	d801      	bhi.n	8008c36 <__hexdig_fun+0x1a>
 8008c32:	3847      	subs	r0, #71	; 0x47
 8008c34:	e7f7      	b.n	8008c26 <__hexdig_fun+0xa>
 8008c36:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008c3a:	2b05      	cmp	r3, #5
 8008c3c:	d801      	bhi.n	8008c42 <__hexdig_fun+0x26>
 8008c3e:	3827      	subs	r0, #39	; 0x27
 8008c40:	e7f1      	b.n	8008c26 <__hexdig_fun+0xa>
 8008c42:	2000      	movs	r0, #0
 8008c44:	4770      	bx	lr

08008c46 <__gethex>:
 8008c46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c4a:	b08b      	sub	sp, #44	; 0x2c
 8008c4c:	468a      	mov	sl, r1
 8008c4e:	9002      	str	r0, [sp, #8]
 8008c50:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008c52:	9306      	str	r3, [sp, #24]
 8008c54:	4690      	mov	r8, r2
 8008c56:	f000 fad0 	bl	80091fa <__localeconv_l>
 8008c5a:	6803      	ldr	r3, [r0, #0]
 8008c5c:	9303      	str	r3, [sp, #12]
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f7f7 fad6 	bl	8000210 <strlen>
 8008c64:	9b03      	ldr	r3, [sp, #12]
 8008c66:	9001      	str	r0, [sp, #4]
 8008c68:	4403      	add	r3, r0
 8008c6a:	f04f 0b00 	mov.w	fp, #0
 8008c6e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008c72:	9307      	str	r3, [sp, #28]
 8008c74:	f8da 3000 	ldr.w	r3, [sl]
 8008c78:	3302      	adds	r3, #2
 8008c7a:	461f      	mov	r7, r3
 8008c7c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008c80:	2830      	cmp	r0, #48	; 0x30
 8008c82:	d06c      	beq.n	8008d5e <__gethex+0x118>
 8008c84:	f7ff ffca 	bl	8008c1c <__hexdig_fun>
 8008c88:	4604      	mov	r4, r0
 8008c8a:	2800      	cmp	r0, #0
 8008c8c:	d16a      	bne.n	8008d64 <__gethex+0x11e>
 8008c8e:	9a01      	ldr	r2, [sp, #4]
 8008c90:	9903      	ldr	r1, [sp, #12]
 8008c92:	4638      	mov	r0, r7
 8008c94:	f001 f8f4 	bl	8009e80 <strncmp>
 8008c98:	2800      	cmp	r0, #0
 8008c9a:	d166      	bne.n	8008d6a <__gethex+0x124>
 8008c9c:	9b01      	ldr	r3, [sp, #4]
 8008c9e:	5cf8      	ldrb	r0, [r7, r3]
 8008ca0:	18fe      	adds	r6, r7, r3
 8008ca2:	f7ff ffbb 	bl	8008c1c <__hexdig_fun>
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	d062      	beq.n	8008d70 <__gethex+0x12a>
 8008caa:	4633      	mov	r3, r6
 8008cac:	7818      	ldrb	r0, [r3, #0]
 8008cae:	2830      	cmp	r0, #48	; 0x30
 8008cb0:	461f      	mov	r7, r3
 8008cb2:	f103 0301 	add.w	r3, r3, #1
 8008cb6:	d0f9      	beq.n	8008cac <__gethex+0x66>
 8008cb8:	f7ff ffb0 	bl	8008c1c <__hexdig_fun>
 8008cbc:	fab0 f580 	clz	r5, r0
 8008cc0:	096d      	lsrs	r5, r5, #5
 8008cc2:	4634      	mov	r4, r6
 8008cc4:	f04f 0b01 	mov.w	fp, #1
 8008cc8:	463a      	mov	r2, r7
 8008cca:	4616      	mov	r6, r2
 8008ccc:	3201      	adds	r2, #1
 8008cce:	7830      	ldrb	r0, [r6, #0]
 8008cd0:	f7ff ffa4 	bl	8008c1c <__hexdig_fun>
 8008cd4:	2800      	cmp	r0, #0
 8008cd6:	d1f8      	bne.n	8008cca <__gethex+0x84>
 8008cd8:	9a01      	ldr	r2, [sp, #4]
 8008cda:	9903      	ldr	r1, [sp, #12]
 8008cdc:	4630      	mov	r0, r6
 8008cde:	f001 f8cf 	bl	8009e80 <strncmp>
 8008ce2:	b950      	cbnz	r0, 8008cfa <__gethex+0xb4>
 8008ce4:	b954      	cbnz	r4, 8008cfc <__gethex+0xb6>
 8008ce6:	9b01      	ldr	r3, [sp, #4]
 8008ce8:	18f4      	adds	r4, r6, r3
 8008cea:	4622      	mov	r2, r4
 8008cec:	4616      	mov	r6, r2
 8008cee:	3201      	adds	r2, #1
 8008cf0:	7830      	ldrb	r0, [r6, #0]
 8008cf2:	f7ff ff93 	bl	8008c1c <__hexdig_fun>
 8008cf6:	2800      	cmp	r0, #0
 8008cf8:	d1f8      	bne.n	8008cec <__gethex+0xa6>
 8008cfa:	b10c      	cbz	r4, 8008d00 <__gethex+0xba>
 8008cfc:	1ba4      	subs	r4, r4, r6
 8008cfe:	00a4      	lsls	r4, r4, #2
 8008d00:	7833      	ldrb	r3, [r6, #0]
 8008d02:	2b50      	cmp	r3, #80	; 0x50
 8008d04:	d001      	beq.n	8008d0a <__gethex+0xc4>
 8008d06:	2b70      	cmp	r3, #112	; 0x70
 8008d08:	d140      	bne.n	8008d8c <__gethex+0x146>
 8008d0a:	7873      	ldrb	r3, [r6, #1]
 8008d0c:	2b2b      	cmp	r3, #43	; 0x2b
 8008d0e:	d031      	beq.n	8008d74 <__gethex+0x12e>
 8008d10:	2b2d      	cmp	r3, #45	; 0x2d
 8008d12:	d033      	beq.n	8008d7c <__gethex+0x136>
 8008d14:	1c71      	adds	r1, r6, #1
 8008d16:	f04f 0900 	mov.w	r9, #0
 8008d1a:	7808      	ldrb	r0, [r1, #0]
 8008d1c:	f7ff ff7e 	bl	8008c1c <__hexdig_fun>
 8008d20:	1e43      	subs	r3, r0, #1
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	2b18      	cmp	r3, #24
 8008d26:	d831      	bhi.n	8008d8c <__gethex+0x146>
 8008d28:	f1a0 0210 	sub.w	r2, r0, #16
 8008d2c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008d30:	f7ff ff74 	bl	8008c1c <__hexdig_fun>
 8008d34:	1e43      	subs	r3, r0, #1
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	2b18      	cmp	r3, #24
 8008d3a:	d922      	bls.n	8008d82 <__gethex+0x13c>
 8008d3c:	f1b9 0f00 	cmp.w	r9, #0
 8008d40:	d000      	beq.n	8008d44 <__gethex+0xfe>
 8008d42:	4252      	negs	r2, r2
 8008d44:	4414      	add	r4, r2
 8008d46:	f8ca 1000 	str.w	r1, [sl]
 8008d4a:	b30d      	cbz	r5, 8008d90 <__gethex+0x14a>
 8008d4c:	f1bb 0f00 	cmp.w	fp, #0
 8008d50:	bf0c      	ite	eq
 8008d52:	2706      	moveq	r7, #6
 8008d54:	2700      	movne	r7, #0
 8008d56:	4638      	mov	r0, r7
 8008d58:	b00b      	add	sp, #44	; 0x2c
 8008d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d5e:	f10b 0b01 	add.w	fp, fp, #1
 8008d62:	e78a      	b.n	8008c7a <__gethex+0x34>
 8008d64:	2500      	movs	r5, #0
 8008d66:	462c      	mov	r4, r5
 8008d68:	e7ae      	b.n	8008cc8 <__gethex+0x82>
 8008d6a:	463e      	mov	r6, r7
 8008d6c:	2501      	movs	r5, #1
 8008d6e:	e7c7      	b.n	8008d00 <__gethex+0xba>
 8008d70:	4604      	mov	r4, r0
 8008d72:	e7fb      	b.n	8008d6c <__gethex+0x126>
 8008d74:	f04f 0900 	mov.w	r9, #0
 8008d78:	1cb1      	adds	r1, r6, #2
 8008d7a:	e7ce      	b.n	8008d1a <__gethex+0xd4>
 8008d7c:	f04f 0901 	mov.w	r9, #1
 8008d80:	e7fa      	b.n	8008d78 <__gethex+0x132>
 8008d82:	230a      	movs	r3, #10
 8008d84:	fb03 0202 	mla	r2, r3, r2, r0
 8008d88:	3a10      	subs	r2, #16
 8008d8a:	e7cf      	b.n	8008d2c <__gethex+0xe6>
 8008d8c:	4631      	mov	r1, r6
 8008d8e:	e7da      	b.n	8008d46 <__gethex+0x100>
 8008d90:	1bf3      	subs	r3, r6, r7
 8008d92:	3b01      	subs	r3, #1
 8008d94:	4629      	mov	r1, r5
 8008d96:	2b07      	cmp	r3, #7
 8008d98:	dc49      	bgt.n	8008e2e <__gethex+0x1e8>
 8008d9a:	9802      	ldr	r0, [sp, #8]
 8008d9c:	f000 fa58 	bl	8009250 <_Balloc>
 8008da0:	9b01      	ldr	r3, [sp, #4]
 8008da2:	f100 0914 	add.w	r9, r0, #20
 8008da6:	f04f 0b00 	mov.w	fp, #0
 8008daa:	f1c3 0301 	rsb	r3, r3, #1
 8008dae:	4605      	mov	r5, r0
 8008db0:	f8cd 9010 	str.w	r9, [sp, #16]
 8008db4:	46da      	mov	sl, fp
 8008db6:	9308      	str	r3, [sp, #32]
 8008db8:	42b7      	cmp	r7, r6
 8008dba:	d33b      	bcc.n	8008e34 <__gethex+0x1ee>
 8008dbc:	9804      	ldr	r0, [sp, #16]
 8008dbe:	f840 ab04 	str.w	sl, [r0], #4
 8008dc2:	eba0 0009 	sub.w	r0, r0, r9
 8008dc6:	1080      	asrs	r0, r0, #2
 8008dc8:	6128      	str	r0, [r5, #16]
 8008dca:	0147      	lsls	r7, r0, #5
 8008dcc:	4650      	mov	r0, sl
 8008dce:	f000 fb03 	bl	80093d8 <__hi0bits>
 8008dd2:	f8d8 6000 	ldr.w	r6, [r8]
 8008dd6:	1a3f      	subs	r7, r7, r0
 8008dd8:	42b7      	cmp	r7, r6
 8008dda:	dd64      	ble.n	8008ea6 <__gethex+0x260>
 8008ddc:	1bbf      	subs	r7, r7, r6
 8008dde:	4639      	mov	r1, r7
 8008de0:	4628      	mov	r0, r5
 8008de2:	f000 fe13 	bl	8009a0c <__any_on>
 8008de6:	4682      	mov	sl, r0
 8008de8:	b178      	cbz	r0, 8008e0a <__gethex+0x1c4>
 8008dea:	1e7b      	subs	r3, r7, #1
 8008dec:	1159      	asrs	r1, r3, #5
 8008dee:	f003 021f 	and.w	r2, r3, #31
 8008df2:	f04f 0a01 	mov.w	sl, #1
 8008df6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008dfa:	fa0a f202 	lsl.w	r2, sl, r2
 8008dfe:	420a      	tst	r2, r1
 8008e00:	d003      	beq.n	8008e0a <__gethex+0x1c4>
 8008e02:	4553      	cmp	r3, sl
 8008e04:	dc46      	bgt.n	8008e94 <__gethex+0x24e>
 8008e06:	f04f 0a02 	mov.w	sl, #2
 8008e0a:	4639      	mov	r1, r7
 8008e0c:	4628      	mov	r0, r5
 8008e0e:	f7ff fecb 	bl	8008ba8 <rshift>
 8008e12:	443c      	add	r4, r7
 8008e14:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008e18:	42a3      	cmp	r3, r4
 8008e1a:	da52      	bge.n	8008ec2 <__gethex+0x27c>
 8008e1c:	4629      	mov	r1, r5
 8008e1e:	9802      	ldr	r0, [sp, #8]
 8008e20:	f000 fa4a 	bl	80092b8 <_Bfree>
 8008e24:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008e26:	2300      	movs	r3, #0
 8008e28:	6013      	str	r3, [r2, #0]
 8008e2a:	27a3      	movs	r7, #163	; 0xa3
 8008e2c:	e793      	b.n	8008d56 <__gethex+0x110>
 8008e2e:	3101      	adds	r1, #1
 8008e30:	105b      	asrs	r3, r3, #1
 8008e32:	e7b0      	b.n	8008d96 <__gethex+0x150>
 8008e34:	1e73      	subs	r3, r6, #1
 8008e36:	9305      	str	r3, [sp, #20]
 8008e38:	9a07      	ldr	r2, [sp, #28]
 8008e3a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d018      	beq.n	8008e74 <__gethex+0x22e>
 8008e42:	f1bb 0f20 	cmp.w	fp, #32
 8008e46:	d107      	bne.n	8008e58 <__gethex+0x212>
 8008e48:	9b04      	ldr	r3, [sp, #16]
 8008e4a:	f8c3 a000 	str.w	sl, [r3]
 8008e4e:	3304      	adds	r3, #4
 8008e50:	f04f 0a00 	mov.w	sl, #0
 8008e54:	9304      	str	r3, [sp, #16]
 8008e56:	46d3      	mov	fp, sl
 8008e58:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008e5c:	f7ff fede 	bl	8008c1c <__hexdig_fun>
 8008e60:	f000 000f 	and.w	r0, r0, #15
 8008e64:	fa00 f00b 	lsl.w	r0, r0, fp
 8008e68:	ea4a 0a00 	orr.w	sl, sl, r0
 8008e6c:	f10b 0b04 	add.w	fp, fp, #4
 8008e70:	9b05      	ldr	r3, [sp, #20]
 8008e72:	e00d      	b.n	8008e90 <__gethex+0x24a>
 8008e74:	9b05      	ldr	r3, [sp, #20]
 8008e76:	9a08      	ldr	r2, [sp, #32]
 8008e78:	4413      	add	r3, r2
 8008e7a:	42bb      	cmp	r3, r7
 8008e7c:	d3e1      	bcc.n	8008e42 <__gethex+0x1fc>
 8008e7e:	4618      	mov	r0, r3
 8008e80:	9a01      	ldr	r2, [sp, #4]
 8008e82:	9903      	ldr	r1, [sp, #12]
 8008e84:	9309      	str	r3, [sp, #36]	; 0x24
 8008e86:	f000 fffb 	bl	8009e80 <strncmp>
 8008e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e8c:	2800      	cmp	r0, #0
 8008e8e:	d1d8      	bne.n	8008e42 <__gethex+0x1fc>
 8008e90:	461e      	mov	r6, r3
 8008e92:	e791      	b.n	8008db8 <__gethex+0x172>
 8008e94:	1eb9      	subs	r1, r7, #2
 8008e96:	4628      	mov	r0, r5
 8008e98:	f000 fdb8 	bl	8009a0c <__any_on>
 8008e9c:	2800      	cmp	r0, #0
 8008e9e:	d0b2      	beq.n	8008e06 <__gethex+0x1c0>
 8008ea0:	f04f 0a03 	mov.w	sl, #3
 8008ea4:	e7b1      	b.n	8008e0a <__gethex+0x1c4>
 8008ea6:	da09      	bge.n	8008ebc <__gethex+0x276>
 8008ea8:	1bf7      	subs	r7, r6, r7
 8008eaa:	4629      	mov	r1, r5
 8008eac:	463a      	mov	r2, r7
 8008eae:	9802      	ldr	r0, [sp, #8]
 8008eb0:	f000 fbce 	bl	8009650 <__lshift>
 8008eb4:	1be4      	subs	r4, r4, r7
 8008eb6:	4605      	mov	r5, r0
 8008eb8:	f100 0914 	add.w	r9, r0, #20
 8008ebc:	f04f 0a00 	mov.w	sl, #0
 8008ec0:	e7a8      	b.n	8008e14 <__gethex+0x1ce>
 8008ec2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008ec6:	42a0      	cmp	r0, r4
 8008ec8:	dd6a      	ble.n	8008fa0 <__gethex+0x35a>
 8008eca:	1b04      	subs	r4, r0, r4
 8008ecc:	42a6      	cmp	r6, r4
 8008ece:	dc2e      	bgt.n	8008f2e <__gethex+0x2e8>
 8008ed0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008ed4:	2b02      	cmp	r3, #2
 8008ed6:	d022      	beq.n	8008f1e <__gethex+0x2d8>
 8008ed8:	2b03      	cmp	r3, #3
 8008eda:	d024      	beq.n	8008f26 <__gethex+0x2e0>
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d115      	bne.n	8008f0c <__gethex+0x2c6>
 8008ee0:	42a6      	cmp	r6, r4
 8008ee2:	d113      	bne.n	8008f0c <__gethex+0x2c6>
 8008ee4:	2e01      	cmp	r6, #1
 8008ee6:	dc0b      	bgt.n	8008f00 <__gethex+0x2ba>
 8008ee8:	9a06      	ldr	r2, [sp, #24]
 8008eea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008eee:	6013      	str	r3, [r2, #0]
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	612b      	str	r3, [r5, #16]
 8008ef4:	f8c9 3000 	str.w	r3, [r9]
 8008ef8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008efa:	2762      	movs	r7, #98	; 0x62
 8008efc:	601d      	str	r5, [r3, #0]
 8008efe:	e72a      	b.n	8008d56 <__gethex+0x110>
 8008f00:	1e71      	subs	r1, r6, #1
 8008f02:	4628      	mov	r0, r5
 8008f04:	f000 fd82 	bl	8009a0c <__any_on>
 8008f08:	2800      	cmp	r0, #0
 8008f0a:	d1ed      	bne.n	8008ee8 <__gethex+0x2a2>
 8008f0c:	4629      	mov	r1, r5
 8008f0e:	9802      	ldr	r0, [sp, #8]
 8008f10:	f000 f9d2 	bl	80092b8 <_Bfree>
 8008f14:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008f16:	2300      	movs	r3, #0
 8008f18:	6013      	str	r3, [r2, #0]
 8008f1a:	2750      	movs	r7, #80	; 0x50
 8008f1c:	e71b      	b.n	8008d56 <__gethex+0x110>
 8008f1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d0e1      	beq.n	8008ee8 <__gethex+0x2a2>
 8008f24:	e7f2      	b.n	8008f0c <__gethex+0x2c6>
 8008f26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d1dd      	bne.n	8008ee8 <__gethex+0x2a2>
 8008f2c:	e7ee      	b.n	8008f0c <__gethex+0x2c6>
 8008f2e:	1e67      	subs	r7, r4, #1
 8008f30:	f1ba 0f00 	cmp.w	sl, #0
 8008f34:	d131      	bne.n	8008f9a <__gethex+0x354>
 8008f36:	b127      	cbz	r7, 8008f42 <__gethex+0x2fc>
 8008f38:	4639      	mov	r1, r7
 8008f3a:	4628      	mov	r0, r5
 8008f3c:	f000 fd66 	bl	8009a0c <__any_on>
 8008f40:	4682      	mov	sl, r0
 8008f42:	117a      	asrs	r2, r7, #5
 8008f44:	2301      	movs	r3, #1
 8008f46:	f007 071f 	and.w	r7, r7, #31
 8008f4a:	fa03 f707 	lsl.w	r7, r3, r7
 8008f4e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8008f52:	4621      	mov	r1, r4
 8008f54:	421f      	tst	r7, r3
 8008f56:	4628      	mov	r0, r5
 8008f58:	bf18      	it	ne
 8008f5a:	f04a 0a02 	orrne.w	sl, sl, #2
 8008f5e:	1b36      	subs	r6, r6, r4
 8008f60:	f7ff fe22 	bl	8008ba8 <rshift>
 8008f64:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8008f68:	2702      	movs	r7, #2
 8008f6a:	f1ba 0f00 	cmp.w	sl, #0
 8008f6e:	d048      	beq.n	8009002 <__gethex+0x3bc>
 8008f70:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008f74:	2b02      	cmp	r3, #2
 8008f76:	d015      	beq.n	8008fa4 <__gethex+0x35e>
 8008f78:	2b03      	cmp	r3, #3
 8008f7a:	d017      	beq.n	8008fac <__gethex+0x366>
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d109      	bne.n	8008f94 <__gethex+0x34e>
 8008f80:	f01a 0f02 	tst.w	sl, #2
 8008f84:	d006      	beq.n	8008f94 <__gethex+0x34e>
 8008f86:	f8d9 3000 	ldr.w	r3, [r9]
 8008f8a:	ea4a 0a03 	orr.w	sl, sl, r3
 8008f8e:	f01a 0f01 	tst.w	sl, #1
 8008f92:	d10e      	bne.n	8008fb2 <__gethex+0x36c>
 8008f94:	f047 0710 	orr.w	r7, r7, #16
 8008f98:	e033      	b.n	8009002 <__gethex+0x3bc>
 8008f9a:	f04f 0a01 	mov.w	sl, #1
 8008f9e:	e7d0      	b.n	8008f42 <__gethex+0x2fc>
 8008fa0:	2701      	movs	r7, #1
 8008fa2:	e7e2      	b.n	8008f6a <__gethex+0x324>
 8008fa4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008fa6:	f1c3 0301 	rsb	r3, r3, #1
 8008faa:	9315      	str	r3, [sp, #84]	; 0x54
 8008fac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d0f0      	beq.n	8008f94 <__gethex+0x34e>
 8008fb2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8008fb6:	f105 0314 	add.w	r3, r5, #20
 8008fba:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8008fbe:	eb03 010a 	add.w	r1, r3, sl
 8008fc2:	f04f 0c00 	mov.w	ip, #0
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fcc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008fd0:	d01c      	beq.n	800900c <__gethex+0x3c6>
 8008fd2:	3201      	adds	r2, #1
 8008fd4:	6002      	str	r2, [r0, #0]
 8008fd6:	2f02      	cmp	r7, #2
 8008fd8:	f105 0314 	add.w	r3, r5, #20
 8008fdc:	d138      	bne.n	8009050 <__gethex+0x40a>
 8008fde:	f8d8 2000 	ldr.w	r2, [r8]
 8008fe2:	3a01      	subs	r2, #1
 8008fe4:	42b2      	cmp	r2, r6
 8008fe6:	d10a      	bne.n	8008ffe <__gethex+0x3b8>
 8008fe8:	1171      	asrs	r1, r6, #5
 8008fea:	2201      	movs	r2, #1
 8008fec:	f006 061f 	and.w	r6, r6, #31
 8008ff0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008ff4:	fa02 f606 	lsl.w	r6, r2, r6
 8008ff8:	421e      	tst	r6, r3
 8008ffa:	bf18      	it	ne
 8008ffc:	4617      	movne	r7, r2
 8008ffe:	f047 0720 	orr.w	r7, r7, #32
 8009002:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009004:	601d      	str	r5, [r3, #0]
 8009006:	9b06      	ldr	r3, [sp, #24]
 8009008:	601c      	str	r4, [r3, #0]
 800900a:	e6a4      	b.n	8008d56 <__gethex+0x110>
 800900c:	4299      	cmp	r1, r3
 800900e:	f843 cc04 	str.w	ip, [r3, #-4]
 8009012:	d8d8      	bhi.n	8008fc6 <__gethex+0x380>
 8009014:	68ab      	ldr	r3, [r5, #8]
 8009016:	4599      	cmp	r9, r3
 8009018:	db12      	blt.n	8009040 <__gethex+0x3fa>
 800901a:	6869      	ldr	r1, [r5, #4]
 800901c:	9802      	ldr	r0, [sp, #8]
 800901e:	3101      	adds	r1, #1
 8009020:	f000 f916 	bl	8009250 <_Balloc>
 8009024:	692a      	ldr	r2, [r5, #16]
 8009026:	3202      	adds	r2, #2
 8009028:	f105 010c 	add.w	r1, r5, #12
 800902c:	4683      	mov	fp, r0
 800902e:	0092      	lsls	r2, r2, #2
 8009030:	300c      	adds	r0, #12
 8009032:	f7fd fa35 	bl	80064a0 <memcpy>
 8009036:	4629      	mov	r1, r5
 8009038:	9802      	ldr	r0, [sp, #8]
 800903a:	f000 f93d 	bl	80092b8 <_Bfree>
 800903e:	465d      	mov	r5, fp
 8009040:	692b      	ldr	r3, [r5, #16]
 8009042:	1c5a      	adds	r2, r3, #1
 8009044:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009048:	612a      	str	r2, [r5, #16]
 800904a:	2201      	movs	r2, #1
 800904c:	615a      	str	r2, [r3, #20]
 800904e:	e7c2      	b.n	8008fd6 <__gethex+0x390>
 8009050:	692a      	ldr	r2, [r5, #16]
 8009052:	454a      	cmp	r2, r9
 8009054:	dd0b      	ble.n	800906e <__gethex+0x428>
 8009056:	2101      	movs	r1, #1
 8009058:	4628      	mov	r0, r5
 800905a:	f7ff fda5 	bl	8008ba8 <rshift>
 800905e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009062:	3401      	adds	r4, #1
 8009064:	42a3      	cmp	r3, r4
 8009066:	f6ff aed9 	blt.w	8008e1c <__gethex+0x1d6>
 800906a:	2701      	movs	r7, #1
 800906c:	e7c7      	b.n	8008ffe <__gethex+0x3b8>
 800906e:	f016 061f 	ands.w	r6, r6, #31
 8009072:	d0fa      	beq.n	800906a <__gethex+0x424>
 8009074:	449a      	add	sl, r3
 8009076:	f1c6 0620 	rsb	r6, r6, #32
 800907a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800907e:	f000 f9ab 	bl	80093d8 <__hi0bits>
 8009082:	42b0      	cmp	r0, r6
 8009084:	dbe7      	blt.n	8009056 <__gethex+0x410>
 8009086:	e7f0      	b.n	800906a <__gethex+0x424>

08009088 <L_shift>:
 8009088:	f1c2 0208 	rsb	r2, r2, #8
 800908c:	0092      	lsls	r2, r2, #2
 800908e:	b570      	push	{r4, r5, r6, lr}
 8009090:	f1c2 0620 	rsb	r6, r2, #32
 8009094:	6843      	ldr	r3, [r0, #4]
 8009096:	6804      	ldr	r4, [r0, #0]
 8009098:	fa03 f506 	lsl.w	r5, r3, r6
 800909c:	432c      	orrs	r4, r5
 800909e:	40d3      	lsrs	r3, r2
 80090a0:	6004      	str	r4, [r0, #0]
 80090a2:	f840 3f04 	str.w	r3, [r0, #4]!
 80090a6:	4288      	cmp	r0, r1
 80090a8:	d3f4      	bcc.n	8009094 <L_shift+0xc>
 80090aa:	bd70      	pop	{r4, r5, r6, pc}

080090ac <__match>:
 80090ac:	b530      	push	{r4, r5, lr}
 80090ae:	6803      	ldr	r3, [r0, #0]
 80090b0:	3301      	adds	r3, #1
 80090b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090b6:	b914      	cbnz	r4, 80090be <__match+0x12>
 80090b8:	6003      	str	r3, [r0, #0]
 80090ba:	2001      	movs	r0, #1
 80090bc:	bd30      	pop	{r4, r5, pc}
 80090be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80090c6:	2d19      	cmp	r5, #25
 80090c8:	bf98      	it	ls
 80090ca:	3220      	addls	r2, #32
 80090cc:	42a2      	cmp	r2, r4
 80090ce:	d0f0      	beq.n	80090b2 <__match+0x6>
 80090d0:	2000      	movs	r0, #0
 80090d2:	e7f3      	b.n	80090bc <__match+0x10>

080090d4 <__hexnan>:
 80090d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090d8:	680b      	ldr	r3, [r1, #0]
 80090da:	6801      	ldr	r1, [r0, #0]
 80090dc:	115f      	asrs	r7, r3, #5
 80090de:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80090e2:	f013 031f 	ands.w	r3, r3, #31
 80090e6:	b087      	sub	sp, #28
 80090e8:	bf18      	it	ne
 80090ea:	3704      	addne	r7, #4
 80090ec:	2500      	movs	r5, #0
 80090ee:	1f3e      	subs	r6, r7, #4
 80090f0:	4682      	mov	sl, r0
 80090f2:	4690      	mov	r8, r2
 80090f4:	9301      	str	r3, [sp, #4]
 80090f6:	f847 5c04 	str.w	r5, [r7, #-4]
 80090fa:	46b1      	mov	r9, r6
 80090fc:	4634      	mov	r4, r6
 80090fe:	9502      	str	r5, [sp, #8]
 8009100:	46ab      	mov	fp, r5
 8009102:	784a      	ldrb	r2, [r1, #1]
 8009104:	1c4b      	adds	r3, r1, #1
 8009106:	9303      	str	r3, [sp, #12]
 8009108:	b342      	cbz	r2, 800915c <__hexnan+0x88>
 800910a:	4610      	mov	r0, r2
 800910c:	9105      	str	r1, [sp, #20]
 800910e:	9204      	str	r2, [sp, #16]
 8009110:	f7ff fd84 	bl	8008c1c <__hexdig_fun>
 8009114:	2800      	cmp	r0, #0
 8009116:	d143      	bne.n	80091a0 <__hexnan+0xcc>
 8009118:	9a04      	ldr	r2, [sp, #16]
 800911a:	9905      	ldr	r1, [sp, #20]
 800911c:	2a20      	cmp	r2, #32
 800911e:	d818      	bhi.n	8009152 <__hexnan+0x7e>
 8009120:	9b02      	ldr	r3, [sp, #8]
 8009122:	459b      	cmp	fp, r3
 8009124:	dd13      	ble.n	800914e <__hexnan+0x7a>
 8009126:	454c      	cmp	r4, r9
 8009128:	d206      	bcs.n	8009138 <__hexnan+0x64>
 800912a:	2d07      	cmp	r5, #7
 800912c:	dc04      	bgt.n	8009138 <__hexnan+0x64>
 800912e:	462a      	mov	r2, r5
 8009130:	4649      	mov	r1, r9
 8009132:	4620      	mov	r0, r4
 8009134:	f7ff ffa8 	bl	8009088 <L_shift>
 8009138:	4544      	cmp	r4, r8
 800913a:	d944      	bls.n	80091c6 <__hexnan+0xf2>
 800913c:	2300      	movs	r3, #0
 800913e:	f1a4 0904 	sub.w	r9, r4, #4
 8009142:	f844 3c04 	str.w	r3, [r4, #-4]
 8009146:	f8cd b008 	str.w	fp, [sp, #8]
 800914a:	464c      	mov	r4, r9
 800914c:	461d      	mov	r5, r3
 800914e:	9903      	ldr	r1, [sp, #12]
 8009150:	e7d7      	b.n	8009102 <__hexnan+0x2e>
 8009152:	2a29      	cmp	r2, #41	; 0x29
 8009154:	d14a      	bne.n	80091ec <__hexnan+0x118>
 8009156:	3102      	adds	r1, #2
 8009158:	f8ca 1000 	str.w	r1, [sl]
 800915c:	f1bb 0f00 	cmp.w	fp, #0
 8009160:	d044      	beq.n	80091ec <__hexnan+0x118>
 8009162:	454c      	cmp	r4, r9
 8009164:	d206      	bcs.n	8009174 <__hexnan+0xa0>
 8009166:	2d07      	cmp	r5, #7
 8009168:	dc04      	bgt.n	8009174 <__hexnan+0xa0>
 800916a:	462a      	mov	r2, r5
 800916c:	4649      	mov	r1, r9
 800916e:	4620      	mov	r0, r4
 8009170:	f7ff ff8a 	bl	8009088 <L_shift>
 8009174:	4544      	cmp	r4, r8
 8009176:	d928      	bls.n	80091ca <__hexnan+0xf6>
 8009178:	4643      	mov	r3, r8
 800917a:	f854 2b04 	ldr.w	r2, [r4], #4
 800917e:	f843 2b04 	str.w	r2, [r3], #4
 8009182:	42a6      	cmp	r6, r4
 8009184:	d2f9      	bcs.n	800917a <__hexnan+0xa6>
 8009186:	2200      	movs	r2, #0
 8009188:	f843 2b04 	str.w	r2, [r3], #4
 800918c:	429e      	cmp	r6, r3
 800918e:	d2fb      	bcs.n	8009188 <__hexnan+0xb4>
 8009190:	6833      	ldr	r3, [r6, #0]
 8009192:	b91b      	cbnz	r3, 800919c <__hexnan+0xc8>
 8009194:	4546      	cmp	r6, r8
 8009196:	d127      	bne.n	80091e8 <__hexnan+0x114>
 8009198:	2301      	movs	r3, #1
 800919a:	6033      	str	r3, [r6, #0]
 800919c:	2005      	movs	r0, #5
 800919e:	e026      	b.n	80091ee <__hexnan+0x11a>
 80091a0:	3501      	adds	r5, #1
 80091a2:	2d08      	cmp	r5, #8
 80091a4:	f10b 0b01 	add.w	fp, fp, #1
 80091a8:	dd06      	ble.n	80091b8 <__hexnan+0xe4>
 80091aa:	4544      	cmp	r4, r8
 80091ac:	d9cf      	bls.n	800914e <__hexnan+0x7a>
 80091ae:	2300      	movs	r3, #0
 80091b0:	f844 3c04 	str.w	r3, [r4, #-4]
 80091b4:	2501      	movs	r5, #1
 80091b6:	3c04      	subs	r4, #4
 80091b8:	6822      	ldr	r2, [r4, #0]
 80091ba:	f000 000f 	and.w	r0, r0, #15
 80091be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80091c2:	6020      	str	r0, [r4, #0]
 80091c4:	e7c3      	b.n	800914e <__hexnan+0x7a>
 80091c6:	2508      	movs	r5, #8
 80091c8:	e7c1      	b.n	800914e <__hexnan+0x7a>
 80091ca:	9b01      	ldr	r3, [sp, #4]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d0df      	beq.n	8009190 <__hexnan+0xbc>
 80091d0:	f04f 32ff 	mov.w	r2, #4294967295
 80091d4:	f1c3 0320 	rsb	r3, r3, #32
 80091d8:	fa22 f303 	lsr.w	r3, r2, r3
 80091dc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80091e0:	401a      	ands	r2, r3
 80091e2:	f847 2c04 	str.w	r2, [r7, #-4]
 80091e6:	e7d3      	b.n	8009190 <__hexnan+0xbc>
 80091e8:	3e04      	subs	r6, #4
 80091ea:	e7d1      	b.n	8009190 <__hexnan+0xbc>
 80091ec:	2004      	movs	r0, #4
 80091ee:	b007      	add	sp, #28
 80091f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080091f4 <__locale_ctype_ptr_l>:
 80091f4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80091f8:	4770      	bx	lr

080091fa <__localeconv_l>:
 80091fa:	30f0      	adds	r0, #240	; 0xf0
 80091fc:	4770      	bx	lr
	...

08009200 <_localeconv_r>:
 8009200:	4b04      	ldr	r3, [pc, #16]	; (8009214 <_localeconv_r+0x14>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	6a18      	ldr	r0, [r3, #32]
 8009206:	4b04      	ldr	r3, [pc, #16]	; (8009218 <_localeconv_r+0x18>)
 8009208:	2800      	cmp	r0, #0
 800920a:	bf08      	it	eq
 800920c:	4618      	moveq	r0, r3
 800920e:	30f0      	adds	r0, #240	; 0xf0
 8009210:	4770      	bx	lr
 8009212:	bf00      	nop
 8009214:	20000048 	.word	0x20000048
 8009218:	200000ac 	.word	0x200000ac

0800921c <malloc>:
 800921c:	4b02      	ldr	r3, [pc, #8]	; (8009228 <malloc+0xc>)
 800921e:	4601      	mov	r1, r0
 8009220:	6818      	ldr	r0, [r3, #0]
 8009222:	f000 bc71 	b.w	8009b08 <_malloc_r>
 8009226:	bf00      	nop
 8009228:	20000048 	.word	0x20000048

0800922c <__ascii_mbtowc>:
 800922c:	b082      	sub	sp, #8
 800922e:	b901      	cbnz	r1, 8009232 <__ascii_mbtowc+0x6>
 8009230:	a901      	add	r1, sp, #4
 8009232:	b142      	cbz	r2, 8009246 <__ascii_mbtowc+0x1a>
 8009234:	b14b      	cbz	r3, 800924a <__ascii_mbtowc+0x1e>
 8009236:	7813      	ldrb	r3, [r2, #0]
 8009238:	600b      	str	r3, [r1, #0]
 800923a:	7812      	ldrb	r2, [r2, #0]
 800923c:	1c10      	adds	r0, r2, #0
 800923e:	bf18      	it	ne
 8009240:	2001      	movne	r0, #1
 8009242:	b002      	add	sp, #8
 8009244:	4770      	bx	lr
 8009246:	4610      	mov	r0, r2
 8009248:	e7fb      	b.n	8009242 <__ascii_mbtowc+0x16>
 800924a:	f06f 0001 	mvn.w	r0, #1
 800924e:	e7f8      	b.n	8009242 <__ascii_mbtowc+0x16>

08009250 <_Balloc>:
 8009250:	b570      	push	{r4, r5, r6, lr}
 8009252:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009254:	4604      	mov	r4, r0
 8009256:	460e      	mov	r6, r1
 8009258:	b93d      	cbnz	r5, 800926a <_Balloc+0x1a>
 800925a:	2010      	movs	r0, #16
 800925c:	f7ff ffde 	bl	800921c <malloc>
 8009260:	6260      	str	r0, [r4, #36]	; 0x24
 8009262:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009266:	6005      	str	r5, [r0, #0]
 8009268:	60c5      	str	r5, [r0, #12]
 800926a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800926c:	68eb      	ldr	r3, [r5, #12]
 800926e:	b183      	cbz	r3, 8009292 <_Balloc+0x42>
 8009270:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009278:	b9b8      	cbnz	r0, 80092aa <_Balloc+0x5a>
 800927a:	2101      	movs	r1, #1
 800927c:	fa01 f506 	lsl.w	r5, r1, r6
 8009280:	1d6a      	adds	r2, r5, #5
 8009282:	0092      	lsls	r2, r2, #2
 8009284:	4620      	mov	r0, r4
 8009286:	f000 fbe2 	bl	8009a4e <_calloc_r>
 800928a:	b160      	cbz	r0, 80092a6 <_Balloc+0x56>
 800928c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009290:	e00e      	b.n	80092b0 <_Balloc+0x60>
 8009292:	2221      	movs	r2, #33	; 0x21
 8009294:	2104      	movs	r1, #4
 8009296:	4620      	mov	r0, r4
 8009298:	f000 fbd9 	bl	8009a4e <_calloc_r>
 800929c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800929e:	60e8      	str	r0, [r5, #12]
 80092a0:	68db      	ldr	r3, [r3, #12]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d1e4      	bne.n	8009270 <_Balloc+0x20>
 80092a6:	2000      	movs	r0, #0
 80092a8:	bd70      	pop	{r4, r5, r6, pc}
 80092aa:	6802      	ldr	r2, [r0, #0]
 80092ac:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80092b0:	2300      	movs	r3, #0
 80092b2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80092b6:	e7f7      	b.n	80092a8 <_Balloc+0x58>

080092b8 <_Bfree>:
 80092b8:	b570      	push	{r4, r5, r6, lr}
 80092ba:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80092bc:	4606      	mov	r6, r0
 80092be:	460d      	mov	r5, r1
 80092c0:	b93c      	cbnz	r4, 80092d2 <_Bfree+0x1a>
 80092c2:	2010      	movs	r0, #16
 80092c4:	f7ff ffaa 	bl	800921c <malloc>
 80092c8:	6270      	str	r0, [r6, #36]	; 0x24
 80092ca:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80092ce:	6004      	str	r4, [r0, #0]
 80092d0:	60c4      	str	r4, [r0, #12]
 80092d2:	b13d      	cbz	r5, 80092e4 <_Bfree+0x2c>
 80092d4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80092d6:	686a      	ldr	r2, [r5, #4]
 80092d8:	68db      	ldr	r3, [r3, #12]
 80092da:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80092de:	6029      	str	r1, [r5, #0]
 80092e0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80092e4:	bd70      	pop	{r4, r5, r6, pc}

080092e6 <__multadd>:
 80092e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092ea:	690d      	ldr	r5, [r1, #16]
 80092ec:	461f      	mov	r7, r3
 80092ee:	4606      	mov	r6, r0
 80092f0:	460c      	mov	r4, r1
 80092f2:	f101 0c14 	add.w	ip, r1, #20
 80092f6:	2300      	movs	r3, #0
 80092f8:	f8dc 0000 	ldr.w	r0, [ip]
 80092fc:	b281      	uxth	r1, r0
 80092fe:	fb02 7101 	mla	r1, r2, r1, r7
 8009302:	0c0f      	lsrs	r7, r1, #16
 8009304:	0c00      	lsrs	r0, r0, #16
 8009306:	fb02 7000 	mla	r0, r2, r0, r7
 800930a:	b289      	uxth	r1, r1
 800930c:	3301      	adds	r3, #1
 800930e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009312:	429d      	cmp	r5, r3
 8009314:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009318:	f84c 1b04 	str.w	r1, [ip], #4
 800931c:	dcec      	bgt.n	80092f8 <__multadd+0x12>
 800931e:	b1d7      	cbz	r7, 8009356 <__multadd+0x70>
 8009320:	68a3      	ldr	r3, [r4, #8]
 8009322:	42ab      	cmp	r3, r5
 8009324:	dc12      	bgt.n	800934c <__multadd+0x66>
 8009326:	6861      	ldr	r1, [r4, #4]
 8009328:	4630      	mov	r0, r6
 800932a:	3101      	adds	r1, #1
 800932c:	f7ff ff90 	bl	8009250 <_Balloc>
 8009330:	6922      	ldr	r2, [r4, #16]
 8009332:	3202      	adds	r2, #2
 8009334:	f104 010c 	add.w	r1, r4, #12
 8009338:	4680      	mov	r8, r0
 800933a:	0092      	lsls	r2, r2, #2
 800933c:	300c      	adds	r0, #12
 800933e:	f7fd f8af 	bl	80064a0 <memcpy>
 8009342:	4621      	mov	r1, r4
 8009344:	4630      	mov	r0, r6
 8009346:	f7ff ffb7 	bl	80092b8 <_Bfree>
 800934a:	4644      	mov	r4, r8
 800934c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009350:	3501      	adds	r5, #1
 8009352:	615f      	str	r7, [r3, #20]
 8009354:	6125      	str	r5, [r4, #16]
 8009356:	4620      	mov	r0, r4
 8009358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800935c <__s2b>:
 800935c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009360:	460c      	mov	r4, r1
 8009362:	4615      	mov	r5, r2
 8009364:	461f      	mov	r7, r3
 8009366:	2209      	movs	r2, #9
 8009368:	3308      	adds	r3, #8
 800936a:	4606      	mov	r6, r0
 800936c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009370:	2100      	movs	r1, #0
 8009372:	2201      	movs	r2, #1
 8009374:	429a      	cmp	r2, r3
 8009376:	db20      	blt.n	80093ba <__s2b+0x5e>
 8009378:	4630      	mov	r0, r6
 800937a:	f7ff ff69 	bl	8009250 <_Balloc>
 800937e:	9b08      	ldr	r3, [sp, #32]
 8009380:	6143      	str	r3, [r0, #20]
 8009382:	2d09      	cmp	r5, #9
 8009384:	f04f 0301 	mov.w	r3, #1
 8009388:	6103      	str	r3, [r0, #16]
 800938a:	dd19      	ble.n	80093c0 <__s2b+0x64>
 800938c:	f104 0809 	add.w	r8, r4, #9
 8009390:	46c1      	mov	r9, r8
 8009392:	442c      	add	r4, r5
 8009394:	f819 3b01 	ldrb.w	r3, [r9], #1
 8009398:	4601      	mov	r1, r0
 800939a:	3b30      	subs	r3, #48	; 0x30
 800939c:	220a      	movs	r2, #10
 800939e:	4630      	mov	r0, r6
 80093a0:	f7ff ffa1 	bl	80092e6 <__multadd>
 80093a4:	45a1      	cmp	r9, r4
 80093a6:	d1f5      	bne.n	8009394 <__s2b+0x38>
 80093a8:	eb08 0405 	add.w	r4, r8, r5
 80093ac:	3c08      	subs	r4, #8
 80093ae:	1b2d      	subs	r5, r5, r4
 80093b0:	1963      	adds	r3, r4, r5
 80093b2:	42bb      	cmp	r3, r7
 80093b4:	db07      	blt.n	80093c6 <__s2b+0x6a>
 80093b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093ba:	0052      	lsls	r2, r2, #1
 80093bc:	3101      	adds	r1, #1
 80093be:	e7d9      	b.n	8009374 <__s2b+0x18>
 80093c0:	340a      	adds	r4, #10
 80093c2:	2509      	movs	r5, #9
 80093c4:	e7f3      	b.n	80093ae <__s2b+0x52>
 80093c6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80093ca:	4601      	mov	r1, r0
 80093cc:	3b30      	subs	r3, #48	; 0x30
 80093ce:	220a      	movs	r2, #10
 80093d0:	4630      	mov	r0, r6
 80093d2:	f7ff ff88 	bl	80092e6 <__multadd>
 80093d6:	e7eb      	b.n	80093b0 <__s2b+0x54>

080093d8 <__hi0bits>:
 80093d8:	0c02      	lsrs	r2, r0, #16
 80093da:	0412      	lsls	r2, r2, #16
 80093dc:	4603      	mov	r3, r0
 80093de:	b9b2      	cbnz	r2, 800940e <__hi0bits+0x36>
 80093e0:	0403      	lsls	r3, r0, #16
 80093e2:	2010      	movs	r0, #16
 80093e4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80093e8:	bf04      	itt	eq
 80093ea:	021b      	lsleq	r3, r3, #8
 80093ec:	3008      	addeq	r0, #8
 80093ee:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80093f2:	bf04      	itt	eq
 80093f4:	011b      	lsleq	r3, r3, #4
 80093f6:	3004      	addeq	r0, #4
 80093f8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80093fc:	bf04      	itt	eq
 80093fe:	009b      	lsleq	r3, r3, #2
 8009400:	3002      	addeq	r0, #2
 8009402:	2b00      	cmp	r3, #0
 8009404:	db06      	blt.n	8009414 <__hi0bits+0x3c>
 8009406:	005b      	lsls	r3, r3, #1
 8009408:	d503      	bpl.n	8009412 <__hi0bits+0x3a>
 800940a:	3001      	adds	r0, #1
 800940c:	4770      	bx	lr
 800940e:	2000      	movs	r0, #0
 8009410:	e7e8      	b.n	80093e4 <__hi0bits+0xc>
 8009412:	2020      	movs	r0, #32
 8009414:	4770      	bx	lr

08009416 <__lo0bits>:
 8009416:	6803      	ldr	r3, [r0, #0]
 8009418:	f013 0207 	ands.w	r2, r3, #7
 800941c:	4601      	mov	r1, r0
 800941e:	d00b      	beq.n	8009438 <__lo0bits+0x22>
 8009420:	07da      	lsls	r2, r3, #31
 8009422:	d423      	bmi.n	800946c <__lo0bits+0x56>
 8009424:	0798      	lsls	r0, r3, #30
 8009426:	bf49      	itett	mi
 8009428:	085b      	lsrmi	r3, r3, #1
 800942a:	089b      	lsrpl	r3, r3, #2
 800942c:	2001      	movmi	r0, #1
 800942e:	600b      	strmi	r3, [r1, #0]
 8009430:	bf5c      	itt	pl
 8009432:	600b      	strpl	r3, [r1, #0]
 8009434:	2002      	movpl	r0, #2
 8009436:	4770      	bx	lr
 8009438:	b298      	uxth	r0, r3
 800943a:	b9a8      	cbnz	r0, 8009468 <__lo0bits+0x52>
 800943c:	0c1b      	lsrs	r3, r3, #16
 800943e:	2010      	movs	r0, #16
 8009440:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009444:	bf04      	itt	eq
 8009446:	0a1b      	lsreq	r3, r3, #8
 8009448:	3008      	addeq	r0, #8
 800944a:	071a      	lsls	r2, r3, #28
 800944c:	bf04      	itt	eq
 800944e:	091b      	lsreq	r3, r3, #4
 8009450:	3004      	addeq	r0, #4
 8009452:	079a      	lsls	r2, r3, #30
 8009454:	bf04      	itt	eq
 8009456:	089b      	lsreq	r3, r3, #2
 8009458:	3002      	addeq	r0, #2
 800945a:	07da      	lsls	r2, r3, #31
 800945c:	d402      	bmi.n	8009464 <__lo0bits+0x4e>
 800945e:	085b      	lsrs	r3, r3, #1
 8009460:	d006      	beq.n	8009470 <__lo0bits+0x5a>
 8009462:	3001      	adds	r0, #1
 8009464:	600b      	str	r3, [r1, #0]
 8009466:	4770      	bx	lr
 8009468:	4610      	mov	r0, r2
 800946a:	e7e9      	b.n	8009440 <__lo0bits+0x2a>
 800946c:	2000      	movs	r0, #0
 800946e:	4770      	bx	lr
 8009470:	2020      	movs	r0, #32
 8009472:	4770      	bx	lr

08009474 <__i2b>:
 8009474:	b510      	push	{r4, lr}
 8009476:	460c      	mov	r4, r1
 8009478:	2101      	movs	r1, #1
 800947a:	f7ff fee9 	bl	8009250 <_Balloc>
 800947e:	2201      	movs	r2, #1
 8009480:	6144      	str	r4, [r0, #20]
 8009482:	6102      	str	r2, [r0, #16]
 8009484:	bd10      	pop	{r4, pc}

08009486 <__multiply>:
 8009486:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800948a:	4614      	mov	r4, r2
 800948c:	690a      	ldr	r2, [r1, #16]
 800948e:	6923      	ldr	r3, [r4, #16]
 8009490:	429a      	cmp	r2, r3
 8009492:	bfb8      	it	lt
 8009494:	460b      	movlt	r3, r1
 8009496:	4688      	mov	r8, r1
 8009498:	bfbc      	itt	lt
 800949a:	46a0      	movlt	r8, r4
 800949c:	461c      	movlt	r4, r3
 800949e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80094a2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80094a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80094aa:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80094ae:	eb07 0609 	add.w	r6, r7, r9
 80094b2:	42b3      	cmp	r3, r6
 80094b4:	bfb8      	it	lt
 80094b6:	3101      	addlt	r1, #1
 80094b8:	f7ff feca 	bl	8009250 <_Balloc>
 80094bc:	f100 0514 	add.w	r5, r0, #20
 80094c0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80094c4:	462b      	mov	r3, r5
 80094c6:	2200      	movs	r2, #0
 80094c8:	4573      	cmp	r3, lr
 80094ca:	d316      	bcc.n	80094fa <__multiply+0x74>
 80094cc:	f104 0214 	add.w	r2, r4, #20
 80094d0:	f108 0114 	add.w	r1, r8, #20
 80094d4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80094d8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80094dc:	9300      	str	r3, [sp, #0]
 80094de:	9b00      	ldr	r3, [sp, #0]
 80094e0:	9201      	str	r2, [sp, #4]
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d80c      	bhi.n	8009500 <__multiply+0x7a>
 80094e6:	2e00      	cmp	r6, #0
 80094e8:	dd03      	ble.n	80094f2 <__multiply+0x6c>
 80094ea:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d05d      	beq.n	80095ae <__multiply+0x128>
 80094f2:	6106      	str	r6, [r0, #16]
 80094f4:	b003      	add	sp, #12
 80094f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094fa:	f843 2b04 	str.w	r2, [r3], #4
 80094fe:	e7e3      	b.n	80094c8 <__multiply+0x42>
 8009500:	f8b2 b000 	ldrh.w	fp, [r2]
 8009504:	f1bb 0f00 	cmp.w	fp, #0
 8009508:	d023      	beq.n	8009552 <__multiply+0xcc>
 800950a:	4689      	mov	r9, r1
 800950c:	46ac      	mov	ip, r5
 800950e:	f04f 0800 	mov.w	r8, #0
 8009512:	f859 4b04 	ldr.w	r4, [r9], #4
 8009516:	f8dc a000 	ldr.w	sl, [ip]
 800951a:	b2a3      	uxth	r3, r4
 800951c:	fa1f fa8a 	uxth.w	sl, sl
 8009520:	fb0b a303 	mla	r3, fp, r3, sl
 8009524:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009528:	f8dc 4000 	ldr.w	r4, [ip]
 800952c:	4443      	add	r3, r8
 800952e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009532:	fb0b 840a 	mla	r4, fp, sl, r8
 8009536:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800953a:	46e2      	mov	sl, ip
 800953c:	b29b      	uxth	r3, r3
 800953e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009542:	454f      	cmp	r7, r9
 8009544:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009548:	f84a 3b04 	str.w	r3, [sl], #4
 800954c:	d82b      	bhi.n	80095a6 <__multiply+0x120>
 800954e:	f8cc 8004 	str.w	r8, [ip, #4]
 8009552:	9b01      	ldr	r3, [sp, #4]
 8009554:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009558:	3204      	adds	r2, #4
 800955a:	f1ba 0f00 	cmp.w	sl, #0
 800955e:	d020      	beq.n	80095a2 <__multiply+0x11c>
 8009560:	682b      	ldr	r3, [r5, #0]
 8009562:	4689      	mov	r9, r1
 8009564:	46a8      	mov	r8, r5
 8009566:	f04f 0b00 	mov.w	fp, #0
 800956a:	f8b9 c000 	ldrh.w	ip, [r9]
 800956e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009572:	fb0a 440c 	mla	r4, sl, ip, r4
 8009576:	445c      	add	r4, fp
 8009578:	46c4      	mov	ip, r8
 800957a:	b29b      	uxth	r3, r3
 800957c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009580:	f84c 3b04 	str.w	r3, [ip], #4
 8009584:	f859 3b04 	ldr.w	r3, [r9], #4
 8009588:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800958c:	0c1b      	lsrs	r3, r3, #16
 800958e:	fb0a b303 	mla	r3, sl, r3, fp
 8009592:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009596:	454f      	cmp	r7, r9
 8009598:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800959c:	d805      	bhi.n	80095aa <__multiply+0x124>
 800959e:	f8c8 3004 	str.w	r3, [r8, #4]
 80095a2:	3504      	adds	r5, #4
 80095a4:	e79b      	b.n	80094de <__multiply+0x58>
 80095a6:	46d4      	mov	ip, sl
 80095a8:	e7b3      	b.n	8009512 <__multiply+0x8c>
 80095aa:	46e0      	mov	r8, ip
 80095ac:	e7dd      	b.n	800956a <__multiply+0xe4>
 80095ae:	3e01      	subs	r6, #1
 80095b0:	e799      	b.n	80094e6 <__multiply+0x60>
	...

080095b4 <__pow5mult>:
 80095b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095b8:	4615      	mov	r5, r2
 80095ba:	f012 0203 	ands.w	r2, r2, #3
 80095be:	4606      	mov	r6, r0
 80095c0:	460f      	mov	r7, r1
 80095c2:	d007      	beq.n	80095d4 <__pow5mult+0x20>
 80095c4:	3a01      	subs	r2, #1
 80095c6:	4c21      	ldr	r4, [pc, #132]	; (800964c <__pow5mult+0x98>)
 80095c8:	2300      	movs	r3, #0
 80095ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80095ce:	f7ff fe8a 	bl	80092e6 <__multadd>
 80095d2:	4607      	mov	r7, r0
 80095d4:	10ad      	asrs	r5, r5, #2
 80095d6:	d035      	beq.n	8009644 <__pow5mult+0x90>
 80095d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80095da:	b93c      	cbnz	r4, 80095ec <__pow5mult+0x38>
 80095dc:	2010      	movs	r0, #16
 80095de:	f7ff fe1d 	bl	800921c <malloc>
 80095e2:	6270      	str	r0, [r6, #36]	; 0x24
 80095e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80095e8:	6004      	str	r4, [r0, #0]
 80095ea:	60c4      	str	r4, [r0, #12]
 80095ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80095f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80095f4:	b94c      	cbnz	r4, 800960a <__pow5mult+0x56>
 80095f6:	f240 2171 	movw	r1, #625	; 0x271
 80095fa:	4630      	mov	r0, r6
 80095fc:	f7ff ff3a 	bl	8009474 <__i2b>
 8009600:	2300      	movs	r3, #0
 8009602:	f8c8 0008 	str.w	r0, [r8, #8]
 8009606:	4604      	mov	r4, r0
 8009608:	6003      	str	r3, [r0, #0]
 800960a:	f04f 0800 	mov.w	r8, #0
 800960e:	07eb      	lsls	r3, r5, #31
 8009610:	d50a      	bpl.n	8009628 <__pow5mult+0x74>
 8009612:	4639      	mov	r1, r7
 8009614:	4622      	mov	r2, r4
 8009616:	4630      	mov	r0, r6
 8009618:	f7ff ff35 	bl	8009486 <__multiply>
 800961c:	4639      	mov	r1, r7
 800961e:	4681      	mov	r9, r0
 8009620:	4630      	mov	r0, r6
 8009622:	f7ff fe49 	bl	80092b8 <_Bfree>
 8009626:	464f      	mov	r7, r9
 8009628:	106d      	asrs	r5, r5, #1
 800962a:	d00b      	beq.n	8009644 <__pow5mult+0x90>
 800962c:	6820      	ldr	r0, [r4, #0]
 800962e:	b938      	cbnz	r0, 8009640 <__pow5mult+0x8c>
 8009630:	4622      	mov	r2, r4
 8009632:	4621      	mov	r1, r4
 8009634:	4630      	mov	r0, r6
 8009636:	f7ff ff26 	bl	8009486 <__multiply>
 800963a:	6020      	str	r0, [r4, #0]
 800963c:	f8c0 8000 	str.w	r8, [r0]
 8009640:	4604      	mov	r4, r0
 8009642:	e7e4      	b.n	800960e <__pow5mult+0x5a>
 8009644:	4638      	mov	r0, r7
 8009646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800964a:	bf00      	nop
 800964c:	0800a8a8 	.word	0x0800a8a8

08009650 <__lshift>:
 8009650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009654:	460c      	mov	r4, r1
 8009656:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800965a:	6923      	ldr	r3, [r4, #16]
 800965c:	6849      	ldr	r1, [r1, #4]
 800965e:	eb0a 0903 	add.w	r9, sl, r3
 8009662:	68a3      	ldr	r3, [r4, #8]
 8009664:	4607      	mov	r7, r0
 8009666:	4616      	mov	r6, r2
 8009668:	f109 0501 	add.w	r5, r9, #1
 800966c:	42ab      	cmp	r3, r5
 800966e:	db32      	blt.n	80096d6 <__lshift+0x86>
 8009670:	4638      	mov	r0, r7
 8009672:	f7ff fded 	bl	8009250 <_Balloc>
 8009676:	2300      	movs	r3, #0
 8009678:	4680      	mov	r8, r0
 800967a:	f100 0114 	add.w	r1, r0, #20
 800967e:	461a      	mov	r2, r3
 8009680:	4553      	cmp	r3, sl
 8009682:	db2b      	blt.n	80096dc <__lshift+0x8c>
 8009684:	6920      	ldr	r0, [r4, #16]
 8009686:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800968a:	f104 0314 	add.w	r3, r4, #20
 800968e:	f016 021f 	ands.w	r2, r6, #31
 8009692:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009696:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800969a:	d025      	beq.n	80096e8 <__lshift+0x98>
 800969c:	f1c2 0e20 	rsb	lr, r2, #32
 80096a0:	2000      	movs	r0, #0
 80096a2:	681e      	ldr	r6, [r3, #0]
 80096a4:	468a      	mov	sl, r1
 80096a6:	4096      	lsls	r6, r2
 80096a8:	4330      	orrs	r0, r6
 80096aa:	f84a 0b04 	str.w	r0, [sl], #4
 80096ae:	f853 0b04 	ldr.w	r0, [r3], #4
 80096b2:	459c      	cmp	ip, r3
 80096b4:	fa20 f00e 	lsr.w	r0, r0, lr
 80096b8:	d814      	bhi.n	80096e4 <__lshift+0x94>
 80096ba:	6048      	str	r0, [r1, #4]
 80096bc:	b108      	cbz	r0, 80096c2 <__lshift+0x72>
 80096be:	f109 0502 	add.w	r5, r9, #2
 80096c2:	3d01      	subs	r5, #1
 80096c4:	4638      	mov	r0, r7
 80096c6:	f8c8 5010 	str.w	r5, [r8, #16]
 80096ca:	4621      	mov	r1, r4
 80096cc:	f7ff fdf4 	bl	80092b8 <_Bfree>
 80096d0:	4640      	mov	r0, r8
 80096d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096d6:	3101      	adds	r1, #1
 80096d8:	005b      	lsls	r3, r3, #1
 80096da:	e7c7      	b.n	800966c <__lshift+0x1c>
 80096dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80096e0:	3301      	adds	r3, #1
 80096e2:	e7cd      	b.n	8009680 <__lshift+0x30>
 80096e4:	4651      	mov	r1, sl
 80096e6:	e7dc      	b.n	80096a2 <__lshift+0x52>
 80096e8:	3904      	subs	r1, #4
 80096ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80096ee:	f841 2f04 	str.w	r2, [r1, #4]!
 80096f2:	459c      	cmp	ip, r3
 80096f4:	d8f9      	bhi.n	80096ea <__lshift+0x9a>
 80096f6:	e7e4      	b.n	80096c2 <__lshift+0x72>

080096f8 <__mcmp>:
 80096f8:	6903      	ldr	r3, [r0, #16]
 80096fa:	690a      	ldr	r2, [r1, #16]
 80096fc:	1a9b      	subs	r3, r3, r2
 80096fe:	b530      	push	{r4, r5, lr}
 8009700:	d10c      	bne.n	800971c <__mcmp+0x24>
 8009702:	0092      	lsls	r2, r2, #2
 8009704:	3014      	adds	r0, #20
 8009706:	3114      	adds	r1, #20
 8009708:	1884      	adds	r4, r0, r2
 800970a:	4411      	add	r1, r2
 800970c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009710:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009714:	4295      	cmp	r5, r2
 8009716:	d003      	beq.n	8009720 <__mcmp+0x28>
 8009718:	d305      	bcc.n	8009726 <__mcmp+0x2e>
 800971a:	2301      	movs	r3, #1
 800971c:	4618      	mov	r0, r3
 800971e:	bd30      	pop	{r4, r5, pc}
 8009720:	42a0      	cmp	r0, r4
 8009722:	d3f3      	bcc.n	800970c <__mcmp+0x14>
 8009724:	e7fa      	b.n	800971c <__mcmp+0x24>
 8009726:	f04f 33ff 	mov.w	r3, #4294967295
 800972a:	e7f7      	b.n	800971c <__mcmp+0x24>

0800972c <__mdiff>:
 800972c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009730:	460d      	mov	r5, r1
 8009732:	4607      	mov	r7, r0
 8009734:	4611      	mov	r1, r2
 8009736:	4628      	mov	r0, r5
 8009738:	4614      	mov	r4, r2
 800973a:	f7ff ffdd 	bl	80096f8 <__mcmp>
 800973e:	1e06      	subs	r6, r0, #0
 8009740:	d108      	bne.n	8009754 <__mdiff+0x28>
 8009742:	4631      	mov	r1, r6
 8009744:	4638      	mov	r0, r7
 8009746:	f7ff fd83 	bl	8009250 <_Balloc>
 800974a:	2301      	movs	r3, #1
 800974c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009754:	bfa4      	itt	ge
 8009756:	4623      	movge	r3, r4
 8009758:	462c      	movge	r4, r5
 800975a:	4638      	mov	r0, r7
 800975c:	6861      	ldr	r1, [r4, #4]
 800975e:	bfa6      	itte	ge
 8009760:	461d      	movge	r5, r3
 8009762:	2600      	movge	r6, #0
 8009764:	2601      	movlt	r6, #1
 8009766:	f7ff fd73 	bl	8009250 <_Balloc>
 800976a:	692b      	ldr	r3, [r5, #16]
 800976c:	60c6      	str	r6, [r0, #12]
 800976e:	6926      	ldr	r6, [r4, #16]
 8009770:	f105 0914 	add.w	r9, r5, #20
 8009774:	f104 0214 	add.w	r2, r4, #20
 8009778:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800977c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009780:	f100 0514 	add.w	r5, r0, #20
 8009784:	f04f 0e00 	mov.w	lr, #0
 8009788:	f852 ab04 	ldr.w	sl, [r2], #4
 800978c:	f859 4b04 	ldr.w	r4, [r9], #4
 8009790:	fa1e f18a 	uxtah	r1, lr, sl
 8009794:	b2a3      	uxth	r3, r4
 8009796:	1ac9      	subs	r1, r1, r3
 8009798:	0c23      	lsrs	r3, r4, #16
 800979a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800979e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80097a2:	b289      	uxth	r1, r1
 80097a4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80097a8:	45c8      	cmp	r8, r9
 80097aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80097ae:	4694      	mov	ip, r2
 80097b0:	f845 3b04 	str.w	r3, [r5], #4
 80097b4:	d8e8      	bhi.n	8009788 <__mdiff+0x5c>
 80097b6:	45bc      	cmp	ip, r7
 80097b8:	d304      	bcc.n	80097c4 <__mdiff+0x98>
 80097ba:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80097be:	b183      	cbz	r3, 80097e2 <__mdiff+0xb6>
 80097c0:	6106      	str	r6, [r0, #16]
 80097c2:	e7c5      	b.n	8009750 <__mdiff+0x24>
 80097c4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80097c8:	fa1e f381 	uxtah	r3, lr, r1
 80097cc:	141a      	asrs	r2, r3, #16
 80097ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097d8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80097dc:	f845 3b04 	str.w	r3, [r5], #4
 80097e0:	e7e9      	b.n	80097b6 <__mdiff+0x8a>
 80097e2:	3e01      	subs	r6, #1
 80097e4:	e7e9      	b.n	80097ba <__mdiff+0x8e>
	...

080097e8 <__ulp>:
 80097e8:	4b12      	ldr	r3, [pc, #72]	; (8009834 <__ulp+0x4c>)
 80097ea:	ee10 2a90 	vmov	r2, s1
 80097ee:	401a      	ands	r2, r3
 80097f0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	dd04      	ble.n	8009802 <__ulp+0x1a>
 80097f8:	2000      	movs	r0, #0
 80097fa:	4619      	mov	r1, r3
 80097fc:	ec41 0b10 	vmov	d0, r0, r1
 8009800:	4770      	bx	lr
 8009802:	425b      	negs	r3, r3
 8009804:	151b      	asrs	r3, r3, #20
 8009806:	2b13      	cmp	r3, #19
 8009808:	f04f 0000 	mov.w	r0, #0
 800980c:	f04f 0100 	mov.w	r1, #0
 8009810:	dc04      	bgt.n	800981c <__ulp+0x34>
 8009812:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009816:	fa42 f103 	asr.w	r1, r2, r3
 800981a:	e7ef      	b.n	80097fc <__ulp+0x14>
 800981c:	3b14      	subs	r3, #20
 800981e:	2b1e      	cmp	r3, #30
 8009820:	f04f 0201 	mov.w	r2, #1
 8009824:	bfda      	itte	le
 8009826:	f1c3 031f 	rsble	r3, r3, #31
 800982a:	fa02 f303 	lslle.w	r3, r2, r3
 800982e:	4613      	movgt	r3, r2
 8009830:	4618      	mov	r0, r3
 8009832:	e7e3      	b.n	80097fc <__ulp+0x14>
 8009834:	7ff00000 	.word	0x7ff00000

08009838 <__b2d>:
 8009838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800983a:	6905      	ldr	r5, [r0, #16]
 800983c:	f100 0714 	add.w	r7, r0, #20
 8009840:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009844:	1f2e      	subs	r6, r5, #4
 8009846:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800984a:	4620      	mov	r0, r4
 800984c:	f7ff fdc4 	bl	80093d8 <__hi0bits>
 8009850:	f1c0 0320 	rsb	r3, r0, #32
 8009854:	280a      	cmp	r0, #10
 8009856:	600b      	str	r3, [r1, #0]
 8009858:	f8df c074 	ldr.w	ip, [pc, #116]	; 80098d0 <__b2d+0x98>
 800985c:	dc14      	bgt.n	8009888 <__b2d+0x50>
 800985e:	f1c0 0e0b 	rsb	lr, r0, #11
 8009862:	fa24 f10e 	lsr.w	r1, r4, lr
 8009866:	42b7      	cmp	r7, r6
 8009868:	ea41 030c 	orr.w	r3, r1, ip
 800986c:	bf34      	ite	cc
 800986e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009872:	2100      	movcs	r1, #0
 8009874:	3015      	adds	r0, #21
 8009876:	fa04 f000 	lsl.w	r0, r4, r0
 800987a:	fa21 f10e 	lsr.w	r1, r1, lr
 800987e:	ea40 0201 	orr.w	r2, r0, r1
 8009882:	ec43 2b10 	vmov	d0, r2, r3
 8009886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009888:	42b7      	cmp	r7, r6
 800988a:	bf3a      	itte	cc
 800988c:	f1a5 0608 	subcc.w	r6, r5, #8
 8009890:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009894:	2100      	movcs	r1, #0
 8009896:	380b      	subs	r0, #11
 8009898:	d015      	beq.n	80098c6 <__b2d+0x8e>
 800989a:	4084      	lsls	r4, r0
 800989c:	f1c0 0520 	rsb	r5, r0, #32
 80098a0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80098a4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80098a8:	42be      	cmp	r6, r7
 80098aa:	fa21 fc05 	lsr.w	ip, r1, r5
 80098ae:	ea44 030c 	orr.w	r3, r4, ip
 80098b2:	bf8c      	ite	hi
 80098b4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80098b8:	2400      	movls	r4, #0
 80098ba:	fa01 f000 	lsl.w	r0, r1, r0
 80098be:	40ec      	lsrs	r4, r5
 80098c0:	ea40 0204 	orr.w	r2, r0, r4
 80098c4:	e7dd      	b.n	8009882 <__b2d+0x4a>
 80098c6:	ea44 030c 	orr.w	r3, r4, ip
 80098ca:	460a      	mov	r2, r1
 80098cc:	e7d9      	b.n	8009882 <__b2d+0x4a>
 80098ce:	bf00      	nop
 80098d0:	3ff00000 	.word	0x3ff00000

080098d4 <__d2b>:
 80098d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80098d8:	460e      	mov	r6, r1
 80098da:	2101      	movs	r1, #1
 80098dc:	ec59 8b10 	vmov	r8, r9, d0
 80098e0:	4615      	mov	r5, r2
 80098e2:	f7ff fcb5 	bl	8009250 <_Balloc>
 80098e6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80098ea:	4607      	mov	r7, r0
 80098ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80098f0:	bb34      	cbnz	r4, 8009940 <__d2b+0x6c>
 80098f2:	9301      	str	r3, [sp, #4]
 80098f4:	f1b8 0300 	subs.w	r3, r8, #0
 80098f8:	d027      	beq.n	800994a <__d2b+0x76>
 80098fa:	a802      	add	r0, sp, #8
 80098fc:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009900:	f7ff fd89 	bl	8009416 <__lo0bits>
 8009904:	9900      	ldr	r1, [sp, #0]
 8009906:	b1f0      	cbz	r0, 8009946 <__d2b+0x72>
 8009908:	9a01      	ldr	r2, [sp, #4]
 800990a:	f1c0 0320 	rsb	r3, r0, #32
 800990e:	fa02 f303 	lsl.w	r3, r2, r3
 8009912:	430b      	orrs	r3, r1
 8009914:	40c2      	lsrs	r2, r0
 8009916:	617b      	str	r3, [r7, #20]
 8009918:	9201      	str	r2, [sp, #4]
 800991a:	9b01      	ldr	r3, [sp, #4]
 800991c:	61bb      	str	r3, [r7, #24]
 800991e:	2b00      	cmp	r3, #0
 8009920:	bf14      	ite	ne
 8009922:	2102      	movne	r1, #2
 8009924:	2101      	moveq	r1, #1
 8009926:	6139      	str	r1, [r7, #16]
 8009928:	b1c4      	cbz	r4, 800995c <__d2b+0x88>
 800992a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800992e:	4404      	add	r4, r0
 8009930:	6034      	str	r4, [r6, #0]
 8009932:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009936:	6028      	str	r0, [r5, #0]
 8009938:	4638      	mov	r0, r7
 800993a:	b003      	add	sp, #12
 800993c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009940:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009944:	e7d5      	b.n	80098f2 <__d2b+0x1e>
 8009946:	6179      	str	r1, [r7, #20]
 8009948:	e7e7      	b.n	800991a <__d2b+0x46>
 800994a:	a801      	add	r0, sp, #4
 800994c:	f7ff fd63 	bl	8009416 <__lo0bits>
 8009950:	9b01      	ldr	r3, [sp, #4]
 8009952:	617b      	str	r3, [r7, #20]
 8009954:	2101      	movs	r1, #1
 8009956:	6139      	str	r1, [r7, #16]
 8009958:	3020      	adds	r0, #32
 800995a:	e7e5      	b.n	8009928 <__d2b+0x54>
 800995c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009960:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009964:	6030      	str	r0, [r6, #0]
 8009966:	6918      	ldr	r0, [r3, #16]
 8009968:	f7ff fd36 	bl	80093d8 <__hi0bits>
 800996c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009970:	e7e1      	b.n	8009936 <__d2b+0x62>

08009972 <__ratio>:
 8009972:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009976:	4688      	mov	r8, r1
 8009978:	4669      	mov	r1, sp
 800997a:	4681      	mov	r9, r0
 800997c:	f7ff ff5c 	bl	8009838 <__b2d>
 8009980:	a901      	add	r1, sp, #4
 8009982:	4640      	mov	r0, r8
 8009984:	ec57 6b10 	vmov	r6, r7, d0
 8009988:	f7ff ff56 	bl	8009838 <__b2d>
 800998c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009990:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009994:	eba3 0c02 	sub.w	ip, r3, r2
 8009998:	e9dd 3200 	ldrd	r3, r2, [sp]
 800999c:	1a9b      	subs	r3, r3, r2
 800999e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80099a2:	ec5b ab10 	vmov	sl, fp, d0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	bfce      	itee	gt
 80099aa:	463a      	movgt	r2, r7
 80099ac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80099b0:	465a      	movle	r2, fp
 80099b2:	4659      	mov	r1, fp
 80099b4:	463d      	mov	r5, r7
 80099b6:	bfd4      	ite	le
 80099b8:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80099bc:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80099c0:	4630      	mov	r0, r6
 80099c2:	ee10 2a10 	vmov	r2, s0
 80099c6:	460b      	mov	r3, r1
 80099c8:	4629      	mov	r1, r5
 80099ca:	f7f6 ff5f 	bl	800088c <__aeabi_ddiv>
 80099ce:	ec41 0b10 	vmov	d0, r0, r1
 80099d2:	b003      	add	sp, #12
 80099d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080099d8 <__copybits>:
 80099d8:	3901      	subs	r1, #1
 80099da:	b510      	push	{r4, lr}
 80099dc:	1149      	asrs	r1, r1, #5
 80099de:	6914      	ldr	r4, [r2, #16]
 80099e0:	3101      	adds	r1, #1
 80099e2:	f102 0314 	add.w	r3, r2, #20
 80099e6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80099ea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80099ee:	42a3      	cmp	r3, r4
 80099f0:	4602      	mov	r2, r0
 80099f2:	d303      	bcc.n	80099fc <__copybits+0x24>
 80099f4:	2300      	movs	r3, #0
 80099f6:	428a      	cmp	r2, r1
 80099f8:	d305      	bcc.n	8009a06 <__copybits+0x2e>
 80099fa:	bd10      	pop	{r4, pc}
 80099fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a00:	f840 2b04 	str.w	r2, [r0], #4
 8009a04:	e7f3      	b.n	80099ee <__copybits+0x16>
 8009a06:	f842 3b04 	str.w	r3, [r2], #4
 8009a0a:	e7f4      	b.n	80099f6 <__copybits+0x1e>

08009a0c <__any_on>:
 8009a0c:	f100 0214 	add.w	r2, r0, #20
 8009a10:	6900      	ldr	r0, [r0, #16]
 8009a12:	114b      	asrs	r3, r1, #5
 8009a14:	4298      	cmp	r0, r3
 8009a16:	b510      	push	{r4, lr}
 8009a18:	db11      	blt.n	8009a3e <__any_on+0x32>
 8009a1a:	dd0a      	ble.n	8009a32 <__any_on+0x26>
 8009a1c:	f011 011f 	ands.w	r1, r1, #31
 8009a20:	d007      	beq.n	8009a32 <__any_on+0x26>
 8009a22:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009a26:	fa24 f001 	lsr.w	r0, r4, r1
 8009a2a:	fa00 f101 	lsl.w	r1, r0, r1
 8009a2e:	428c      	cmp	r4, r1
 8009a30:	d10b      	bne.n	8009a4a <__any_on+0x3e>
 8009a32:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d803      	bhi.n	8009a42 <__any_on+0x36>
 8009a3a:	2000      	movs	r0, #0
 8009a3c:	bd10      	pop	{r4, pc}
 8009a3e:	4603      	mov	r3, r0
 8009a40:	e7f7      	b.n	8009a32 <__any_on+0x26>
 8009a42:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009a46:	2900      	cmp	r1, #0
 8009a48:	d0f5      	beq.n	8009a36 <__any_on+0x2a>
 8009a4a:	2001      	movs	r0, #1
 8009a4c:	e7f6      	b.n	8009a3c <__any_on+0x30>

08009a4e <_calloc_r>:
 8009a4e:	b538      	push	{r3, r4, r5, lr}
 8009a50:	fb02 f401 	mul.w	r4, r2, r1
 8009a54:	4621      	mov	r1, r4
 8009a56:	f000 f857 	bl	8009b08 <_malloc_r>
 8009a5a:	4605      	mov	r5, r0
 8009a5c:	b118      	cbz	r0, 8009a66 <_calloc_r+0x18>
 8009a5e:	4622      	mov	r2, r4
 8009a60:	2100      	movs	r1, #0
 8009a62:	f7fc fd41 	bl	80064e8 <memset>
 8009a66:	4628      	mov	r0, r5
 8009a68:	bd38      	pop	{r3, r4, r5, pc}
	...

08009a6c <_free_r>:
 8009a6c:	b538      	push	{r3, r4, r5, lr}
 8009a6e:	4605      	mov	r5, r0
 8009a70:	2900      	cmp	r1, #0
 8009a72:	d045      	beq.n	8009b00 <_free_r+0x94>
 8009a74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a78:	1f0c      	subs	r4, r1, #4
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	bfb8      	it	lt
 8009a7e:	18e4      	addlt	r4, r4, r3
 8009a80:	f000 fa1d 	bl	8009ebe <__malloc_lock>
 8009a84:	4a1f      	ldr	r2, [pc, #124]	; (8009b04 <_free_r+0x98>)
 8009a86:	6813      	ldr	r3, [r2, #0]
 8009a88:	4610      	mov	r0, r2
 8009a8a:	b933      	cbnz	r3, 8009a9a <_free_r+0x2e>
 8009a8c:	6063      	str	r3, [r4, #4]
 8009a8e:	6014      	str	r4, [r2, #0]
 8009a90:	4628      	mov	r0, r5
 8009a92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a96:	f000 ba13 	b.w	8009ec0 <__malloc_unlock>
 8009a9a:	42a3      	cmp	r3, r4
 8009a9c:	d90c      	bls.n	8009ab8 <_free_r+0x4c>
 8009a9e:	6821      	ldr	r1, [r4, #0]
 8009aa0:	1862      	adds	r2, r4, r1
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	bf04      	itt	eq
 8009aa6:	681a      	ldreq	r2, [r3, #0]
 8009aa8:	685b      	ldreq	r3, [r3, #4]
 8009aaa:	6063      	str	r3, [r4, #4]
 8009aac:	bf04      	itt	eq
 8009aae:	1852      	addeq	r2, r2, r1
 8009ab0:	6022      	streq	r2, [r4, #0]
 8009ab2:	6004      	str	r4, [r0, #0]
 8009ab4:	e7ec      	b.n	8009a90 <_free_r+0x24>
 8009ab6:	4613      	mov	r3, r2
 8009ab8:	685a      	ldr	r2, [r3, #4]
 8009aba:	b10a      	cbz	r2, 8009ac0 <_free_r+0x54>
 8009abc:	42a2      	cmp	r2, r4
 8009abe:	d9fa      	bls.n	8009ab6 <_free_r+0x4a>
 8009ac0:	6819      	ldr	r1, [r3, #0]
 8009ac2:	1858      	adds	r0, r3, r1
 8009ac4:	42a0      	cmp	r0, r4
 8009ac6:	d10b      	bne.n	8009ae0 <_free_r+0x74>
 8009ac8:	6820      	ldr	r0, [r4, #0]
 8009aca:	4401      	add	r1, r0
 8009acc:	1858      	adds	r0, r3, r1
 8009ace:	4282      	cmp	r2, r0
 8009ad0:	6019      	str	r1, [r3, #0]
 8009ad2:	d1dd      	bne.n	8009a90 <_free_r+0x24>
 8009ad4:	6810      	ldr	r0, [r2, #0]
 8009ad6:	6852      	ldr	r2, [r2, #4]
 8009ad8:	605a      	str	r2, [r3, #4]
 8009ada:	4401      	add	r1, r0
 8009adc:	6019      	str	r1, [r3, #0]
 8009ade:	e7d7      	b.n	8009a90 <_free_r+0x24>
 8009ae0:	d902      	bls.n	8009ae8 <_free_r+0x7c>
 8009ae2:	230c      	movs	r3, #12
 8009ae4:	602b      	str	r3, [r5, #0]
 8009ae6:	e7d3      	b.n	8009a90 <_free_r+0x24>
 8009ae8:	6820      	ldr	r0, [r4, #0]
 8009aea:	1821      	adds	r1, r4, r0
 8009aec:	428a      	cmp	r2, r1
 8009aee:	bf04      	itt	eq
 8009af0:	6811      	ldreq	r1, [r2, #0]
 8009af2:	6852      	ldreq	r2, [r2, #4]
 8009af4:	6062      	str	r2, [r4, #4]
 8009af6:	bf04      	itt	eq
 8009af8:	1809      	addeq	r1, r1, r0
 8009afa:	6021      	streq	r1, [r4, #0]
 8009afc:	605c      	str	r4, [r3, #4]
 8009afe:	e7c7      	b.n	8009a90 <_free_r+0x24>
 8009b00:	bd38      	pop	{r3, r4, r5, pc}
 8009b02:	bf00      	nop
 8009b04:	20000650 	.word	0x20000650

08009b08 <_malloc_r>:
 8009b08:	b570      	push	{r4, r5, r6, lr}
 8009b0a:	1ccd      	adds	r5, r1, #3
 8009b0c:	f025 0503 	bic.w	r5, r5, #3
 8009b10:	3508      	adds	r5, #8
 8009b12:	2d0c      	cmp	r5, #12
 8009b14:	bf38      	it	cc
 8009b16:	250c      	movcc	r5, #12
 8009b18:	2d00      	cmp	r5, #0
 8009b1a:	4606      	mov	r6, r0
 8009b1c:	db01      	blt.n	8009b22 <_malloc_r+0x1a>
 8009b1e:	42a9      	cmp	r1, r5
 8009b20:	d903      	bls.n	8009b2a <_malloc_r+0x22>
 8009b22:	230c      	movs	r3, #12
 8009b24:	6033      	str	r3, [r6, #0]
 8009b26:	2000      	movs	r0, #0
 8009b28:	bd70      	pop	{r4, r5, r6, pc}
 8009b2a:	f000 f9c8 	bl	8009ebe <__malloc_lock>
 8009b2e:	4a21      	ldr	r2, [pc, #132]	; (8009bb4 <_malloc_r+0xac>)
 8009b30:	6814      	ldr	r4, [r2, #0]
 8009b32:	4621      	mov	r1, r4
 8009b34:	b991      	cbnz	r1, 8009b5c <_malloc_r+0x54>
 8009b36:	4c20      	ldr	r4, [pc, #128]	; (8009bb8 <_malloc_r+0xb0>)
 8009b38:	6823      	ldr	r3, [r4, #0]
 8009b3a:	b91b      	cbnz	r3, 8009b44 <_malloc_r+0x3c>
 8009b3c:	4630      	mov	r0, r6
 8009b3e:	f000 f98f 	bl	8009e60 <_sbrk_r>
 8009b42:	6020      	str	r0, [r4, #0]
 8009b44:	4629      	mov	r1, r5
 8009b46:	4630      	mov	r0, r6
 8009b48:	f000 f98a 	bl	8009e60 <_sbrk_r>
 8009b4c:	1c43      	adds	r3, r0, #1
 8009b4e:	d124      	bne.n	8009b9a <_malloc_r+0x92>
 8009b50:	230c      	movs	r3, #12
 8009b52:	6033      	str	r3, [r6, #0]
 8009b54:	4630      	mov	r0, r6
 8009b56:	f000 f9b3 	bl	8009ec0 <__malloc_unlock>
 8009b5a:	e7e4      	b.n	8009b26 <_malloc_r+0x1e>
 8009b5c:	680b      	ldr	r3, [r1, #0]
 8009b5e:	1b5b      	subs	r3, r3, r5
 8009b60:	d418      	bmi.n	8009b94 <_malloc_r+0x8c>
 8009b62:	2b0b      	cmp	r3, #11
 8009b64:	d90f      	bls.n	8009b86 <_malloc_r+0x7e>
 8009b66:	600b      	str	r3, [r1, #0]
 8009b68:	50cd      	str	r5, [r1, r3]
 8009b6a:	18cc      	adds	r4, r1, r3
 8009b6c:	4630      	mov	r0, r6
 8009b6e:	f000 f9a7 	bl	8009ec0 <__malloc_unlock>
 8009b72:	f104 000b 	add.w	r0, r4, #11
 8009b76:	1d23      	adds	r3, r4, #4
 8009b78:	f020 0007 	bic.w	r0, r0, #7
 8009b7c:	1ac3      	subs	r3, r0, r3
 8009b7e:	d0d3      	beq.n	8009b28 <_malloc_r+0x20>
 8009b80:	425a      	negs	r2, r3
 8009b82:	50e2      	str	r2, [r4, r3]
 8009b84:	e7d0      	b.n	8009b28 <_malloc_r+0x20>
 8009b86:	428c      	cmp	r4, r1
 8009b88:	684b      	ldr	r3, [r1, #4]
 8009b8a:	bf16      	itet	ne
 8009b8c:	6063      	strne	r3, [r4, #4]
 8009b8e:	6013      	streq	r3, [r2, #0]
 8009b90:	460c      	movne	r4, r1
 8009b92:	e7eb      	b.n	8009b6c <_malloc_r+0x64>
 8009b94:	460c      	mov	r4, r1
 8009b96:	6849      	ldr	r1, [r1, #4]
 8009b98:	e7cc      	b.n	8009b34 <_malloc_r+0x2c>
 8009b9a:	1cc4      	adds	r4, r0, #3
 8009b9c:	f024 0403 	bic.w	r4, r4, #3
 8009ba0:	42a0      	cmp	r0, r4
 8009ba2:	d005      	beq.n	8009bb0 <_malloc_r+0xa8>
 8009ba4:	1a21      	subs	r1, r4, r0
 8009ba6:	4630      	mov	r0, r6
 8009ba8:	f000 f95a 	bl	8009e60 <_sbrk_r>
 8009bac:	3001      	adds	r0, #1
 8009bae:	d0cf      	beq.n	8009b50 <_malloc_r+0x48>
 8009bb0:	6025      	str	r5, [r4, #0]
 8009bb2:	e7db      	b.n	8009b6c <_malloc_r+0x64>
 8009bb4:	20000650 	.word	0x20000650
 8009bb8:	20000654 	.word	0x20000654

08009bbc <__ssputs_r>:
 8009bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bc0:	688e      	ldr	r6, [r1, #8]
 8009bc2:	429e      	cmp	r6, r3
 8009bc4:	4682      	mov	sl, r0
 8009bc6:	460c      	mov	r4, r1
 8009bc8:	4690      	mov	r8, r2
 8009bca:	4699      	mov	r9, r3
 8009bcc:	d837      	bhi.n	8009c3e <__ssputs_r+0x82>
 8009bce:	898a      	ldrh	r2, [r1, #12]
 8009bd0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009bd4:	d031      	beq.n	8009c3a <__ssputs_r+0x7e>
 8009bd6:	6825      	ldr	r5, [r4, #0]
 8009bd8:	6909      	ldr	r1, [r1, #16]
 8009bda:	1a6f      	subs	r7, r5, r1
 8009bdc:	6965      	ldr	r5, [r4, #20]
 8009bde:	2302      	movs	r3, #2
 8009be0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009be4:	fb95 f5f3 	sdiv	r5, r5, r3
 8009be8:	f109 0301 	add.w	r3, r9, #1
 8009bec:	443b      	add	r3, r7
 8009bee:	429d      	cmp	r5, r3
 8009bf0:	bf38      	it	cc
 8009bf2:	461d      	movcc	r5, r3
 8009bf4:	0553      	lsls	r3, r2, #21
 8009bf6:	d530      	bpl.n	8009c5a <__ssputs_r+0x9e>
 8009bf8:	4629      	mov	r1, r5
 8009bfa:	f7ff ff85 	bl	8009b08 <_malloc_r>
 8009bfe:	4606      	mov	r6, r0
 8009c00:	b950      	cbnz	r0, 8009c18 <__ssputs_r+0x5c>
 8009c02:	230c      	movs	r3, #12
 8009c04:	f8ca 3000 	str.w	r3, [sl]
 8009c08:	89a3      	ldrh	r3, [r4, #12]
 8009c0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c0e:	81a3      	strh	r3, [r4, #12]
 8009c10:	f04f 30ff 	mov.w	r0, #4294967295
 8009c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c18:	463a      	mov	r2, r7
 8009c1a:	6921      	ldr	r1, [r4, #16]
 8009c1c:	f7fc fc40 	bl	80064a0 <memcpy>
 8009c20:	89a3      	ldrh	r3, [r4, #12]
 8009c22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c2a:	81a3      	strh	r3, [r4, #12]
 8009c2c:	6126      	str	r6, [r4, #16]
 8009c2e:	6165      	str	r5, [r4, #20]
 8009c30:	443e      	add	r6, r7
 8009c32:	1bed      	subs	r5, r5, r7
 8009c34:	6026      	str	r6, [r4, #0]
 8009c36:	60a5      	str	r5, [r4, #8]
 8009c38:	464e      	mov	r6, r9
 8009c3a:	454e      	cmp	r6, r9
 8009c3c:	d900      	bls.n	8009c40 <__ssputs_r+0x84>
 8009c3e:	464e      	mov	r6, r9
 8009c40:	4632      	mov	r2, r6
 8009c42:	4641      	mov	r1, r8
 8009c44:	6820      	ldr	r0, [r4, #0]
 8009c46:	f7fc fc36 	bl	80064b6 <memmove>
 8009c4a:	68a3      	ldr	r3, [r4, #8]
 8009c4c:	1b9b      	subs	r3, r3, r6
 8009c4e:	60a3      	str	r3, [r4, #8]
 8009c50:	6823      	ldr	r3, [r4, #0]
 8009c52:	441e      	add	r6, r3
 8009c54:	6026      	str	r6, [r4, #0]
 8009c56:	2000      	movs	r0, #0
 8009c58:	e7dc      	b.n	8009c14 <__ssputs_r+0x58>
 8009c5a:	462a      	mov	r2, r5
 8009c5c:	f000 f931 	bl	8009ec2 <_realloc_r>
 8009c60:	4606      	mov	r6, r0
 8009c62:	2800      	cmp	r0, #0
 8009c64:	d1e2      	bne.n	8009c2c <__ssputs_r+0x70>
 8009c66:	6921      	ldr	r1, [r4, #16]
 8009c68:	4650      	mov	r0, sl
 8009c6a:	f7ff feff 	bl	8009a6c <_free_r>
 8009c6e:	e7c8      	b.n	8009c02 <__ssputs_r+0x46>

08009c70 <_svfiprintf_r>:
 8009c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c74:	461d      	mov	r5, r3
 8009c76:	898b      	ldrh	r3, [r1, #12]
 8009c78:	061f      	lsls	r7, r3, #24
 8009c7a:	b09d      	sub	sp, #116	; 0x74
 8009c7c:	4680      	mov	r8, r0
 8009c7e:	460c      	mov	r4, r1
 8009c80:	4616      	mov	r6, r2
 8009c82:	d50f      	bpl.n	8009ca4 <_svfiprintf_r+0x34>
 8009c84:	690b      	ldr	r3, [r1, #16]
 8009c86:	b96b      	cbnz	r3, 8009ca4 <_svfiprintf_r+0x34>
 8009c88:	2140      	movs	r1, #64	; 0x40
 8009c8a:	f7ff ff3d 	bl	8009b08 <_malloc_r>
 8009c8e:	6020      	str	r0, [r4, #0]
 8009c90:	6120      	str	r0, [r4, #16]
 8009c92:	b928      	cbnz	r0, 8009ca0 <_svfiprintf_r+0x30>
 8009c94:	230c      	movs	r3, #12
 8009c96:	f8c8 3000 	str.w	r3, [r8]
 8009c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c9e:	e0c8      	b.n	8009e32 <_svfiprintf_r+0x1c2>
 8009ca0:	2340      	movs	r3, #64	; 0x40
 8009ca2:	6163      	str	r3, [r4, #20]
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	9309      	str	r3, [sp, #36]	; 0x24
 8009ca8:	2320      	movs	r3, #32
 8009caa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cae:	2330      	movs	r3, #48	; 0x30
 8009cb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cb4:	9503      	str	r5, [sp, #12]
 8009cb6:	f04f 0b01 	mov.w	fp, #1
 8009cba:	4637      	mov	r7, r6
 8009cbc:	463d      	mov	r5, r7
 8009cbe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009cc2:	b10b      	cbz	r3, 8009cc8 <_svfiprintf_r+0x58>
 8009cc4:	2b25      	cmp	r3, #37	; 0x25
 8009cc6:	d13e      	bne.n	8009d46 <_svfiprintf_r+0xd6>
 8009cc8:	ebb7 0a06 	subs.w	sl, r7, r6
 8009ccc:	d00b      	beq.n	8009ce6 <_svfiprintf_r+0x76>
 8009cce:	4653      	mov	r3, sl
 8009cd0:	4632      	mov	r2, r6
 8009cd2:	4621      	mov	r1, r4
 8009cd4:	4640      	mov	r0, r8
 8009cd6:	f7ff ff71 	bl	8009bbc <__ssputs_r>
 8009cda:	3001      	adds	r0, #1
 8009cdc:	f000 80a4 	beq.w	8009e28 <_svfiprintf_r+0x1b8>
 8009ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ce2:	4453      	add	r3, sl
 8009ce4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ce6:	783b      	ldrb	r3, [r7, #0]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	f000 809d 	beq.w	8009e28 <_svfiprintf_r+0x1b8>
 8009cee:	2300      	movs	r3, #0
 8009cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8009cf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cf8:	9304      	str	r3, [sp, #16]
 8009cfa:	9307      	str	r3, [sp, #28]
 8009cfc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d00:	931a      	str	r3, [sp, #104]	; 0x68
 8009d02:	462f      	mov	r7, r5
 8009d04:	2205      	movs	r2, #5
 8009d06:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009d0a:	4850      	ldr	r0, [pc, #320]	; (8009e4c <_svfiprintf_r+0x1dc>)
 8009d0c:	f7f6 fa88 	bl	8000220 <memchr>
 8009d10:	9b04      	ldr	r3, [sp, #16]
 8009d12:	b9d0      	cbnz	r0, 8009d4a <_svfiprintf_r+0xda>
 8009d14:	06d9      	lsls	r1, r3, #27
 8009d16:	bf44      	itt	mi
 8009d18:	2220      	movmi	r2, #32
 8009d1a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009d1e:	071a      	lsls	r2, r3, #28
 8009d20:	bf44      	itt	mi
 8009d22:	222b      	movmi	r2, #43	; 0x2b
 8009d24:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009d28:	782a      	ldrb	r2, [r5, #0]
 8009d2a:	2a2a      	cmp	r2, #42	; 0x2a
 8009d2c:	d015      	beq.n	8009d5a <_svfiprintf_r+0xea>
 8009d2e:	9a07      	ldr	r2, [sp, #28]
 8009d30:	462f      	mov	r7, r5
 8009d32:	2000      	movs	r0, #0
 8009d34:	250a      	movs	r5, #10
 8009d36:	4639      	mov	r1, r7
 8009d38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d3c:	3b30      	subs	r3, #48	; 0x30
 8009d3e:	2b09      	cmp	r3, #9
 8009d40:	d94d      	bls.n	8009dde <_svfiprintf_r+0x16e>
 8009d42:	b1b8      	cbz	r0, 8009d74 <_svfiprintf_r+0x104>
 8009d44:	e00f      	b.n	8009d66 <_svfiprintf_r+0xf6>
 8009d46:	462f      	mov	r7, r5
 8009d48:	e7b8      	b.n	8009cbc <_svfiprintf_r+0x4c>
 8009d4a:	4a40      	ldr	r2, [pc, #256]	; (8009e4c <_svfiprintf_r+0x1dc>)
 8009d4c:	1a80      	subs	r0, r0, r2
 8009d4e:	fa0b f000 	lsl.w	r0, fp, r0
 8009d52:	4318      	orrs	r0, r3
 8009d54:	9004      	str	r0, [sp, #16]
 8009d56:	463d      	mov	r5, r7
 8009d58:	e7d3      	b.n	8009d02 <_svfiprintf_r+0x92>
 8009d5a:	9a03      	ldr	r2, [sp, #12]
 8009d5c:	1d11      	adds	r1, r2, #4
 8009d5e:	6812      	ldr	r2, [r2, #0]
 8009d60:	9103      	str	r1, [sp, #12]
 8009d62:	2a00      	cmp	r2, #0
 8009d64:	db01      	blt.n	8009d6a <_svfiprintf_r+0xfa>
 8009d66:	9207      	str	r2, [sp, #28]
 8009d68:	e004      	b.n	8009d74 <_svfiprintf_r+0x104>
 8009d6a:	4252      	negs	r2, r2
 8009d6c:	f043 0302 	orr.w	r3, r3, #2
 8009d70:	9207      	str	r2, [sp, #28]
 8009d72:	9304      	str	r3, [sp, #16]
 8009d74:	783b      	ldrb	r3, [r7, #0]
 8009d76:	2b2e      	cmp	r3, #46	; 0x2e
 8009d78:	d10c      	bne.n	8009d94 <_svfiprintf_r+0x124>
 8009d7a:	787b      	ldrb	r3, [r7, #1]
 8009d7c:	2b2a      	cmp	r3, #42	; 0x2a
 8009d7e:	d133      	bne.n	8009de8 <_svfiprintf_r+0x178>
 8009d80:	9b03      	ldr	r3, [sp, #12]
 8009d82:	1d1a      	adds	r2, r3, #4
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	9203      	str	r2, [sp, #12]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	bfb8      	it	lt
 8009d8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d90:	3702      	adds	r7, #2
 8009d92:	9305      	str	r3, [sp, #20]
 8009d94:	4d2e      	ldr	r5, [pc, #184]	; (8009e50 <_svfiprintf_r+0x1e0>)
 8009d96:	7839      	ldrb	r1, [r7, #0]
 8009d98:	2203      	movs	r2, #3
 8009d9a:	4628      	mov	r0, r5
 8009d9c:	f7f6 fa40 	bl	8000220 <memchr>
 8009da0:	b138      	cbz	r0, 8009db2 <_svfiprintf_r+0x142>
 8009da2:	2340      	movs	r3, #64	; 0x40
 8009da4:	1b40      	subs	r0, r0, r5
 8009da6:	fa03 f000 	lsl.w	r0, r3, r0
 8009daa:	9b04      	ldr	r3, [sp, #16]
 8009dac:	4303      	orrs	r3, r0
 8009dae:	3701      	adds	r7, #1
 8009db0:	9304      	str	r3, [sp, #16]
 8009db2:	7839      	ldrb	r1, [r7, #0]
 8009db4:	4827      	ldr	r0, [pc, #156]	; (8009e54 <_svfiprintf_r+0x1e4>)
 8009db6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009dba:	2206      	movs	r2, #6
 8009dbc:	1c7e      	adds	r6, r7, #1
 8009dbe:	f7f6 fa2f 	bl	8000220 <memchr>
 8009dc2:	2800      	cmp	r0, #0
 8009dc4:	d038      	beq.n	8009e38 <_svfiprintf_r+0x1c8>
 8009dc6:	4b24      	ldr	r3, [pc, #144]	; (8009e58 <_svfiprintf_r+0x1e8>)
 8009dc8:	bb13      	cbnz	r3, 8009e10 <_svfiprintf_r+0x1a0>
 8009dca:	9b03      	ldr	r3, [sp, #12]
 8009dcc:	3307      	adds	r3, #7
 8009dce:	f023 0307 	bic.w	r3, r3, #7
 8009dd2:	3308      	adds	r3, #8
 8009dd4:	9303      	str	r3, [sp, #12]
 8009dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dd8:	444b      	add	r3, r9
 8009dda:	9309      	str	r3, [sp, #36]	; 0x24
 8009ddc:	e76d      	b.n	8009cba <_svfiprintf_r+0x4a>
 8009dde:	fb05 3202 	mla	r2, r5, r2, r3
 8009de2:	2001      	movs	r0, #1
 8009de4:	460f      	mov	r7, r1
 8009de6:	e7a6      	b.n	8009d36 <_svfiprintf_r+0xc6>
 8009de8:	2300      	movs	r3, #0
 8009dea:	3701      	adds	r7, #1
 8009dec:	9305      	str	r3, [sp, #20]
 8009dee:	4619      	mov	r1, r3
 8009df0:	250a      	movs	r5, #10
 8009df2:	4638      	mov	r0, r7
 8009df4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009df8:	3a30      	subs	r2, #48	; 0x30
 8009dfa:	2a09      	cmp	r2, #9
 8009dfc:	d903      	bls.n	8009e06 <_svfiprintf_r+0x196>
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d0c8      	beq.n	8009d94 <_svfiprintf_r+0x124>
 8009e02:	9105      	str	r1, [sp, #20]
 8009e04:	e7c6      	b.n	8009d94 <_svfiprintf_r+0x124>
 8009e06:	fb05 2101 	mla	r1, r5, r1, r2
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	4607      	mov	r7, r0
 8009e0e:	e7f0      	b.n	8009df2 <_svfiprintf_r+0x182>
 8009e10:	ab03      	add	r3, sp, #12
 8009e12:	9300      	str	r3, [sp, #0]
 8009e14:	4622      	mov	r2, r4
 8009e16:	4b11      	ldr	r3, [pc, #68]	; (8009e5c <_svfiprintf_r+0x1ec>)
 8009e18:	a904      	add	r1, sp, #16
 8009e1a:	4640      	mov	r0, r8
 8009e1c:	f7fc fc00 	bl	8006620 <_printf_float>
 8009e20:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009e24:	4681      	mov	r9, r0
 8009e26:	d1d6      	bne.n	8009dd6 <_svfiprintf_r+0x166>
 8009e28:	89a3      	ldrh	r3, [r4, #12]
 8009e2a:	065b      	lsls	r3, r3, #25
 8009e2c:	f53f af35 	bmi.w	8009c9a <_svfiprintf_r+0x2a>
 8009e30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e32:	b01d      	add	sp, #116	; 0x74
 8009e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e38:	ab03      	add	r3, sp, #12
 8009e3a:	9300      	str	r3, [sp, #0]
 8009e3c:	4622      	mov	r2, r4
 8009e3e:	4b07      	ldr	r3, [pc, #28]	; (8009e5c <_svfiprintf_r+0x1ec>)
 8009e40:	a904      	add	r1, sp, #16
 8009e42:	4640      	mov	r0, r8
 8009e44:	f7fc fea2 	bl	8006b8c <_printf_i>
 8009e48:	e7ea      	b.n	8009e20 <_svfiprintf_r+0x1b0>
 8009e4a:	bf00      	nop
 8009e4c:	0800a8b4 	.word	0x0800a8b4
 8009e50:	0800a8ba 	.word	0x0800a8ba
 8009e54:	0800a8be 	.word	0x0800a8be
 8009e58:	08006621 	.word	0x08006621
 8009e5c:	08009bbd 	.word	0x08009bbd

08009e60 <_sbrk_r>:
 8009e60:	b538      	push	{r3, r4, r5, lr}
 8009e62:	4c06      	ldr	r4, [pc, #24]	; (8009e7c <_sbrk_r+0x1c>)
 8009e64:	2300      	movs	r3, #0
 8009e66:	4605      	mov	r5, r0
 8009e68:	4608      	mov	r0, r1
 8009e6a:	6023      	str	r3, [r4, #0]
 8009e6c:	f7f8 fe72 	bl	8002b54 <_sbrk>
 8009e70:	1c43      	adds	r3, r0, #1
 8009e72:	d102      	bne.n	8009e7a <_sbrk_r+0x1a>
 8009e74:	6823      	ldr	r3, [r4, #0]
 8009e76:	b103      	cbz	r3, 8009e7a <_sbrk_r+0x1a>
 8009e78:	602b      	str	r3, [r5, #0]
 8009e7a:	bd38      	pop	{r3, r4, r5, pc}
 8009e7c:	200008a0 	.word	0x200008a0

08009e80 <strncmp>:
 8009e80:	b510      	push	{r4, lr}
 8009e82:	b16a      	cbz	r2, 8009ea0 <strncmp+0x20>
 8009e84:	3901      	subs	r1, #1
 8009e86:	1884      	adds	r4, r0, r2
 8009e88:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009e8c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d103      	bne.n	8009e9c <strncmp+0x1c>
 8009e94:	42a0      	cmp	r0, r4
 8009e96:	d001      	beq.n	8009e9c <strncmp+0x1c>
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d1f5      	bne.n	8009e88 <strncmp+0x8>
 8009e9c:	1a98      	subs	r0, r3, r2
 8009e9e:	bd10      	pop	{r4, pc}
 8009ea0:	4610      	mov	r0, r2
 8009ea2:	e7fc      	b.n	8009e9e <strncmp+0x1e>

08009ea4 <__ascii_wctomb>:
 8009ea4:	b149      	cbz	r1, 8009eba <__ascii_wctomb+0x16>
 8009ea6:	2aff      	cmp	r2, #255	; 0xff
 8009ea8:	bf85      	ittet	hi
 8009eaa:	238a      	movhi	r3, #138	; 0x8a
 8009eac:	6003      	strhi	r3, [r0, #0]
 8009eae:	700a      	strbls	r2, [r1, #0]
 8009eb0:	f04f 30ff 	movhi.w	r0, #4294967295
 8009eb4:	bf98      	it	ls
 8009eb6:	2001      	movls	r0, #1
 8009eb8:	4770      	bx	lr
 8009eba:	4608      	mov	r0, r1
 8009ebc:	4770      	bx	lr

08009ebe <__malloc_lock>:
 8009ebe:	4770      	bx	lr

08009ec0 <__malloc_unlock>:
 8009ec0:	4770      	bx	lr

08009ec2 <_realloc_r>:
 8009ec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ec4:	4607      	mov	r7, r0
 8009ec6:	4614      	mov	r4, r2
 8009ec8:	460e      	mov	r6, r1
 8009eca:	b921      	cbnz	r1, 8009ed6 <_realloc_r+0x14>
 8009ecc:	4611      	mov	r1, r2
 8009ece:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009ed2:	f7ff be19 	b.w	8009b08 <_malloc_r>
 8009ed6:	b922      	cbnz	r2, 8009ee2 <_realloc_r+0x20>
 8009ed8:	f7ff fdc8 	bl	8009a6c <_free_r>
 8009edc:	4625      	mov	r5, r4
 8009ede:	4628      	mov	r0, r5
 8009ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ee2:	f000 f814 	bl	8009f0e <_malloc_usable_size_r>
 8009ee6:	42a0      	cmp	r0, r4
 8009ee8:	d20f      	bcs.n	8009f0a <_realloc_r+0x48>
 8009eea:	4621      	mov	r1, r4
 8009eec:	4638      	mov	r0, r7
 8009eee:	f7ff fe0b 	bl	8009b08 <_malloc_r>
 8009ef2:	4605      	mov	r5, r0
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	d0f2      	beq.n	8009ede <_realloc_r+0x1c>
 8009ef8:	4631      	mov	r1, r6
 8009efa:	4622      	mov	r2, r4
 8009efc:	f7fc fad0 	bl	80064a0 <memcpy>
 8009f00:	4631      	mov	r1, r6
 8009f02:	4638      	mov	r0, r7
 8009f04:	f7ff fdb2 	bl	8009a6c <_free_r>
 8009f08:	e7e9      	b.n	8009ede <_realloc_r+0x1c>
 8009f0a:	4635      	mov	r5, r6
 8009f0c:	e7e7      	b.n	8009ede <_realloc_r+0x1c>

08009f0e <_malloc_usable_size_r>:
 8009f0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f12:	1f18      	subs	r0, r3, #4
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	bfbc      	itt	lt
 8009f18:	580b      	ldrlt	r3, [r1, r0]
 8009f1a:	18c0      	addlt	r0, r0, r3
 8009f1c:	4770      	bx	lr
	...

08009f20 <_init>:
 8009f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f22:	bf00      	nop
 8009f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f26:	bc08      	pop	{r3}
 8009f28:	469e      	mov	lr, r3
 8009f2a:	4770      	bx	lr

08009f2c <_fini>:
 8009f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f2e:	bf00      	nop
 8009f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f32:	bc08      	pop	{r3}
 8009f34:	469e      	mov	lr, r3
 8009f36:	4770      	bx	lr
